import { __assign, __awaiter, __generator, __values } from "tslib";
import { toHex } from "@aws-sdk/util-hex-encoding";
export function receiveMessageMiddleware(options) {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var resp, output, messageIds, _a, _b, message, md5, hash, _c, _d, e_1_1;
            var e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4, next(__assign({}, args))];
                    case 1:
                        resp = _f.sent();
                        output = resp.output;
                        messageIds = [];
                        if (!(output.Messages !== undefined)) return [3, 9];
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        _a = __values(output.Messages), _b = _a.next();
                        _f.label = 3;
                    case 3:
                        if (!!_b.done) return [3, 6];
                        message = _b.value;
                        md5 = message.MD5OfBody;
                        hash = new options.md5();
                        hash.update(message.Body || "");
                        _c = md5;
                        _d = toHex;
                        return [4, hash.digest()];
                    case 4:
                        if (_c !== _d.apply(void 0, [_f.sent()])) {
                            messageIds.push(message.MessageId);
                        }
                        _f.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3, 3];
                    case 6: return [3, 9];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7];
                    case 9:
                        if (messageIds.length > 0) {
                            throw new Error("Invalid MD5 checksum on messages: " + messageIds.join(", "));
                        }
                        return [2, resp];
                }
            });
        }); };
    };
}
export var receiveMessageMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BODY_MD5"],
    name: "receiveMessageMiddleware",
    override: true,
};
export var getReceiveMessagePlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(receiveMessageMiddleware(config), receiveMessageMiddlewareOptions);
    },
}); };
