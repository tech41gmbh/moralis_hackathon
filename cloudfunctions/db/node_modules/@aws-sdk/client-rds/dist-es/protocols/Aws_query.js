import { __assign, __awaiter, __generator, __read, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTime as __parseRfc3339DateTime, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, } from "@aws-sdk/smithy-client";
import { decodeHTML } from "entities";
import { parse as xmlParse } from "fast-xml-parser";
export var serializeAws_queryAddRoleToDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryAddRoleToDBClusterMessage(input, context)), { Action: "AddRoleToDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryAddRoleToDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryAddRoleToDBInstanceMessage(input, context)), { Action: "AddRoleToDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryAddSourceIdentifierToSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryAddSourceIdentifierToSubscriptionMessage(input, context)), { Action: "AddSourceIdentifierToSubscription", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryAddTagsToResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryAddTagsToResourceMessage(input, context)), { Action: "AddTagsToResource", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryApplyPendingMaintenanceActionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryApplyPendingMaintenanceActionMessage(input, context)), { Action: "ApplyPendingMaintenanceAction", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryAuthorizeDBSecurityGroupIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryAuthorizeDBSecurityGroupIngressMessage(input, context)), { Action: "AuthorizeDBSecurityGroupIngress", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryBacktrackDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryBacktrackDBClusterMessage(input, context)), { Action: "BacktrackDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCancelExportTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCancelExportTaskMessage(input, context)), { Action: "CancelExportTask", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCopyDBClusterParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCopyDBClusterParameterGroupMessage(input, context)), { Action: "CopyDBClusterParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCopyDBClusterSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCopyDBClusterSnapshotMessage(input, context)), { Action: "CopyDBClusterSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCopyDBParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCopyDBParameterGroupMessage(input, context)), { Action: "CopyDBParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCopyDBSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCopyDBSnapshotMessage(input, context)), { Action: "CopyDBSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCopyOptionGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCopyOptionGroupMessage(input, context)), { Action: "CopyOptionGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateCustomAvailabilityZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateCustomAvailabilityZoneMessage(input, context)), { Action: "CreateCustomAvailabilityZone", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateCustomDBEngineVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateCustomDBEngineVersionMessage(input, context)), { Action: "CreateCustomDBEngineVersion", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBClusterMessage(input, context)), { Action: "CreateDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBClusterEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBClusterEndpointMessage(input, context)), { Action: "CreateDBClusterEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBClusterParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBClusterParameterGroupMessage(input, context)), { Action: "CreateDBClusterParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBClusterSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBClusterSnapshotMessage(input, context)), { Action: "CreateDBClusterSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBInstanceMessage(input, context)), { Action: "CreateDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBInstanceReadReplicaCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBInstanceReadReplicaMessage(input, context)), { Action: "CreateDBInstanceReadReplica", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBParameterGroupMessage(input, context)), { Action: "CreateDBParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBProxyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBProxyRequest(input, context)), { Action: "CreateDBProxy", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBProxyEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBProxyEndpointRequest(input, context)), { Action: "CreateDBProxyEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBSecurityGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBSecurityGroupMessage(input, context)), { Action: "CreateDBSecurityGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBSnapshotMessage(input, context)), { Action: "CreateDBSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateDBSubnetGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateDBSubnetGroupMessage(input, context)), { Action: "CreateDBSubnetGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateEventSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateEventSubscriptionMessage(input, context)), { Action: "CreateEventSubscription", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateGlobalClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateGlobalClusterMessage(input, context)), { Action: "CreateGlobalCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryCreateOptionGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryCreateOptionGroupMessage(input, context)), { Action: "CreateOptionGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteCustomAvailabilityZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteCustomAvailabilityZoneMessage(input, context)), { Action: "DeleteCustomAvailabilityZone", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteCustomDBEngineVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteCustomDBEngineVersionMessage(input, context)), { Action: "DeleteCustomDBEngineVersion", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBClusterMessage(input, context)), { Action: "DeleteDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBClusterEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBClusterEndpointMessage(input, context)), { Action: "DeleteDBClusterEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBClusterParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBClusterParameterGroupMessage(input, context)), { Action: "DeleteDBClusterParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBClusterSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBClusterSnapshotMessage(input, context)), { Action: "DeleteDBClusterSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBInstanceMessage(input, context)), { Action: "DeleteDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBInstanceAutomatedBackupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBInstanceAutomatedBackupMessage(input, context)), { Action: "DeleteDBInstanceAutomatedBackup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBParameterGroupMessage(input, context)), { Action: "DeleteDBParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBProxyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBProxyRequest(input, context)), { Action: "DeleteDBProxy", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBProxyEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBProxyEndpointRequest(input, context)), { Action: "DeleteDBProxyEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBSecurityGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBSecurityGroupMessage(input, context)), { Action: "DeleteDBSecurityGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBSnapshotMessage(input, context)), { Action: "DeleteDBSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteDBSubnetGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteDBSubnetGroupMessage(input, context)), { Action: "DeleteDBSubnetGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteEventSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteEventSubscriptionMessage(input, context)), { Action: "DeleteEventSubscription", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteGlobalClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteGlobalClusterMessage(input, context)), { Action: "DeleteGlobalCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteInstallationMediaCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteInstallationMediaMessage(input, context)), { Action: "DeleteInstallationMedia", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeleteOptionGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeleteOptionGroupMessage(input, context)), { Action: "DeleteOptionGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDeregisterDBProxyTargetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDeregisterDBProxyTargetsRequest(input, context)), { Action: "DeregisterDBProxyTargets", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeAccountAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeAccountAttributesMessage(input, context)), { Action: "DescribeAccountAttributes", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeCertificatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeCertificatesMessage(input, context)), { Action: "DescribeCertificates", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeCustomAvailabilityZonesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeCustomAvailabilityZonesMessage(input, context)), { Action: "DescribeCustomAvailabilityZones", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterBacktracksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterBacktracksMessage(input, context)), { Action: "DescribeDBClusterBacktracks", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterEndpointsMessage(input, context)), { Action: "DescribeDBClusterEndpoints", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterParameterGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterParameterGroupsMessage(input, context)), { Action: "DescribeDBClusterParameterGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterParametersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterParametersMessage(input, context)), { Action: "DescribeDBClusterParameters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClustersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClustersMessage(input, context)), { Action: "DescribeDBClusters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterSnapshotAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterSnapshotAttributesMessage(input, context)), { Action: "DescribeDBClusterSnapshotAttributes", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBClusterSnapshotsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBClusterSnapshotsMessage(input, context)), { Action: "DescribeDBClusterSnapshots", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBEngineVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBEngineVersionsMessage(input, context)), { Action: "DescribeDBEngineVersions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage(input, context)), { Action: "DescribeDBInstanceAutomatedBackups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBInstancesMessage(input, context)), { Action: "DescribeDBInstances", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBLogFilesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBLogFilesMessage(input, context)), { Action: "DescribeDBLogFiles", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBParameterGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBParameterGroupsMessage(input, context)), { Action: "DescribeDBParameterGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBParametersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBParametersMessage(input, context)), { Action: "DescribeDBParameters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBProxiesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBProxiesRequest(input, context)), { Action: "DescribeDBProxies", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBProxyEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBProxyEndpointsRequest(input, context)), { Action: "DescribeDBProxyEndpoints", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBProxyTargetGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBProxyTargetGroupsRequest(input, context)), { Action: "DescribeDBProxyTargetGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBProxyTargetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBProxyTargetsRequest(input, context)), { Action: "DescribeDBProxyTargets", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBSecurityGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBSecurityGroupsMessage(input, context)), { Action: "DescribeDBSecurityGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBSnapshotAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBSnapshotAttributesMessage(input, context)), { Action: "DescribeDBSnapshotAttributes", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBSnapshotsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBSnapshotsMessage(input, context)), { Action: "DescribeDBSnapshots", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeDBSubnetGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeDBSubnetGroupsMessage(input, context)), { Action: "DescribeDBSubnetGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeEngineDefaultClusterParametersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeEngineDefaultClusterParametersMessage(input, context)), { Action: "DescribeEngineDefaultClusterParameters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeEngineDefaultParametersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeEngineDefaultParametersMessage(input, context)), { Action: "DescribeEngineDefaultParameters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeEventCategoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeEventCategoriesMessage(input, context)), { Action: "DescribeEventCategories", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeEventsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeEventsMessage(input, context)), { Action: "DescribeEvents", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeEventSubscriptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeEventSubscriptionsMessage(input, context)), { Action: "DescribeEventSubscriptions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeExportTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeExportTasksMessage(input, context)), { Action: "DescribeExportTasks", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeGlobalClustersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeGlobalClustersMessage(input, context)), { Action: "DescribeGlobalClusters", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeInstallationMediaCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeInstallationMediaMessage(input, context)), { Action: "DescribeInstallationMedia", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeOptionGroupOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeOptionGroupOptionsMessage(input, context)), { Action: "DescribeOptionGroupOptions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeOptionGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeOptionGroupsMessage(input, context)), { Action: "DescribeOptionGroups", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeOrderableDBInstanceOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeOrderableDBInstanceOptionsMessage(input, context)), { Action: "DescribeOrderableDBInstanceOptions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribePendingMaintenanceActionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribePendingMaintenanceActionsMessage(input, context)), { Action: "DescribePendingMaintenanceActions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeReservedDBInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeReservedDBInstancesMessage(input, context)), { Action: "DescribeReservedDBInstances", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeReservedDBInstancesOfferingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeReservedDBInstancesOfferingsMessage(input, context)), { Action: "DescribeReservedDBInstancesOfferings", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeSourceRegionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeSourceRegionsMessage(input, context)), { Action: "DescribeSourceRegions", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDescribeValidDBInstanceModificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDescribeValidDBInstanceModificationsMessage(input, context)), { Action: "DescribeValidDBInstanceModifications", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryDownloadDBLogFilePortionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryDownloadDBLogFilePortionMessage(input, context)), { Action: "DownloadDBLogFilePortion", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryFailoverDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryFailoverDBClusterMessage(input, context)), { Action: "FailoverDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryFailoverGlobalClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryFailoverGlobalClusterMessage(input, context)), { Action: "FailoverGlobalCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryImportInstallationMediaCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryImportInstallationMediaMessage(input, context)), { Action: "ImportInstallationMedia", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryListTagsForResourceMessage(input, context)), { Action: "ListTagsForResource", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyCertificatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyCertificatesMessage(input, context)), { Action: "ModifyCertificates", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyCurrentDBClusterCapacityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyCurrentDBClusterCapacityMessage(input, context)), { Action: "ModifyCurrentDBClusterCapacity", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyCustomDBEngineVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyCustomDBEngineVersionMessage(input, context)), { Action: "ModifyCustomDBEngineVersion", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBClusterMessage(input, context)), { Action: "ModifyDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBClusterEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBClusterEndpointMessage(input, context)), { Action: "ModifyDBClusterEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBClusterParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBClusterParameterGroupMessage(input, context)), { Action: "ModifyDBClusterParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBClusterSnapshotAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBClusterSnapshotAttributeMessage(input, context)), { Action: "ModifyDBClusterSnapshotAttribute", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBInstanceMessage(input, context)), { Action: "ModifyDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBParameterGroupMessage(input, context)), { Action: "ModifyDBParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBProxyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBProxyRequest(input, context)), { Action: "ModifyDBProxy", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBProxyEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBProxyEndpointRequest(input, context)), { Action: "ModifyDBProxyEndpoint", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBProxyTargetGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBProxyTargetGroupRequest(input, context)), { Action: "ModifyDBProxyTargetGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBSnapshotMessage(input, context)), { Action: "ModifyDBSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBSnapshotAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBSnapshotAttributeMessage(input, context)), { Action: "ModifyDBSnapshotAttribute", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyDBSubnetGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyDBSubnetGroupMessage(input, context)), { Action: "ModifyDBSubnetGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyEventSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyEventSubscriptionMessage(input, context)), { Action: "ModifyEventSubscription", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyGlobalClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyGlobalClusterMessage(input, context)), { Action: "ModifyGlobalCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryModifyOptionGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryModifyOptionGroupMessage(input, context)), { Action: "ModifyOptionGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryPromoteReadReplicaCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryPromoteReadReplicaMessage(input, context)), { Action: "PromoteReadReplica", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryPromoteReadReplicaDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryPromoteReadReplicaDBClusterMessage(input, context)), { Action: "PromoteReadReplicaDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryPurchaseReservedDBInstancesOfferingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryPurchaseReservedDBInstancesOfferingMessage(input, context)), { Action: "PurchaseReservedDBInstancesOffering", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRebootDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRebootDBClusterMessage(input, context)), { Action: "RebootDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRebootDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRebootDBInstanceMessage(input, context)), { Action: "RebootDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRegisterDBProxyTargetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRegisterDBProxyTargetsRequest(input, context)), { Action: "RegisterDBProxyTargets", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRemoveFromGlobalClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRemoveFromGlobalClusterMessage(input, context)), { Action: "RemoveFromGlobalCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRemoveRoleFromDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRemoveRoleFromDBClusterMessage(input, context)), { Action: "RemoveRoleFromDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRemoveRoleFromDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRemoveRoleFromDBInstanceMessage(input, context)), { Action: "RemoveRoleFromDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage(input, context)), { Action: "RemoveSourceIdentifierFromSubscription", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRemoveTagsFromResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRemoveTagsFromResourceMessage(input, context)), { Action: "RemoveTagsFromResource", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryResetDBClusterParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryResetDBClusterParameterGroupMessage(input, context)), { Action: "ResetDBClusterParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryResetDBParameterGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryResetDBParameterGroupMessage(input, context)), { Action: "ResetDBParameterGroup", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBClusterFromS3Command = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBClusterFromS3Message(input, context)), { Action: "RestoreDBClusterFromS3", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBClusterFromSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBClusterFromSnapshotMessage(input, context)), { Action: "RestoreDBClusterFromSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBClusterToPointInTimeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBClusterToPointInTimeMessage(input, context)), { Action: "RestoreDBClusterToPointInTime", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage(input, context)), { Action: "RestoreDBInstanceFromDBSnapshot", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBInstanceFromS3Command = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBInstanceFromS3Message(input, context)), { Action: "RestoreDBInstanceFromS3", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRestoreDBInstanceToPointInTimeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRestoreDBInstanceToPointInTimeMessage(input, context)), { Action: "RestoreDBInstanceToPointInTime", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryRevokeDBSecurityGroupIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryRevokeDBSecurityGroupIngressMessage(input, context)), { Action: "RevokeDBSecurityGroupIngress", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStartActivityStreamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStartActivityStreamRequest(input, context)), { Action: "StartActivityStream", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStartDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStartDBClusterMessage(input, context)), { Action: "StartDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStartDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStartDBInstanceMessage(input, context)), { Action: "StartDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage(input, context)), { Action: "StartDBInstanceAutomatedBackupsReplication", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStartExportTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStartExportTaskMessage(input, context)), { Action: "StartExportTask", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStopActivityStreamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStopActivityStreamRequest(input, context)), { Action: "StopActivityStream", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStopDBClusterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStopDBClusterMessage(input, context)), { Action: "StopDBCluster", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStopDBInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStopDBInstanceMessage(input, context)), { Action: "StopDBInstance", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage(input, context)), { Action: "StopDBInstanceAutomatedBackupsReplication", Version: "2014-10-31" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_queryAddRoleToDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryAddRoleToDBClusterCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryAddRoleToDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBClusterRoleAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterRoleAlreadyExistsFault": return [3, 4];
                    case "DBClusterRoleQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterRoleQuotaExceededFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryAddRoleToDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryAddRoleToDBInstanceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryAddRoleToDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "DBInstanceRoleAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceRoleAlreadyExistsFault": return [3, 4];
                    case "DBInstanceRoleQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBInstanceRoleQuotaExceededFault": return [3, 6];
                    case "InvalidDBInstanceStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryAddSourceIdentifierToSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryAddSourceIdentifierToSubscriptionResult(data.AddSourceIdentifierToSubscriptionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "SourceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#SourceNotFoundFault": return [3, 2];
                    case "SubscriptionNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#SubscriptionNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryAddTagsToResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryAddTagsToResourceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryAddTagsToResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBProxyNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 6];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "DBSnapshotNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryApplyPendingMaintenanceActionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryApplyPendingMaintenanceActionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryApplyPendingMaintenanceActionResult(data.ApplyPendingMaintenanceActionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryApplyPendingMaintenanceActionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidDBClusterStateFault": return [3, 2];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 2];
                    case "InvalidDBInstanceStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 4];
                    case "ResourceNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#ResourceNotFoundFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryAuthorizeDBSecurityGroupIngressResult(data.AuthorizeDBSecurityGroupIngressResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationAlreadyExistsFault": return [3, 2];
                    case "AuthorizationQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#AuthorizationQuotaExceededFault": return [3, 4];
                    case "DBSecurityGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 6];
                    case "InvalidDBSecurityGroupStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryAuthorizationQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryBacktrackDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryBacktrackDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterBacktrack(data.BacktrackDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryBacktrackDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCancelExportTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCancelExportTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryExportTask(data.CancelExportTaskResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCancelExportTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ExportTaskNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#ExportTaskNotFoundFault": return [3, 2];
                    case "InvalidExportTaskStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidExportTaskStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidExportTaskStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCopyDBClusterParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCopyDBClusterParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCopyDBClusterParameterGroupResult(data.CopyDBClusterParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCopyDBClusterParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "DBParameterGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 4];
                    case "DBParameterGroupQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCopyDBClusterSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCopyDBClusterSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCopyDBClusterSnapshotResult(data.CopyDBClusterSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCopyDBClusterSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault": return [3, 2];
                    case "DBClusterSnapshotNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 4];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                    case "KMSKeyNotAccessibleFault": return [3, 10];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 10];
                    case "SnapshotQuotaExceededFault": return [3, 12];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCopyDBParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCopyDBParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCopyDBParameterGroupResult(data.CopyDBParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCopyDBParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "DBParameterGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 4];
                    case "DBParameterGroupQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCopyDBSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCopyDBSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCopyDBSnapshotResult(data.CopyDBSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCopyDBSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "DBSnapshotNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 6];
                    case "InvalidDBSnapshotStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 8];
                    case "KMSKeyNotAccessibleFault": return [3, 10];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 10];
                    case "SnapshotQuotaExceededFault": return [3, 12];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCopyOptionGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCopyOptionGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCopyOptionGroupResult(data.CopyOptionGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCopyOptionGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "OptionGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#OptionGroupAlreadyExistsFault": return [3, 2];
                    case "OptionGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 4];
                    case "OptionGroupQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#OptionGroupQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateCustomAvailabilityZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateCustomAvailabilityZoneCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateCustomAvailabilityZoneResult(data.CreateCustomAvailabilityZoneResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateCustomAvailabilityZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomAvailabilityZoneAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#CustomAvailabilityZoneAlreadyExistsFault": return [3, 2];
                    case "CustomAvailabilityZoneQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#CustomAvailabilityZoneQuotaExceededFault": return [3, 4];
                    case "KMSKeyNotAccessibleFault": return [3, 6];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateCustomDBEngineVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateCustomDBEngineVersionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBEngineVersion(data.CreateCustomDBEngineVersionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateCustomDBEngineVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomDBEngineVersionAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#CustomDBEngineVersionAlreadyExistsFault": return [3, 2];
                    case "CustomDBEngineVersionQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#CustomDBEngineVersionQuotaExceededFault": return [3, 4];
                    case "KMSKeyNotAccessibleFault": return [3, 6];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBClusterResult(data.CreateDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, parsedBody, message;
    var _w;
    return __generator(this, function (_x) {
        switch (_x.label) {
            case 0:
                _a = [__assign({}, output)];
                _w = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_w.body = _x.sent(), _w)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterAlreadyExistsFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                    case "DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "DBClusterQuotaExceededFault": return [3, 8];
                    case "com.amazonaws.rds#DBClusterQuotaExceededFault": return [3, 8];
                    case "DBInstanceNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 10];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 12];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 12];
                    case "DBSubnetGroupNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 14];
                    case "DomainNotFoundFault": return [3, 16];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 16];
                    case "GlobalClusterNotFoundFault": return [3, 18];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 18];
                    case "InsufficientStorageClusterCapacityFault": return [3, 20];
                    case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault": return [3, 20];
                    case "InvalidDBClusterStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 22];
                    case "InvalidDBInstanceStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 24];
                    case "InvalidDBSubnetGroupStateFault": return [3, 26];
                    case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault": return [3, 26];
                    case "InvalidGlobalClusterStateFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidGlobalClusterStateFault": return [3, 28];
                    case "InvalidSubnet": return [3, 30];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 30];
                    case "InvalidVPCNetworkStateFault": return [3, 32];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 32];
                    case "KMSKeyNotAccessibleFault": return [3, 34];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 34];
                    case "StorageQuotaExceededFault": return [3, 36];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 36];
                }
                return [3, 38];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 38:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _x.label = 39;
            case 39:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBClusterEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBClusterEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterEndpoint(data.CreateDBClusterEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBClusterEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterEndpointAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterEndpointAlreadyExistsFault": return [3, 2];
                    case "DBClusterEndpointQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterEndpointQuotaExceededFault": return [3, 4];
                    case "DBClusterNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 6];
                    case "DBInstanceNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 8];
                    case "InvalidDBClusterStateFault": return [3, 10];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 10];
                    case "InvalidDBInstanceStateFault": return [3, 12];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBClusterParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBClusterParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBClusterParameterGroupResult(data.CreateDBClusterParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBClusterParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "DBParameterGroupQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBClusterSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBClusterSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBClusterSnapshotResult(data.CreateDBClusterSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBClusterSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBClusterSnapshotAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault": return [3, 4];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                    case "SnapshotQuotaExceededFault": return [3, 10];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBInstanceResult(data.CreateDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function (_y) {
        switch (_y.label) {
            case 0:
                _a = [__assign({}, output)];
                _x = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "BackupPolicyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#BackupPolicyNotFoundFault": return [3, 4];
                    case "DBClusterNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 6];
                    case "DBInstanceAlreadyExistsFault": return [3, 8];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 8];
                    case "DBParameterGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 10];
                    case "DBSecurityGroupNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 12];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 14];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 14];
                    case "DBSubnetGroupNotFoundFault": return [3, 16];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 16];
                    case "DomainNotFoundFault": return [3, 18];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 18];
                    case "InstanceQuotaExceededFault": return [3, 20];
                    case "com.amazonaws.rds#InstanceQuotaExceededFault": return [3, 20];
                    case "InsufficientDBInstanceCapacityFault": return [3, 22];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 22];
                    case "InvalidDBClusterStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 24];
                    case "InvalidSubnet": return [3, 26];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 26];
                    case "InvalidVPCNetworkStateFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 28];
                    case "KMSKeyNotAccessibleFault": return [3, 30];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 30];
                    case "OptionGroupNotFoundFault": return [3, 32];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 32];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "StorageQuotaExceededFault": return [3, 36];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 36];
                    case "StorageTypeNotSupportedFault": return [3, 38];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 38];
                }
                return [3, 40];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 38:
                _w = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 40:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _y.label = 41;
            case 41:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBInstanceReadReplicaCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBInstanceReadReplicaCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBInstanceReadReplicaResult(data.CreateDBInstanceReadReplicaResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBInstanceReadReplicaCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function (_y) {
        switch (_y.label) {
            case 0:
                _a = [__assign({}, output)];
                _x = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBParameterGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 6];
                    case "DBSecurityGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 8];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 10];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 10];
                    case "DBSubnetGroupNotAllowedFault": return [3, 12];
                    case "com.amazonaws.rds#DBSubnetGroupNotAllowedFault": return [3, 12];
                    case "DBSubnetGroupNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 14];
                    case "DomainNotFoundFault": return [3, 16];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 16];
                    case "InstanceQuotaExceededFault": return [3, 18];
                    case "com.amazonaws.rds#InstanceQuotaExceededFault": return [3, 18];
                    case "InsufficientDBInstanceCapacityFault": return [3, 20];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 20];
                    case "InvalidDBInstanceStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 22];
                    case "InvalidDBSubnetGroupFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBSubnetGroupFault": return [3, 24];
                    case "InvalidSubnet": return [3, 26];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 26];
                    case "InvalidVPCNetworkStateFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 28];
                    case "KMSKeyNotAccessibleFault": return [3, 30];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 30];
                    case "OptionGroupNotFoundFault": return [3, 32];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 32];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "StorageQuotaExceededFault": return [3, 36];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 36];
                    case "StorageTypeNotSupportedFault": return [3, 38];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 38];
                }
                return [3, 40];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetGroupFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 38:
                _w = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 40:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _y.label = 41;
            case 41:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBParameterGroupResult(data.CreateDBParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault": return [3, 2];
                    case "DBParameterGroupQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBProxyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBProxyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBProxyResponse(data.CreateDBProxyResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBProxyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyAlreadyExistsFault": return [3, 2];
                    case "DBProxyQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyQuotaExceededFault": return [3, 4];
                    case "InvalidSubnet": return [3, 6];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBProxyEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBProxyEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBProxyEndpointResponse(data.CreateDBProxyEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBProxyEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyEndpointAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault": return [3, 2];
                    case "DBProxyEndpointQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyEndpointQuotaExceededFault": return [3, 4];
                    case "DBProxyNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 6];
                    case "InvalidDBProxyStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 8];
                    case "InvalidSubnet": return [3, 10];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBSecurityGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBSecurityGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBSecurityGroupResult(data.CreateDBSecurityGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBSecurityGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSecurityGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBSecurityGroupAlreadyExistsFault": return [3, 2];
                    case "DBSecurityGroupNotSupportedFault": return [3, 4];
                    case "com.amazonaws.rds#DBSecurityGroupNotSupportedFault": return [3, 4];
                    case "DBSecurityGroupQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBSecurityGroupQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBSnapshotResult(data.CreateDBSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                    case "SnapshotQuotaExceededFault": return [3, 8];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateDBSubnetGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateDBSubnetGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateDBSubnetGroupResult(data.CreateDBSubnetGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateDBSubnetGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSubnetGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBSubnetGroupAlreadyExistsFault": return [3, 2];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 4];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 4];
                    case "DBSubnetGroupQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBSubnetGroupQuotaExceededFault": return [3, 6];
                    case "DBSubnetQuotaExceededFault": return [3, 8];
                    case "com.amazonaws.rds#DBSubnetQuotaExceededFault": return [3, 8];
                    case "InvalidSubnet": return [3, 10];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateEventSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateEventSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateEventSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EventSubscriptionQuotaExceededFault": return [3, 2];
                    case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault": return [3, 2];
                    case "SNSInvalidTopicFault": return [3, 4];
                    case "com.amazonaws.rds#SNSInvalidTopicFault": return [3, 4];
                    case "SNSNoAuthorizationFault": return [3, 6];
                    case "com.amazonaws.rds#SNSNoAuthorizationFault": return [3, 6];
                    case "SNSTopicArnNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#SNSTopicArnNotFoundFault": return [3, 8];
                    case "SourceNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#SourceNotFoundFault": return [3, 10];
                    case "SubscriptionAlreadyExistFault": return [3, 12];
                    case "com.amazonaws.rds#SubscriptionAlreadyExistFault": return [3, 12];
                    case "SubscriptionCategoryNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault": return [3, 14];
                }
                return [3, 16];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 4:
                _d = [{}];
                return [4, deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 6:
                _e = [{}];
                return [4, deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 8:
                _f = [{}];
                return [4, deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 12:
                _h = [{}];
                return [4, deserializeAws_querySubscriptionAlreadyExistFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 14:
                _j = [{}];
                return [4, deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateGlobalClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateGlobalClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateGlobalClusterResult(data.CreateGlobalClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateGlobalClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "GlobalClusterAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#GlobalClusterAlreadyExistsFault": return [3, 4];
                    case "GlobalClusterQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#GlobalClusterQuotaExceededFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryGlobalClusterQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryCreateOptionGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryCreateOptionGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCreateOptionGroupResult(data.CreateOptionGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryCreateOptionGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "OptionGroupAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#OptionGroupAlreadyExistsFault": return [3, 2];
                    case "OptionGroupQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#OptionGroupQuotaExceededFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteCustomAvailabilityZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteCustomAvailabilityZoneCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteCustomAvailabilityZoneResult(data.DeleteCustomAvailabilityZoneResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteCustomAvailabilityZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "KMSKeyNotAccessibleFault": return [3, 4];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteCustomDBEngineVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteCustomDBEngineVersionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBEngineVersion(data.DeleteCustomDBEngineVersionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteCustomDBEngineVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomDBEngineVersionNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault": return [3, 2];
                    case "InvalidCustomDBEngineVersionStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBClusterResult(data.DeleteDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBClusterSnapshotAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault": return [3, 4];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                    case "SnapshotQuotaExceededFault": return [3, 10];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBClusterEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBClusterEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterEndpoint(data.DeleteDBClusterEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBClusterEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterEndpointNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterEndpointNotFoundFault": return [3, 2];
                    case "InvalidDBClusterEndpointStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBClusterParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBClusterParameterGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBClusterParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBClusterSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBClusterSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBClusterSnapshotResult(data.DeleteDBClusterSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBClusterSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBInstanceResult(data.DeleteDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceAutomatedBackupQuotaExceededFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBSnapshotAlreadyExistsFault": return [3, 6];
                    case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                    case "InvalidDBInstanceStateFault": return [3, 10];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 10];
                    case "SnapshotQuotaExceededFault": return [3, 12];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBInstanceAutomatedBackupResult(data.DeleteDBInstanceAutomatedBackupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceAutomatedBackupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault": return [3, 2];
                    case "InvalidDBInstanceAutomatedBackupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceAutomatedBackupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBParameterGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBProxyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBProxyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBProxyResponse(data.DeleteDBProxyResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBProxyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                    case "InvalidDBProxyStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBProxyEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBProxyEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBProxyEndpointResponse(data.DeleteDBProxyEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBProxyEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyEndpointNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyEndpointNotFoundFault": return [3, 2];
                    case "InvalidDBProxyEndpointStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBSecurityGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBSecurityGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBSecurityGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSecurityGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 2];
                    case "InvalidDBSecurityGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteDBSnapshotResult(data.DeleteDBSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 2];
                    case "InvalidDBSnapshotStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteDBSubnetGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteDBSubnetGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteDBSubnetGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSubnetGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 2];
                    case "InvalidDBSubnetGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault": return [3, 4];
                    case "InvalidDBSubnetStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBSubnetStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteEventSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteEventSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteEventSubscriptionResult(data.DeleteEventSubscriptionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteEventSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidEventSubscriptionStateFault": return [3, 2];
                    case "com.amazonaws.rds#InvalidEventSubscriptionStateFault": return [3, 2];
                    case "SubscriptionNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#SubscriptionNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInvalidEventSubscriptionStateFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteGlobalClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteGlobalClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeleteGlobalClusterResult(data.DeleteGlobalClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteGlobalClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "GlobalClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 2];
                    case "InvalidGlobalClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidGlobalClusterStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteInstallationMediaCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteInstallationMediaCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryInstallationMedia(data.DeleteInstallationMediaResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteInstallationMediaCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InstallationMediaNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#InstallationMediaNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInstallationMediaNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeleteOptionGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeleteOptionGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeleteOptionGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidOptionGroupStateFault": return [3, 2];
                    case "com.amazonaws.rds#InvalidOptionGroupStateFault": return [3, 2];
                    case "OptionGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDeregisterDBProxyTargetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDeregisterDBProxyTargetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDeregisterDBProxyTargetsResponse(data.DeregisterDBProxyTargetsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDeregisterDBProxyTargetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "DBProxyTargetNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyTargetNotFoundFault": return [3, 6];
                    case "InvalidDBProxyStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeAccountAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeAccountAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryAccountAttributesMessage(data.DescribeAccountAttributesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeAccountAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeCertificatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeCertificatesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCertificateMessage(data.DescribeCertificatesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeCertificatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CertificateNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CertificateNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeCustomAvailabilityZonesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeCustomAvailabilityZonesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryCustomAvailabilityZoneMessage(data.DescribeCustomAvailabilityZonesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeCustomAvailabilityZonesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterBacktracksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterBacktracksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterBacktrackMessage(data.DescribeDBClusterBacktracksResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterBacktracksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterBacktrackNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterBacktrackNotFoundFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterEndpointsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterEndpointMessage(data.DescribeDBClusterEndpointsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterParameterGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterParameterGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterParameterGroupsMessage(data.DescribeDBClusterParameterGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterParameterGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterParametersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterParametersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterParameterGroupDetails(data.DescribeDBClusterParametersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterParametersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClustersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClustersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterMessage(data.DescribeDBClustersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClustersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBClusterSnapshotAttributesResult(data.DescribeDBClusterSnapshotAttributesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBClusterSnapshotsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBClusterSnapshotsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterSnapshotMessage(data.DescribeDBClusterSnapshotsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBClusterSnapshotsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBEngineVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBEngineVersionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBEngineVersionMessage(data.DescribeDBEngineVersionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBEngineVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBInstanceAutomatedBackupMessage(data.DescribeDBInstanceAutomatedBackupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceAutomatedBackupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBInstanceMessage(data.DescribeDBInstancesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBLogFilesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBLogFilesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBLogFilesResponse(data.DescribeDBLogFilesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBLogFilesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBParameterGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBParameterGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBParameterGroupsMessage(data.DescribeDBParameterGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBParameterGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBParametersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBParametersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBParameterGroupDetails(data.DescribeDBParametersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBParametersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBProxiesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBProxiesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBProxiesResponse(data.DescribeDBProxiesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBProxiesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBProxyEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBProxyEndpointsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBProxyEndpointsResponse(data.DescribeDBProxyEndpointsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBProxyEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyEndpointNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyEndpointNotFoundFault": return [3, 2];
                    case "DBProxyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBProxyTargetGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBProxyTargetGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBProxyTargetGroupsResponse(data.DescribeDBProxyTargetGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBProxyTargetGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "InvalidDBProxyStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBProxyTargetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBProxyTargetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBProxyTargetsResponse(data.DescribeDBProxyTargetsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBProxyTargetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "DBProxyTargetNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyTargetNotFoundFault": return [3, 6];
                    case "InvalidDBProxyStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBSecurityGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBSecurityGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBSecurityGroupMessage(data.DescribeDBSecurityGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBSecurityGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSecurityGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBSnapshotAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBSnapshotAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeDBSnapshotAttributesResult(data.DescribeDBSnapshotAttributesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBSnapshotAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBSnapshotsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBSnapshotsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBSnapshotMessage(data.DescribeDBSnapshotsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBSnapshotsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeDBSubnetGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeDBSubnetGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBSubnetGroupMessage(data.DescribeDBSubnetGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeDBSubnetGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSubnetGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeEngineDefaultClusterParametersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeEngineDefaultClusterParametersResult(data.DescribeEngineDefaultClusterParametersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeEngineDefaultParametersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeEngineDefaultParametersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeEngineDefaultParametersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeEventCategoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeEventCategoriesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryEventCategoriesMessage(data.DescribeEventCategoriesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeEventCategoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeEventsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeEventsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryEventsMessage(data.DescribeEventsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeEventsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeEventSubscriptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeEventSubscriptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryEventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeEventSubscriptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "SubscriptionNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#SubscriptionNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeExportTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeExportTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryExportTasksMessage(data.DescribeExportTasksResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeExportTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ExportTaskNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#ExportTaskNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeGlobalClustersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeGlobalClustersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryGlobalClustersMessage(data.DescribeGlobalClustersResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeGlobalClustersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "GlobalClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeInstallationMediaCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeInstallationMediaCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryInstallationMediaMessage(data.DescribeInstallationMediaResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeInstallationMediaCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InstallationMediaNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#InstallationMediaNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInstallationMediaNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeOptionGroupOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeOptionGroupOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryOptionGroupOptionsMessage(data.DescribeOptionGroupOptionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeOptionGroupOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeOptionGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeOptionGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryOptionGroups(data.DescribeOptionGroupsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeOptionGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "OptionGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryOrderableDBInstanceOptionsMessage(data.DescribeOrderableDBInstanceOptionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribePendingMaintenanceActionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribePendingMaintenanceActionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryPendingMaintenanceActionsMessage(data.DescribePendingMaintenanceActionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribePendingMaintenanceActionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ResourceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#ResourceNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeReservedDBInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeReservedDBInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryReservedDBInstanceMessage(data.DescribeReservedDBInstancesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeReservedDBInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ReservedDBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#ReservedDBInstanceNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryReservedDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryReservedDBInstancesOfferingMessage(data.DescribeReservedDBInstancesOfferingsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ReservedDBInstancesOfferingNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeSourceRegionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeSourceRegionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_querySourceRegionMessage(data.DescribeSourceRegionsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeSourceRegionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody, message;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                        response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                }
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDescribeValidDBInstanceModificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDescribeValidDBInstanceModificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDescribeValidDBInstanceModificationsResult(data.DescribeValidDBInstanceModificationsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDescribeValidDBInstanceModificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "InvalidDBInstanceStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryDownloadDBLogFilePortionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryDownloadDBLogFilePortionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDownloadDBLogFilePortionDetails(data.DownloadDBLogFilePortionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryDownloadDBLogFilePortionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "DBLogFileNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBLogFileNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBLogFileNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryFailoverDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryFailoverDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryFailoverDBClusterResult(data.FailoverDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryFailoverDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryFailoverGlobalClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryFailoverGlobalClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryFailoverGlobalClusterResult(data.FailoverGlobalClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryFailoverGlobalClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "GlobalClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                    case "InvalidGlobalClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidGlobalClusterStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryImportInstallationMediaCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryImportInstallationMediaCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryInstallationMedia(data.ImportInstallationMediaResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryImportInstallationMediaCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault": return [3, 2];
                    case "InstallationMediaAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#InstallationMediaAlreadyExistsFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInstallationMediaAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryListTagsForResourceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryTagListMessage(data.ListTagsForResourceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBProxyNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 6];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "DBSnapshotNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyCertificatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyCertificatesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyCertificatesResult(data.ModifyCertificatesResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyCertificatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CertificateNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CertificateNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyCurrentDBClusterCapacityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyCurrentDBClusterCapacityCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterCapacityInfo(data.ModifyCurrentDBClusterCapacityResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyCurrentDBClusterCapacityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterCapacityFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterCapacityFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterCapacityFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyCustomDBEngineVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyCustomDBEngineVersionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBEngineVersion(data.ModifyCustomDBEngineVersionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyCustomDBEngineVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CustomDBEngineVersionNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault": return [3, 2];
                    case "InvalidCustomDBEngineVersionStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBClusterResult(data.ModifyDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
    var _q;
    return __generator(this, function (_r) {
        switch (_r.label) {
            case 0:
                _a = [__assign({}, output)];
                _q = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterAlreadyExistsFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                    case "DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "DBSubnetGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 8];
                    case "DomainNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 10];
                    case "InvalidDBClusterStateFault": return [3, 12];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 12];
                    case "InvalidDBInstanceStateFault": return [3, 14];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 14];
                    case "InvalidDBSecurityGroupStateFault": return [3, 16];
                    case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault": return [3, 16];
                    case "InvalidDBSubnetGroupStateFault": return [3, 18];
                    case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault": return [3, 18];
                    case "InvalidSubnet": return [3, 20];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 20];
                    case "InvalidVPCNetworkStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 22];
                    case "StorageQuotaExceededFault": return [3, 24];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 24];
                }
                return [3, 26];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 27];
            case 26:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _r.label = 27;
            case 27:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBClusterEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBClusterEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterEndpoint(data.ModifyDBClusterEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBClusterEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterEndpointNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterEndpointNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "InvalidDBClusterEndpointStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault": return [3, 6];
                    case "InvalidDBClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 8];
                    case "InvalidDBInstanceStateFault": return [3, 10];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBClusterParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBClusterParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ModifyDBClusterParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBClusterParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBClusterSnapshotAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBClusterSnapshotAttributeResult(data.ModifyDBClusterSnapshotAttributeResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 4];
                    case "SharedSnapshotQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBInstanceResult(data.ModifyDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function (_y) {
        switch (_y.label) {
            case 0:
                _a = [__assign({}, output)];
                _x = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "BackupPolicyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#BackupPolicyNotFoundFault": return [3, 4];
                    case "CertificateNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#CertificateNotFoundFault": return [3, 6];
                    case "DBInstanceAlreadyExistsFault": return [3, 8];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 8];
                    case "DBInstanceNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 10];
                    case "DBParameterGroupNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 12];
                    case "DBSecurityGroupNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 14];
                    case "DBUpgradeDependencyFailureFault": return [3, 16];
                    case "com.amazonaws.rds#DBUpgradeDependencyFailureFault": return [3, 16];
                    case "DomainNotFoundFault": return [3, 18];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 18];
                    case "InsufficientDBInstanceCapacityFault": return [3, 20];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 20];
                    case "InvalidDBClusterStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 22];
                    case "InvalidDBInstanceStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 24];
                    case "InvalidDBSecurityGroupStateFault": return [3, 26];
                    case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault": return [3, 26];
                    case "InvalidVPCNetworkStateFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 28];
                    case "KMSKeyNotAccessibleFault": return [3, 30];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 30];
                    case "OptionGroupNotFoundFault": return [3, 32];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 32];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 34];
                    case "StorageQuotaExceededFault": return [3, 36];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 36];
                    case "StorageTypeNotSupportedFault": return [3, 38];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 38];
                }
                return [3, 40];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDBUpgradeDependencyFailureFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 38:
                _w = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 41];
            case 40:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _y.label = 41;
            case 41:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBParameterGroupNameMessage(data.ModifyDBParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBProxyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBProxyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBProxyResponse(data.ModifyDBProxyResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBProxyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyAlreadyExistsFault": return [3, 2];
                    case "DBProxyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 4];
                    case "InvalidDBProxyStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBProxyEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBProxyEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBProxyEndpointResponse(data.ModifyDBProxyEndpointResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBProxyEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyEndpointAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault": return [3, 2];
                    case "DBProxyEndpointNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyEndpointNotFoundFault": return [3, 4];
                    case "InvalidDBProxyEndpointStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault": return [3, 6];
                    case "InvalidDBProxyStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBProxyTargetGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBProxyTargetGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBProxyTargetGroupResponse(data.ModifyDBProxyTargetGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBProxyTargetGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBProxyNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 2];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 4];
                    case "InvalidDBProxyStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBSnapshotResult(data.ModifyDBSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = [__assign({}, output)];
                _d = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 2];
                }
                return [3, 4];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 5];
            case 4:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _e.label = 5;
            case 5:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBSnapshotAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBSnapshotAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBSnapshotAttributeResult(data.ModifyDBSnapshotAttributeResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBSnapshotAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 2];
                    case "InvalidDBSnapshotStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 4];
                    case "SharedSnapshotQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyDBSubnetGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyDBSubnetGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyDBSubnetGroupResult(data.ModifyDBSubnetGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyDBSubnetGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 2];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 2];
                    case "DBSubnetGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 4];
                    case "DBSubnetQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBSubnetQuotaExceededFault": return [3, 6];
                    case "InvalidSubnet": return [3, 8];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 8];
                    case "SubnetAlreadyInUse": return [3, 10];
                    case "com.amazonaws.rds#SubnetAlreadyInUse": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySubnetAlreadyInUseResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyEventSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyEventSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyEventSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EventSubscriptionQuotaExceededFault": return [3, 2];
                    case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault": return [3, 2];
                    case "SNSInvalidTopicFault": return [3, 4];
                    case "com.amazonaws.rds#SNSInvalidTopicFault": return [3, 4];
                    case "SNSNoAuthorizationFault": return [3, 6];
                    case "com.amazonaws.rds#SNSNoAuthorizationFault": return [3, 6];
                    case "SNSTopicArnNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#SNSTopicArnNotFoundFault": return [3, 8];
                    case "SubscriptionCategoryNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault": return [3, 10];
                    case "SubscriptionNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#SubscriptionNotFoundFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyGlobalClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyGlobalClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyGlobalClusterResult(data.ModifyGlobalClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyGlobalClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "GlobalClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                    case "InvalidGlobalClusterStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidGlobalClusterStateFault": return [3, 8];
                }
                return [3, 10];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryModifyOptionGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryModifyOptionGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryModifyOptionGroupResult(data.ModifyOptionGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryModifyOptionGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidOptionGroupStateFault": return [3, 2];
                    case "com.amazonaws.rds#InvalidOptionGroupStateFault": return [3, 2];
                    case "OptionGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryPromoteReadReplicaCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryPromoteReadReplicaCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryPromoteReadReplicaResult(data.PromoteReadReplicaResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryPromoteReadReplicaCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "InvalidDBInstanceStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryPromoteReadReplicaDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryPromoteReadReplicaDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryPromoteReadReplicaDBClusterResult(data.PromoteReadReplicaDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryPromoteReadReplicaDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryPurchaseReservedDBInstancesOfferingResult(data.PurchaseReservedDBInstancesOfferingResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ReservedDBInstanceAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#ReservedDBInstanceAlreadyExistsFault": return [3, 2];
                    case "ReservedDBInstanceQuotaExceededFault": return [3, 4];
                    case "com.amazonaws.rds#ReservedDBInstanceQuotaExceededFault": return [3, 4];
                    case "ReservedDBInstancesOfferingNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRebootDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRebootDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRebootDBClusterResult(data.RebootDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRebootDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRebootDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRebootDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRebootDBInstanceResult(data.RebootDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRebootDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "InvalidDBInstanceStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRegisterDBProxyTargetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRegisterDBProxyTargetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRegisterDBProxyTargetsResponse(data.RegisterDBProxyTargetsResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRegisterDBProxyTargetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBProxyNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 6];
                    case "DBProxyTargetAlreadyRegisteredFault": return [3, 8];
                    case "com.amazonaws.rds#DBProxyTargetAlreadyRegisteredFault": return [3, 8];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 10];
                    case "InsufficientAvailableIPsInSubnetFault": return [3, 12];
                    case "com.amazonaws.rds#InsufficientAvailableIPsInSubnetFault": return [3, 12];
                    case "InvalidDBClusterStateFault": return [3, 14];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 14];
                    case "InvalidDBInstanceStateFault": return [3, 16];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 16];
                    case "InvalidDBProxyStateFault": return [3, 18];
                    case "com.amazonaws.rds#InvalidDBProxyStateFault": return [3, 18];
                }
                return [3, 20];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRemoveFromGlobalClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRemoveFromGlobalClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRemoveFromGlobalClusterResult(data.RemoveFromGlobalClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRemoveFromGlobalClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "GlobalClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#GlobalClusterNotFoundFault": return [3, 4];
                    case "InvalidGlobalClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidGlobalClusterStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRemoveRoleFromDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRemoveRoleFromDBClusterCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRemoveRoleFromDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBClusterRoleNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterRoleNotFoundFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterRoleNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRemoveRoleFromDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRemoveRoleFromDBInstanceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRemoveRoleFromDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "DBInstanceRoleNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceRoleNotFoundFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceRoleNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult(data.RemoveSourceIdentifierFromSubscriptionResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "SourceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#SourceNotFoundFault": return [3, 2];
                    case "SubscriptionNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#SubscriptionNotFoundFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRemoveTagsFromResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRemoveTagsFromResourceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRemoveTagsFromResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "DBProxyNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBProxyNotFoundFault": return [3, 6];
                    case "DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault": return [3, 8];
                    case "DBSnapshotNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryResetDBClusterParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryResetDBClusterParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ResetDBClusterParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryResetDBClusterParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryResetDBParameterGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryResetDBParameterGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryDBParameterGroupNameMessage(data.ResetDBParameterGroupResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryResetDBParameterGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBParameterGroupNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 2];
                    case "InvalidDBParameterGroupStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBParameterGroupStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBClusterFromS3Command = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBClusterFromS3CommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBClusterFromS3Result(data.RestoreDBClusterFromS3Result, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBClusterFromS3CommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, parsedBody, message;
    var _s;
    return __generator(this, function (_t) {
        switch (_t.label) {
            case 0:
                _a = [__assign({}, output)];
                _s = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_s.body = _t.sent(), _s)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterAlreadyExistsFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                    case "DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "DBClusterQuotaExceededFault": return [3, 8];
                    case "com.amazonaws.rds#DBClusterQuotaExceededFault": return [3, 8];
                    case "DBSubnetGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 10];
                    case "DomainNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 12];
                    case "InsufficientStorageClusterCapacityFault": return [3, 14];
                    case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault": return [3, 14];
                    case "InvalidDBClusterStateFault": return [3, 16];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 16];
                    case "InvalidDBSubnetGroupStateFault": return [3, 18];
                    case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault": return [3, 18];
                    case "InvalidS3BucketFault": return [3, 20];
                    case "com.amazonaws.rds#InvalidS3BucketFault": return [3, 20];
                    case "InvalidSubnet": return [3, 22];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 22];
                    case "InvalidVPCNetworkStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 24];
                    case "KMSKeyNotAccessibleFault": return [3, 26];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 26];
                    case "StorageQuotaExceededFault": return [3, 28];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 28];
                }
                return [3, 30];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 31];
            case 30:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _t.label = 31;
            case 31:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBClusterFromSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBClusterFromSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBClusterFromSnapshotResult(data.RestoreDBClusterFromSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBClusterFromSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, parsedBody, message;
    var _v;
    return __generator(this, function (_w) {
        switch (_w.label) {
            case 0:
                _a = [__assign({}, output)];
                _v = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_v.body = _w.sent(), _v)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterAlreadyExistsFault": return [3, 2];
                    case "DBClusterParameterGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault": return [3, 4];
                    case "DBClusterQuotaExceededFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterQuotaExceededFault": return [3, 6];
                    case "DBClusterSnapshotNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 8];
                    case "DBSnapshotNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 10];
                    case "DBSubnetGroupNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 12];
                    case "DomainNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 14];
                    case "InsufficientDBClusterCapacityFault": return [3, 16];
                    case "com.amazonaws.rds#InsufficientDBClusterCapacityFault": return [3, 16];
                    case "InsufficientStorageClusterCapacityFault": return [3, 18];
                    case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault": return [3, 18];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 20];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 20];
                    case "InvalidDBSnapshotStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 22];
                    case "InvalidRestoreFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidRestoreFault": return [3, 24];
                    case "InvalidSubnet": return [3, 26];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 26];
                    case "InvalidVPCNetworkStateFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 28];
                    case "KMSKeyNotAccessibleFault": return [3, 30];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 30];
                    case "OptionGroupNotFoundFault": return [3, 32];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 32];
                    case "StorageQuotaExceededFault": return [3, 34];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 34];
                }
                return [3, 36];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 36:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _w.label = 37;
            case 37:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBClusterToPointInTimeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBClusterToPointInTimeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBClusterToPointInTimeResult(data.RestoreDBClusterToPointInTimeResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBClusterToPointInTimeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, parsedBody, message;
    var _w;
    return __generator(this, function (_x) {
        switch (_x.label) {
            case 0:
                _a = [__assign({}, output)];
                _w = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_w.body = _x.sent(), _w)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterAlreadyExistsFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterAlreadyExistsFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                    case "DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault": return [3, 6];
                    case "DBClusterQuotaExceededFault": return [3, 8];
                    case "com.amazonaws.rds#DBClusterQuotaExceededFault": return [3, 8];
                    case "DBClusterSnapshotNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 10];
                    case "DBSubnetGroupNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 12];
                    case "DomainNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 14];
                    case "InsufficientDBClusterCapacityFault": return [3, 16];
                    case "com.amazonaws.rds#InsufficientDBClusterCapacityFault": return [3, 16];
                    case "InsufficientStorageClusterCapacityFault": return [3, 18];
                    case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault": return [3, 18];
                    case "InvalidDBClusterSnapshotStateFault": return [3, 20];
                    case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault": return [3, 20];
                    case "InvalidDBClusterStateFault": return [3, 22];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 22];
                    case "InvalidDBSnapshotStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 24];
                    case "InvalidRestoreFault": return [3, 26];
                    case "com.amazonaws.rds#InvalidRestoreFault": return [3, 26];
                    case "InvalidSubnet": return [3, 28];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 28];
                    case "InvalidVPCNetworkStateFault": return [3, 30];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 30];
                    case "KMSKeyNotAccessibleFault": return [3, 32];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 32];
                    case "OptionGroupNotFoundFault": return [3, 34];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 34];
                    case "StorageQuotaExceededFault": return [3, 36];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 36];
                }
                return [3, 38];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_x.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 39];
            case 38:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _x.label = 39;
            case 39:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult(data.RestoreDBInstanceFromDBSnapshotResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, parsedBody, message;
    var _y;
    return __generator(this, function (_z) {
        switch (_z.label) {
            case 0:
                _a = [__assign({}, output)];
                _y = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_y.body = _z.sent(), _y)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "BackupPolicyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#BackupPolicyNotFoundFault": return [3, 4];
                    case "DBInstanceAlreadyExistsFault": return [3, 6];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 6];
                    case "DBParameterGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 8];
                    case "DBSecurityGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 10];
                    case "DBSnapshotNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 12];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 14];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 14];
                    case "DBSubnetGroupNotFoundFault": return [3, 16];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 16];
                    case "DomainNotFoundFault": return [3, 18];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 18];
                    case "InstanceQuotaExceededFault": return [3, 20];
                    case "com.amazonaws.rds#InstanceQuotaExceededFault": return [3, 20];
                    case "InsufficientDBInstanceCapacityFault": return [3, 22];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 22];
                    case "InvalidDBSnapshotStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidDBSnapshotStateFault": return [3, 24];
                    case "InvalidRestoreFault": return [3, 26];
                    case "com.amazonaws.rds#InvalidRestoreFault": return [3, 26];
                    case "InvalidSubnet": return [3, 28];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 28];
                    case "InvalidVPCNetworkStateFault": return [3, 30];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 30];
                    case "KMSKeyNotAccessibleFault": return [3, 32];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 32];
                    case "OptionGroupNotFoundFault": return [3, 34];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 34];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 36];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 36];
                    case "StorageQuotaExceededFault": return [3, 38];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 38];
                    case "StorageTypeNotSupportedFault": return [3, 40];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 40];
                }
                return [3, 42];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 38:
                _w = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 40:
                _x = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_z.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 43];
            case 42:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _z.label = 43;
            case 43:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBInstanceFromS3Command = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBInstanceFromS3CommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBInstanceFromS3Result(data.RestoreDBInstanceFromS3Result, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBInstanceFromS3CommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, parsedBody, message;
    var _v;
    return __generator(this, function (_w) {
        switch (_w.label) {
            case 0:
                _a = [__assign({}, output)];
                _v = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_v.body = _w.sent(), _v)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "BackupPolicyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#BackupPolicyNotFoundFault": return [3, 4];
                    case "DBInstanceAlreadyExistsFault": return [3, 6];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 6];
                    case "DBParameterGroupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 8];
                    case "DBSecurityGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 10];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 12];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 12];
                    case "DBSubnetGroupNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 14];
                    case "InstanceQuotaExceededFault": return [3, 16];
                    case "com.amazonaws.rds#InstanceQuotaExceededFault": return [3, 16];
                    case "InsufficientDBInstanceCapacityFault": return [3, 18];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 18];
                    case "InvalidS3BucketFault": return [3, 20];
                    case "com.amazonaws.rds#InvalidS3BucketFault": return [3, 20];
                    case "InvalidSubnet": return [3, 22];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 22];
                    case "InvalidVPCNetworkStateFault": return [3, 24];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 24];
                    case "KMSKeyNotAccessibleFault": return [3, 26];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 26];
                    case "OptionGroupNotFoundFault": return [3, 28];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 28];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 30];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 30];
                    case "StorageQuotaExceededFault": return [3, 32];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 32];
                    case "StorageTypeNotSupportedFault": return [3, 34];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 34];
                }
                return [3, 36];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 37];
            case 36:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _w.label = 37;
            case 37:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRestoreDBInstanceToPointInTimeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRestoreDBInstanceToPointInTimeResult(data.RestoreDBInstanceToPointInTimeResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, parsedBody, message;
    var _0;
    return __generator(this, function (_1) {
        switch (_1.label) {
            case 0:
                _a = [__assign({}, output)];
                _0 = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_0.body = _1.sent(), _0)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "BackupPolicyNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#BackupPolicyNotFoundFault": return [3, 4];
                    case "DBInstanceAlreadyExistsFault": return [3, 6];
                    case "com.amazonaws.rds#DBInstanceAlreadyExistsFault": return [3, 6];
                    case "DBInstanceAutomatedBackupNotFoundFault": return [3, 8];
                    case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault": return [3, 8];
                    case "DBInstanceNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 10];
                    case "DBParameterGroupNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#DBParameterGroupNotFoundFault": return [3, 12];
                    case "DBSecurityGroupNotFoundFault": return [3, 14];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 14];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 16];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 16];
                    case "DBSubnetGroupNotFoundFault": return [3, 18];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 18];
                    case "DomainNotFoundFault": return [3, 20];
                    case "com.amazonaws.rds#DomainNotFoundFault": return [3, 20];
                    case "InstanceQuotaExceededFault": return [3, 22];
                    case "com.amazonaws.rds#InstanceQuotaExceededFault": return [3, 22];
                    case "InsufficientDBInstanceCapacityFault": return [3, 24];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 24];
                    case "InvalidDBInstanceStateFault": return [3, 26];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 26];
                    case "InvalidRestoreFault": return [3, 28];
                    case "com.amazonaws.rds#InvalidRestoreFault": return [3, 28];
                    case "InvalidSubnet": return [3, 30];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 30];
                    case "InvalidVPCNetworkStateFault": return [3, 32];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 32];
                    case "KMSKeyNotAccessibleFault": return [3, 34];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 34];
                    case "OptionGroupNotFoundFault": return [3, 36];
                    case "com.amazonaws.rds#OptionGroupNotFoundFault": return [3, 36];
                    case "PointInTimeRestoreNotEnabledFault": return [3, 38];
                    case "com.amazonaws.rds#PointInTimeRestoreNotEnabledFault": return [3, 38];
                    case "ProvisionedIopsNotAvailableInAZFault": return [3, 40];
                    case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault": return [3, 40];
                    case "StorageQuotaExceededFault": return [3, 42];
                    case "com.amazonaws.rds#StorageQuotaExceededFault": return [3, 42];
                    case "StorageTypeNotSupportedFault": return [3, 44];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 44];
                }
                return [3, 46];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 24:
                _p = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 26:
                _q = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 28:
                _r = [{}];
                return [4, deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 30:
                _s = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 32:
                _t = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 34:
                _u = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 36:
                _v = [{}];
                return [4, deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 38:
                _w = [{}];
                return [4, deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 40:
                _x = [{}];
                return [4, deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 42:
                _y = [{}];
                return [4, deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 44:
                _z = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 47];
            case 46:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _1.label = 47;
            case 47:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryRevokeDBSecurityGroupIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryRevokeDBSecurityGroupIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryRevokeDBSecurityGroupIngressResult(data.RevokeDBSecurityGroupIngressResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryRevokeDBSecurityGroupIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "DBSecurityGroupNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBSecurityGroupNotFoundFault": return [3, 4];
                    case "InvalidDBSecurityGroupStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStartActivityStreamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStartActivityStreamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStartActivityStreamResponse(data.StartActivityStreamResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStartActivityStreamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                    case "InvalidDBInstanceStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 8];
                    case "KMSKeyNotAccessibleFault": return [3, 10];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 10];
                    case "ResourceNotFoundFault": return [3, 12];
                    case "com.amazonaws.rds#ResourceNotFoundFault": return [3, 12];
                }
                return [3, 14];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStartDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStartDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStartDBClusterResult(data.StartDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStartDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStartDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStartDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStartDBInstanceResult(data.StartDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStartDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorizationNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#AuthorizationNotFoundFault": return [3, 2];
                    case "DBClusterNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 4];
                    case "DBInstanceNotFoundFault": return [3, 6];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 6];
                    case "DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 8];
                    case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs": return [3, 8];
                    case "DBSubnetGroupNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#DBSubnetGroupNotFoundFault": return [3, 10];
                    case "InsufficientDBInstanceCapacityFault": return [3, 12];
                    case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault": return [3, 12];
                    case "InvalidDBClusterStateFault": return [3, 14];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 14];
                    case "InvalidDBInstanceStateFault": return [3, 16];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 16];
                    case "InvalidSubnet": return [3, 18];
                    case "com.amazonaws.rds#InvalidSubnet": return [3, 18];
                    case "InvalidVPCNetworkStateFault": return [3, 20];
                    case "com.amazonaws.rds#InvalidVPCNetworkStateFault": return [3, 20];
                    case "KMSKeyNotAccessibleFault": return [3, 22];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 22];
                }
                return [3, 24];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryInvalidSubnetResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 20:
                _m = [{}];
                return [4, deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 22:
                _o = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult(data.StartDBInstanceAutomatedBackupsReplicationResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceAutomatedBackupQuotaExceededFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                    case "KMSKeyNotAccessibleFault": return [3, 8];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 8];
                    case "StorageTypeNotSupportedFault": return [3, 10];
                    case "com.amazonaws.rds#StorageTypeNotSupportedFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStartExportTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStartExportTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryExportTask(data.StartExportTaskResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStartExportTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault": return [3, 2];
                    case "DBSnapshotNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBSnapshotNotFoundFault": return [3, 4];
                    case "ExportTaskAlreadyExistsFault": return [3, 6];
                    case "com.amazonaws.rds#ExportTaskAlreadyExistsFault": return [3, 6];
                    case "IamRoleMissingPermissionsFault": return [3, 8];
                    case "com.amazonaws.rds#IamRoleMissingPermissionsFault": return [3, 8];
                    case "IamRoleNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#IamRoleNotFoundFault": return [3, 10];
                    case "InvalidExportOnlyFault": return [3, 12];
                    case "com.amazonaws.rds#InvalidExportOnlyFault": return [3, 12];
                    case "InvalidExportSourceStateFault": return [3, 14];
                    case "com.amazonaws.rds#InvalidExportSourceStateFault": return [3, 14];
                    case "InvalidS3BucketFault": return [3, 16];
                    case "com.amazonaws.rds#InvalidS3BucketFault": return [3, 16];
                    case "KMSKeyNotAccessibleFault": return [3, 18];
                    case "com.amazonaws.rds#KMSKeyNotAccessibleFault": return [3, 18];
                }
                return [3, 20];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryExportTaskAlreadyExistsFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryIamRoleMissingPermissionsFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryIamRoleNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 12:
                _h = [{}];
                return [4, deserializeAws_queryInvalidExportOnlyFaultResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 14:
                _j = [{}];
                return [4, deserializeAws_queryInvalidExportSourceStateFaultResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 16:
                _k = [{}];
                return [4, deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 18:
                _l = [{}];
                return [4, deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStopActivityStreamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStopActivityStreamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStopActivityStreamResponse(data.StopActivityStreamResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStopActivityStreamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "DBInstanceNotFoundFault": return [3, 4];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                    case "InvalidDBInstanceStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 8];
                    case "ResourceNotFoundFault": return [3, 10];
                    case "com.amazonaws.rds#ResourceNotFoundFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStopDBClusterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStopDBClusterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStopDBClusterResult(data.StopDBClusterResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStopDBClusterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBClusterNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBClusterNotFoundFault": return [3, 2];
                    case "InvalidDBClusterStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 4];
                    case "InvalidDBInstanceStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 6];
                }
                return [3, 8];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStopDBInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStopDBInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStopDBInstanceResult(data.StopDBInstanceResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStopDBInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault": return [3, 4];
                    case "InvalidDBClusterStateFault": return [3, 6];
                    case "com.amazonaws.rds#InvalidDBClusterStateFault": return [3, 6];
                    case "InvalidDBInstanceStateFault": return [3, 8];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 8];
                    case "SnapshotQuotaExceededFault": return [3, 10];
                    case "com.amazonaws.rds#SnapshotQuotaExceededFault": return [3, 10];
                }
                return [3, 12];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 6:
                _e = [{}];
                return [4, deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 8:
                _f = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 10:
                _g = [{}];
                return [4, deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult(data.StopDBInstanceAutomatedBackupsReplicationResult, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadQueryErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DBInstanceNotFoundFault": return [3, 2];
                    case "com.amazonaws.rds#DBInstanceNotFoundFault": return [3, 2];
                    case "InvalidDBInstanceStateFault": return [3, 4];
                    case "com.amazonaws.rds#InvalidDBInstanceStateFault": return [3, 4];
                }
                return [3, 6];
            case 2:
                _c = [{}];
                return [4, deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 4:
                _d = [{}];
                return [4, deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;
                response = __assign(__assign({}, parsedBody.Error), { name: "" + errorCode, message: parsedBody.Error.message || parsedBody.Error.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_queryAuthorizationAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryAuthorizationAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "AuthorizationAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryAuthorizationNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryAuthorizationNotFoundFault(body.Error, context);
        contents = __assign({ name: "AuthorizationNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryAuthorizationQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryAuthorizationQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "AuthorizationQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryBackupPolicyNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryBackupPolicyNotFoundFault(body.Error, context);
        contents = __assign({ name: "BackupPolicyNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCertificateNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCertificateNotFoundFault(body.Error, context);
        contents = __assign({ name: "CertificateNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomAvailabilityZoneAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomAvailabilityZoneAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "CustomAvailabilityZoneAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomAvailabilityZoneNotFoundFault(body.Error, context);
        contents = __assign({ name: "CustomAvailabilityZoneNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomAvailabilityZoneQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomAvailabilityZoneQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "CustomAvailabilityZoneQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "CustomDBEngineVersionAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomDBEngineVersionNotFoundFault(body.Error, context);
        contents = __assign({ name: "CustomDBEngineVersionNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryCustomDBEngineVersionQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "CustomDBEngineVersionQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBClusterAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterBacktrackNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterBacktrackNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterEndpointAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBClusterEndpointAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterEndpointNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterEndpointNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterEndpointNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterEndpointQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBClusterEndpointQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterParameterGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterParameterGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBClusterQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterRoleAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBClusterRoleAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterRoleNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterRoleNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterRoleNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterRoleQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBClusterRoleQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterSnapshotAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBClusterSnapshotAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBClusterSnapshotNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBClusterSnapshotNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBInstanceAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBInstanceAutomatedBackupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBInstanceAutomatedBackupQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBInstanceNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceRoleAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBInstanceRoleAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceRoleNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceRoleNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBInstanceRoleNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBInstanceRoleQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBInstanceRoleQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBLogFileNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBLogFileNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBLogFileNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBParameterGroupAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBParameterGroupAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBParameterGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBParameterGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBParameterGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBParameterGroupQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBParameterGroupQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBProxyAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyEndpointAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBProxyEndpointAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyEndpointNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyEndpointNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBProxyEndpointNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyEndpointQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBProxyEndpointQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBProxyNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBProxyQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyTargetAlreadyRegisteredFault(body.Error, context);
        contents = __assign({ name: "DBProxyTargetAlreadyRegisteredFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyTargetGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBProxyTargetGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBProxyTargetNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBProxyTargetNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBProxyTargetNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSecurityGroupAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBSecurityGroupAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSecurityGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSecurityGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBSecurityGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSecurityGroupNotSupportedFault(body.Error, context);
        contents = __assign({ name: "DBSecurityGroupNotSupportedFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSecurityGroupQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBSecurityGroupQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSnapshotAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBSnapshotAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSnapshotNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSnapshotNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBSnapshotNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetGroupAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "DBSubnetGroupAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs(body.Error, context);
        contents = __assign({ name: "DBSubnetGroupDoesNotCoverEnoughAZs", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetGroupNotAllowedFault(body.Error, context);
        contents = __assign({ name: "DBSubnetGroupNotAllowedFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "DBSubnetGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetGroupQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBSubnetGroupQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBSubnetQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBSubnetQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "DBSubnetQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDBUpgradeDependencyFailureFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDBUpgradeDependencyFailureFault(body.Error, context);
        contents = __assign({ name: "DBUpgradeDependencyFailureFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryDomainNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryDomainNotFoundFault(body.Error, context);
        contents = __assign({ name: "DomainNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryEventSubscriptionQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "EventSubscriptionQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryExportTaskAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryExportTaskAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "ExportTaskAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryExportTaskNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryExportTaskNotFoundFault(body.Error, context);
        contents = __assign({ name: "ExportTaskNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryGlobalClusterAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "GlobalClusterAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryGlobalClusterNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryGlobalClusterNotFoundFault(body.Error, context);
        contents = __assign({ name: "GlobalClusterNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryGlobalClusterQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryGlobalClusterQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "GlobalClusterQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryIamRoleMissingPermissionsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryIamRoleMissingPermissionsFault(body.Error, context);
        contents = __assign({ name: "IamRoleMissingPermissionsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryIamRoleNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryIamRoleNotFoundFault(body.Error, context);
        contents = __assign({ name: "IamRoleNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInstallationMediaAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInstallationMediaAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "InstallationMediaAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInstallationMediaNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInstallationMediaNotFoundFault(body.Error, context);
        contents = __assign({ name: "InstallationMediaNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInstanceQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInstanceQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "InstanceQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInsufficientAvailableIPsInSubnetFault(body.Error, context);
        contents = __assign({ name: "InsufficientAvailableIPsInSubnetFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInsufficientDBClusterCapacityFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInsufficientDBClusterCapacityFault(body.Error, context);
        contents = __assign({ name: "InsufficientDBClusterCapacityFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInsufficientDBInstanceCapacityFault(body.Error, context);
        contents = __assign({ name: "InsufficientDBInstanceCapacityFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInsufficientStorageClusterCapacityFault(body.Error, context);
        contents = __assign({ name: "InsufficientStorageClusterCapacityFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidCustomDBEngineVersionStateFault(body.Error, context);
        contents = __assign({ name: "InvalidCustomDBEngineVersionStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBClusterCapacityFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBClusterCapacityFault(body.Error, context);
        contents = __assign({ name: "InvalidDBClusterCapacityFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBClusterEndpointStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBClusterEndpointStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBClusterSnapshotStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBClusterSnapshotStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBClusterStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBClusterStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBClusterStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBInstanceAutomatedBackupStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBInstanceStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBInstanceStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBInstanceStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBParameterGroupStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBParameterGroupStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBParameterGroupStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBProxyEndpointStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBProxyEndpointStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBProxyStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBProxyStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBProxyStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBSecurityGroupStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBSecurityGroupStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBSnapshotStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBSnapshotStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBSnapshotStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBSubnetGroupFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBSubnetGroupFault(body.Error, context);
        contents = __assign({ name: "InvalidDBSubnetGroupFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBSubnetGroupStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBSubnetGroupStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidDBSubnetStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidDBSubnetStateFault(body.Error, context);
        contents = __assign({ name: "InvalidDBSubnetStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidEventSubscriptionStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidEventSubscriptionStateFault(body.Error, context);
        contents = __assign({ name: "InvalidEventSubscriptionStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidExportOnlyFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidExportOnlyFault(body.Error, context);
        contents = __assign({ name: "InvalidExportOnlyFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidExportSourceStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidExportSourceStateFault(body.Error, context);
        contents = __assign({ name: "InvalidExportSourceStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidExportTaskStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidExportTaskStateFault(body.Error, context);
        contents = __assign({ name: "InvalidExportTaskStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidGlobalClusterStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidGlobalClusterStateFault(body.Error, context);
        contents = __assign({ name: "InvalidGlobalClusterStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidOptionGroupStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidOptionGroupStateFault(body.Error, context);
        contents = __assign({ name: "InvalidOptionGroupStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidRestoreFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidRestoreFault(body.Error, context);
        contents = __assign({ name: "InvalidRestoreFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidS3BucketFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidS3BucketFault(body.Error, context);
        contents = __assign({ name: "InvalidS3BucketFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidSubnetResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidSubnet(body.Error, context);
        contents = __assign({ name: "InvalidSubnet", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryInvalidVPCNetworkStateFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryInvalidVPCNetworkStateFault(body.Error, context);
        contents = __assign({ name: "InvalidVPCNetworkStateFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryKMSKeyNotAccessibleFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryKMSKeyNotAccessibleFault(body.Error, context);
        contents = __assign({ name: "KMSKeyNotAccessibleFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryOptionGroupAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryOptionGroupAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "OptionGroupAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryOptionGroupNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryOptionGroupNotFoundFault(body.Error, context);
        contents = __assign({ name: "OptionGroupNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryOptionGroupQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryOptionGroupQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "OptionGroupQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryPointInTimeRestoreNotEnabledFault(body.Error, context);
        contents = __assign({ name: "PointInTimeRestoreNotEnabledFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryProvisionedIopsNotAvailableInAZFault(body.Error, context);
        contents = __assign({ name: "ProvisionedIopsNotAvailableInAZFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryReservedDBInstanceAlreadyExistsFault(body.Error, context);
        contents = __assign({ name: "ReservedDBInstanceAlreadyExistsFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryReservedDBInstanceNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryReservedDBInstanceNotFoundFault(body.Error, context);
        contents = __assign({ name: "ReservedDBInstanceNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryReservedDBInstanceQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "ReservedDBInstanceQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryReservedDBInstancesOfferingNotFoundFault(body.Error, context);
        contents = __assign({ name: "ReservedDBInstancesOfferingNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryResourceNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryResourceNotFoundFault(body.Error, context);
        contents = __assign({ name: "ResourceNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySharedSnapshotQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySharedSnapshotQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "SharedSnapshotQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySnapshotQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySnapshotQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "SnapshotQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySNSInvalidTopicFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySNSInvalidTopicFault(body.Error, context);
        contents = __assign({ name: "SNSInvalidTopicFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySNSNoAuthorizationFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySNSNoAuthorizationFault(body.Error, context);
        contents = __assign({ name: "SNSNoAuthorizationFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySNSTopicArnNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySNSTopicArnNotFoundFault(body.Error, context);
        contents = __assign({ name: "SNSTopicArnNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySourceNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySourceNotFoundFault(body.Error, context);
        contents = __assign({ name: "SourceNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryStorageQuotaExceededFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryStorageQuotaExceededFault(body.Error, context);
        contents = __assign({ name: "StorageQuotaExceededFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_queryStorageTypeNotSupportedFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_queryStorageTypeNotSupportedFault(body.Error, context);
        contents = __assign({ name: "StorageTypeNotSupportedFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySubnetAlreadyInUseResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySubnetAlreadyInUse(body.Error, context);
        contents = __assign({ name: "SubnetAlreadyInUse", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySubscriptionAlreadyExistFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySubscriptionAlreadyExistFault(body.Error, context);
        contents = __assign({ name: "SubscriptionAlreadyExistFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySubscriptionCategoryNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySubscriptionCategoryNotFoundFault(body.Error, context);
        contents = __assign({ name: "SubscriptionCategoryNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var deserializeAws_querySubscriptionNotFoundFaultResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_querySubscriptionNotFoundFault(body.Error, context);
        contents = __assign({ name: "SubscriptionNotFoundFault", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2, contents];
    });
}); };
var serializeAws_queryAddRoleToDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName !== undefined && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
var serializeAws_queryAddRoleToDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName !== undefined && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
var serializeAws_queryAddSourceIdentifierToSubscriptionMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier !== undefined && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
var serializeAws_queryAddTagsToResourceMessage = function (input, context) {
    var entries = {};
    if (input.ResourceName !== undefined && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryApplyPendingMaintenanceActionMessage = function (input, context) {
    var entries = {};
    if (input.ResourceIdentifier !== undefined && input.ResourceIdentifier !== null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.ApplyAction !== undefined && input.ApplyAction !== null) {
        entries["ApplyAction"] = input.ApplyAction;
    }
    if (input.OptInType !== undefined && input.OptInType !== null) {
        entries["OptInType"] = input.OptInType;
    }
    return entries;
};
var serializeAws_queryAttributeValueList = function (input, context) {
    var e_1, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            if (entry === null) {
                continue;
            }
            entries["AttributeValue." + counter] = entry;
            counter++;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return entries;
};
var serializeAws_queryAuthorizeDBSecurityGroupIngressMessage = function (input, context) {
    var entries = {};
    if (input.DBSecurityGroupName !== undefined && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP !== undefined && input.CIDRIP !== null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName !== undefined && input.EC2SecurityGroupName !== null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId !== undefined && input.EC2SecurityGroupId !== null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId !== undefined && input.EC2SecurityGroupOwnerId !== null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
var serializeAws_queryAvailabilityZones = function (input, context) {
    var e_2, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            if (entry === null) {
                continue;
            }
            entries["AvailabilityZone." + counter] = entry;
            counter++;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return entries;
};
var serializeAws_queryBacktrackDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackTo !== undefined && input.BacktrackTo !== null) {
        entries["BacktrackTo"] = input.BacktrackTo.toISOString().split(".")[0] + "Z";
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.UseEarliestTimeOnPointInTimeUnavailable !== undefined &&
        input.UseEarliestTimeOnPointInTimeUnavailable !== null) {
        entries["UseEarliestTimeOnPointInTimeUnavailable"] = input.UseEarliestTimeOnPointInTimeUnavailable;
    }
    return entries;
};
var serializeAws_queryCancelExportTaskMessage = function (input, context) {
    var entries = {};
    if (input.ExportTaskIdentifier !== undefined && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    return entries;
};
var serializeAws_queryCloudwatchLogsExportConfiguration = function (input, context) {
    var entries = {};
    if (input.EnableLogTypes !== undefined && input.EnableLogTypes !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableLogTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableLogTypes." + key;
            entries[loc] = value;
        });
    }
    if (input.DisableLogTypes !== undefined && input.DisableLogTypes !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.DisableLogTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DisableLogTypes." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryConnectionPoolConfiguration = function (input, context) {
    var entries = {};
    if (input.MaxConnectionsPercent !== undefined && input.MaxConnectionsPercent !== null) {
        entries["MaxConnectionsPercent"] = input.MaxConnectionsPercent;
    }
    if (input.MaxIdleConnectionsPercent !== undefined && input.MaxIdleConnectionsPercent !== null) {
        entries["MaxIdleConnectionsPercent"] = input.MaxIdleConnectionsPercent;
    }
    if (input.ConnectionBorrowTimeout !== undefined && input.ConnectionBorrowTimeout !== null) {
        entries["ConnectionBorrowTimeout"] = input.ConnectionBorrowTimeout;
    }
    if (input.SessionPinningFilters !== undefined && input.SessionPinningFilters !== null) {
        var memberEntries = serializeAws_queryStringList(input.SessionPinningFilters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SessionPinningFilters." + key;
            entries[loc] = value;
        });
    }
    if (input.InitQuery !== undefined && input.InitQuery !== null) {
        entries["InitQuery"] = input.InitQuery;
    }
    return entries;
};
var serializeAws_queryCopyDBClusterParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBClusterParameterGroupIdentifier !== undefined &&
        input.SourceDBClusterParameterGroupIdentifier !== null) {
        entries["SourceDBClusterParameterGroupIdentifier"] = input.SourceDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupIdentifier !== undefined &&
        input.TargetDBClusterParameterGroupIdentifier !== null) {
        entries["TargetDBClusterParameterGroupIdentifier"] = input.TargetDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupDescription !== undefined &&
        input.TargetDBClusterParameterGroupDescription !== null) {
        entries["TargetDBClusterParameterGroupDescription"] = input.TargetDBClusterParameterGroupDescription;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCopyDBClusterSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBClusterSnapshotIdentifier !== undefined && input.SourceDBClusterSnapshotIdentifier !== null) {
        entries["SourceDBClusterSnapshotIdentifier"] = input.SourceDBClusterSnapshotIdentifier;
    }
    if (input.TargetDBClusterSnapshotIdentifier !== undefined && input.TargetDBClusterSnapshotIdentifier !== null) {
        entries["TargetDBClusterSnapshotIdentifier"] = input.TargetDBClusterSnapshotIdentifier;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl !== undefined && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.CopyTags !== undefined && input.CopyTags !== null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCopyDBParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBParameterGroupIdentifier !== undefined && input.SourceDBParameterGroupIdentifier !== null) {
        entries["SourceDBParameterGroupIdentifier"] = input.SourceDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupIdentifier !== undefined && input.TargetDBParameterGroupIdentifier !== null) {
        entries["TargetDBParameterGroupIdentifier"] = input.TargetDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupDescription !== undefined && input.TargetDBParameterGroupDescription !== null) {
        entries["TargetDBParameterGroupDescription"] = input.TargetDBParameterGroupDescription;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCopyDBSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBSnapshotIdentifier !== undefined && input.SourceDBSnapshotIdentifier !== null) {
        entries["SourceDBSnapshotIdentifier"] = input.SourceDBSnapshotIdentifier;
    }
    if (input.TargetDBSnapshotIdentifier !== undefined && input.TargetDBSnapshotIdentifier !== null) {
        entries["TargetDBSnapshotIdentifier"] = input.TargetDBSnapshotIdentifier;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.CopyTags !== undefined && input.CopyTags !== null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.PreSignedUrl !== undefined && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.TargetCustomAvailabilityZone !== undefined && input.TargetCustomAvailabilityZone !== null) {
        entries["TargetCustomAvailabilityZone"] = input.TargetCustomAvailabilityZone;
    }
    return entries;
};
var serializeAws_queryCopyOptionGroupMessage = function (input, context) {
    var entries = {};
    if (input.SourceOptionGroupIdentifier !== undefined && input.SourceOptionGroupIdentifier !== null) {
        entries["SourceOptionGroupIdentifier"] = input.SourceOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupIdentifier !== undefined && input.TargetOptionGroupIdentifier !== null) {
        entries["TargetOptionGroupIdentifier"] = input.TargetOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupDescription !== undefined && input.TargetOptionGroupDescription !== null) {
        entries["TargetOptionGroupDescription"] = input.TargetOptionGroupDescription;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateCustomAvailabilityZoneMessage = function (input, context) {
    var entries = {};
    if (input.CustomAvailabilityZoneName !== undefined && input.CustomAvailabilityZoneName !== null) {
        entries["CustomAvailabilityZoneName"] = input.CustomAvailabilityZoneName;
    }
    if (input.ExistingVpnId !== undefined && input.ExistingVpnId !== null) {
        entries["ExistingVpnId"] = input.ExistingVpnId;
    }
    if (input.NewVpnTunnelName !== undefined && input.NewVpnTunnelName !== null) {
        entries["NewVpnTunnelName"] = input.NewVpnTunnelName;
    }
    if (input.VpnTunnelOriginatorIP !== undefined && input.VpnTunnelOriginatorIP !== null) {
        entries["VpnTunnelOriginatorIP"] = input.VpnTunnelOriginatorIP;
    }
    return entries;
};
var serializeAws_queryCreateCustomDBEngineVersionMessage = function (input, context) {
    var entries = {};
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DatabaseInstallationFilesS3BucketName !== undefined &&
        input.DatabaseInstallationFilesS3BucketName !== null) {
        entries["DatabaseInstallationFilesS3BucketName"] = input.DatabaseInstallationFilesS3BucketName;
    }
    if (input.DatabaseInstallationFilesS3Prefix !== undefined && input.DatabaseInstallationFilesS3Prefix !== null) {
        entries["DatabaseInstallationFilesS3Prefix"] = input.DatabaseInstallationFilesS3Prefix;
    }
    if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {
        entries["KMSKeyId"] = input.KMSKeyId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Manifest !== undefined && input.Manifest !== null) {
        entries["Manifest"] = input.Manifest;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBClusterEndpointMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier !== undefined && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType !== undefined && input.EndpointType !== null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers !== undefined && input.StaticMembers !== null) {
        var memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "StaticMembers." + key;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers !== undefined && input.ExcludedMembers !== null) {
        var memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExcludedMembers." + key;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        var memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AvailabilityZones." + key;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName !== undefined && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName !== undefined && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername !== undefined && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.ReplicationSourceIdentifier !== undefined && input.ReplicationSourceIdentifier !== null) {
        entries["ReplicationSourceIdentifier"] = input.ReplicationSourceIdentifier;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted !== undefined && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl !== undefined && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow !== undefined && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.EngineMode !== undefined && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration !== undefined && input.ScalingConfiguration !== null) {
        var memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ScalingConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.EnableHttpEndpoint !== undefined && input.EnableHttpEndpoint !== null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableGlobalWriteForwarding !== undefined && input.EnableGlobalWriteForwarding !== null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass !== undefined && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage !== undefined && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    return entries;
};
var serializeAws_queryCreateDBClusterParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DBParameterGroupFamily !== undefined && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBClusterSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterSnapshotIdentifier !== undefined && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBName !== undefined && input.DBName !== null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage !== undefined && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername !== undefined && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups !== undefined && input.DBSecurityGroups !== null) {
        var memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBSecurityGroups." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CharacterSetName !== undefined && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.NcharCharacterSetName !== undefined && input.NcharCharacterSetName !== null) {
        entries["NcharCharacterSetName"] = input.NcharCharacterSetName;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn !== undefined && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword !== undefined && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.StorageEncrypted !== undefined && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier !== undefined && input.PromotionTier !== null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.Timezone !== undefined && input.Timezone !== null) {
        entries["Timezone"] = input.Timezone;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage !== undefined && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.EnableCustomerOwnedIp !== undefined && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile !== undefined && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget !== undefined && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    return entries;
};
var serializeAws_queryCreateDBInstanceReadReplicaMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SourceDBInstanceIdentifier !== undefined && input.SourceDBInstanceIdentifier !== null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl !== undefined && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures !== undefined && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ReplicaMode !== undefined && input.ReplicaMode !== null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.MaxAllocatedStorage !== undefined && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CustomIamInstanceProfile !== undefined && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    return entries;
};
var serializeAws_queryCreateDBParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DBParameterGroupFamily !== undefined && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBProxyEndpointRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName !== undefined && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.VpcSubnetIds !== undefined && input.VpcSubnetIds !== null) {
        var memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSubnetIds." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.TargetRole !== undefined && input.TargetRole !== null) {
        entries["TargetRole"] = input.TargetRole;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBProxyRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.EngineFamily !== undefined && input.EngineFamily !== null) {
        entries["EngineFamily"] = input.EngineFamily;
    }
    if (input.Auth !== undefined && input.Auth !== null) {
        var memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Auth." + key;
            entries[loc] = value;
        });
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.VpcSubnetIds !== undefined && input.VpcSubnetIds !== null) {
        var memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSubnetIds." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS !== undefined && input.RequireTLS !== null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout !== undefined && input.IdleClientTimeout !== null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging !== undefined && input.DebugLogging !== null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBSecurityGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBSecurityGroupName !== undefined && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.DBSecurityGroupDescription !== undefined && input.DBSecurityGroupDescription !== null) {
        entries["DBSecurityGroupDescription"] = input.DBSecurityGroupDescription;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateDBSubnetGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription !== undefined && input.DBSubnetGroupDescription !== null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateEventSubscriptionMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn !== undefined && input.SnsTopicArn !== null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType !== undefined && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories !== undefined && input.EventCategories !== null) {
        var memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EventCategories." + key;
            entries[loc] = value;
        });
    }
    if (input.SourceIds !== undefined && input.SourceIds !== null) {
        var memberEntries = serializeAws_querySourceIdsList(input.SourceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryCreateGlobalClusterMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.SourceDBClusterIdentifier !== undefined && input.SourceDBClusterIdentifier !== null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.DatabaseName !== undefined && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.StorageEncrypted !== undefined && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    return entries;
};
var serializeAws_queryCreateOptionGroupMessage = function (input, context) {
    var entries = {};
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.EngineName !== undefined && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion !== undefined && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.OptionGroupDescription !== undefined && input.OptionGroupDescription !== null) {
        entries["OptionGroupDescription"] = input.OptionGroupDescription;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryDBSecurityGroupNameList = function (input, context) {
    var e_3, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var entry = input_3_1.value;
            if (entry === null) {
                continue;
            }
            entries["DBSecurityGroupName." + counter] = entry;
            counter++;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return entries;
};
var serializeAws_queryDeleteCustomAvailabilityZoneMessage = function (input, context) {
    var entries = {};
    if (input.CustomAvailabilityZoneId !== undefined && input.CustomAvailabilityZoneId !== null) {
        entries["CustomAvailabilityZoneId"] = input.CustomAvailabilityZoneId;
    }
    return entries;
};
var serializeAws_queryDeleteCustomDBEngineVersionMessage = function (input, context) {
    var entries = {};
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    return entries;
};
var serializeAws_queryDeleteDBClusterEndpointMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterEndpointIdentifier !== undefined && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    return entries;
};
var serializeAws_queryDeleteDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SkipFinalSnapshot !== undefined && input.SkipFinalSnapshot !== null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier !== undefined && input.FinalDBSnapshotIdentifier !== null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryDeleteDBClusterParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    return entries;
};
var serializeAws_queryDeleteDBClusterSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterSnapshotIdentifier !== undefined && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryDeleteDBInstanceAutomatedBackupMessage = function (input, context) {
    var entries = {};
    if (input.DbiResourceId !== undefined && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceAutomatedBackupsArn !== undefined && input.DBInstanceAutomatedBackupsArn !== null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
var serializeAws_queryDeleteDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SkipFinalSnapshot !== undefined && input.SkipFinalSnapshot !== null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier !== undefined && input.FinalDBSnapshotIdentifier !== null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    if (input.DeleteAutomatedBackups !== undefined && input.DeleteAutomatedBackups !== null) {
        entries["DeleteAutomatedBackups"] = input.DeleteAutomatedBackups;
    }
    return entries;
};
var serializeAws_queryDeleteDBParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    return entries;
};
var serializeAws_queryDeleteDBProxyEndpointRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyEndpointName !== undefined && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    return entries;
};
var serializeAws_queryDeleteDBProxyRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    return entries;
};
var serializeAws_queryDeleteDBSecurityGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBSecurityGroupName !== undefined && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    return entries;
};
var serializeAws_queryDeleteDBSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryDeleteDBSubnetGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    return entries;
};
var serializeAws_queryDeleteEventSubscriptionMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    return entries;
};
var serializeAws_queryDeleteGlobalClusterMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryDeleteInstallationMediaMessage = function (input, context) {
    var entries = {};
    if (input.InstallationMediaId !== undefined && input.InstallationMediaId !== null) {
        entries["InstallationMediaId"] = input.InstallationMediaId;
    }
    return entries;
};
var serializeAws_queryDeleteOptionGroupMessage = function (input, context) {
    var entries = {};
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
var serializeAws_queryDeregisterDBProxyTargetsRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName !== undefined && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers !== undefined && input.DBInstanceIdentifiers !== null) {
        var memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBInstanceIdentifiers." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers !== undefined && input.DBClusterIdentifiers !== null) {
        var memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBClusterIdentifiers." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryDescribeAccountAttributesMessage = function (input, context) {
    var entries = {};
    return entries;
};
var serializeAws_queryDescribeCertificatesMessage = function (input, context) {
    var entries = {};
    if (input.CertificateIdentifier !== undefined && input.CertificateIdentifier !== null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeCustomAvailabilityZonesMessage = function (input, context) {
    var entries = {};
    if (input.CustomAvailabilityZoneId !== undefined && input.CustomAvailabilityZoneId !== null) {
        entries["CustomAvailabilityZoneId"] = input.CustomAvailabilityZoneId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterBacktracksMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackIdentifier !== undefined && input.BacktrackIdentifier !== null) {
        entries["BacktrackIdentifier"] = input.BacktrackIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterEndpointsMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier !== undefined && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterParameterGroupsMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterParametersMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Source !== undefined && input.Source !== null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBClustersMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared !== undefined && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterSnapshotAttributesMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterSnapshotIdentifier !== undefined && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryDescribeDBClusterSnapshotsMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterSnapshotIdentifier !== undefined && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.SnapshotType !== undefined && input.SnapshotType !== null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared !== undefined && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic !== undefined && input.IncludePublic !== null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    return entries;
};
var serializeAws_queryDescribeDBEngineVersionsMessage = function (input, context) {
    var entries = {};
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBParameterGroupFamily !== undefined && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DefaultOnly !== undefined && input.DefaultOnly !== null) {
        entries["DefaultOnly"] = input.DefaultOnly;
    }
    if (input.ListSupportedCharacterSets !== undefined && input.ListSupportedCharacterSets !== null) {
        entries["ListSupportedCharacterSets"] = input.ListSupportedCharacterSets;
    }
    if (input.ListSupportedTimezones !== undefined && input.ListSupportedTimezones !== null) {
        entries["ListSupportedTimezones"] = input.ListSupportedTimezones;
    }
    if (input.IncludeAll !== undefined && input.IncludeAll !== null) {
        entries["IncludeAll"] = input.IncludeAll;
    }
    return entries;
};
var serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage = function (input, context) {
    var entries = {};
    if (input.DbiResourceId !== undefined && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DBInstanceAutomatedBackupsArn !== undefined && input.DBInstanceAutomatedBackupsArn !== null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
var serializeAws_queryDescribeDBInstancesMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBLogFilesMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.FilenameContains !== undefined && input.FilenameContains !== null) {
        entries["FilenameContains"] = input.FilenameContains;
    }
    if (input.FileLastWritten !== undefined && input.FileLastWritten !== null) {
        entries["FileLastWritten"] = input.FileLastWritten;
    }
    if (input.FileSize !== undefined && input.FileSize !== null) {
        entries["FileSize"] = input.FileSize;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBParameterGroupsMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBParametersMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Source !== undefined && input.Source !== null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBProxiesRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeDBProxyEndpointsRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName !== undefined && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeDBProxyTargetGroupsRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName !== undefined && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeDBProxyTargetsRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName !== undefined && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeDBSecurityGroupsMessage = function (input, context) {
    var entries = {};
    if (input.DBSecurityGroupName !== undefined && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeDBSnapshotAttributesMessage = function (input, context) {
    var entries = {};
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryDescribeDBSnapshotsMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.SnapshotType !== undefined && input.SnapshotType !== null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared !== undefined && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic !== undefined && input.IncludePublic !== null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    if (input.DbiResourceId !== undefined && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    return entries;
};
var serializeAws_queryDescribeDBSubnetGroupsMessage = function (input, context) {
    var entries = {};
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeEngineDefaultClusterParametersMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupFamily !== undefined && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeEngineDefaultParametersMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupFamily !== undefined && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeEventCategoriesMessage = function (input, context) {
    var entries = {};
    if (input.SourceType !== undefined && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryDescribeEventsMessage = function (input, context) {
    var entries = {};
    if (input.SourceIdentifier !== undefined && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    if (input.SourceType !== undefined && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Duration !== undefined && input.Duration !== null) {
        entries["Duration"] = input.Duration;
    }
    if (input.EventCategories !== undefined && input.EventCategories !== null) {
        var memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EventCategories." + key;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeEventSubscriptionsMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeExportTasksMessage = function (input, context) {
    var entries = {};
    if (input.ExportTaskIdentifier !== undefined && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn !== undefined && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeGlobalClustersMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeInstallationMediaMessage = function (input, context) {
    var entries = {};
    if (input.InstallationMediaId !== undefined && input.InstallationMediaId !== null) {
        entries["InstallationMediaId"] = input.InstallationMediaId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeOptionGroupOptionsMessage = function (input, context) {
    var entries = {};
    if (input.EngineName !== undefined && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion !== undefined && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeOptionGroupsMessage = function (input, context) {
    var entries = {};
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.EngineName !== undefined && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion !== undefined && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    return entries;
};
var serializeAws_queryDescribeOrderableDBInstanceOptionsMessage = function (input, context) {
    var entries = {};
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.AvailabilityZoneGroup !== undefined && input.AvailabilityZoneGroup !== null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.Vpc !== undefined && input.Vpc !== null) {
        entries["Vpc"] = input.Vpc;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribePendingMaintenanceActionsMessage = function (input, context) {
    var entries = {};
    if (input.ResourceIdentifier !== undefined && input.ResourceIdentifier !== null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
var serializeAws_queryDescribeReservedDBInstancesMessage = function (input, context) {
    var entries = {};
    if (input.ReservedDBInstanceId !== undefined && input.ReservedDBInstanceId !== null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.ReservedDBInstancesOfferingId !== undefined && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration !== undefined && input.Duration !== null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription !== undefined && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.LeaseId !== undefined && input.LeaseId !== null) {
        entries["LeaseId"] = input.LeaseId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeReservedDBInstancesOfferingsMessage = function (input, context) {
    var entries = {};
    if (input.ReservedDBInstancesOfferingId !== undefined && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration !== undefined && input.Duration !== null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription !== undefined && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
var serializeAws_queryDescribeSourceRegionsMessage = function (input, context) {
    var entries = {};
    if (input.RegionName !== undefined && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
    }
    if (input.MaxRecords !== undefined && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryDescribeValidDBInstanceModificationsMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
var serializeAws_queryDownloadDBLogFilePortionMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.LogFileName !== undefined && input.LogFileName !== null) {
        entries["LogFileName"] = input.LogFileName;
    }
    if (input.Marker !== undefined && input.Marker !== null) {
        entries["Marker"] = input.Marker;
    }
    if (input.NumberOfLines !== undefined && input.NumberOfLines !== null) {
        entries["NumberOfLines"] = input.NumberOfLines;
    }
    return entries;
};
var serializeAws_queryEngineModeList = function (input, context) {
    var e_4, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
            var entry = input_4_1.value;
            if (entry === null) {
                continue;
            }
            entries["member." + counter] = entry;
            counter++;
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (input_4_1 && !input_4_1.done && (_a = input_4.return)) _a.call(input_4);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return entries;
};
var serializeAws_queryEventCategoriesList = function (input, context) {
    var e_5, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
            var entry = input_5_1.value;
            if (entry === null) {
                continue;
            }
            entries["EventCategory." + counter] = entry;
            counter++;
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (input_5_1 && !input_5_1.done && (_a = input_5.return)) _a.call(input_5);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return entries;
};
var serializeAws_queryFailoverDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.TargetDBInstanceIdentifier !== undefined && input.TargetDBInstanceIdentifier !== null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    return entries;
};
var serializeAws_queryFailoverGlobalClusterMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.TargetDbClusterIdentifier !== undefined && input.TargetDbClusterIdentifier !== null) {
        entries["TargetDbClusterIdentifier"] = input.TargetDbClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryFilter = function (input, context) {
    var entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.Values !== undefined && input.Values !== null) {
        var memberEntries = serializeAws_queryFilterValueList(input.Values, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Values." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryFilterList = function (input, context) {
    var e_6, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
            var entry = input_6_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryFilter(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Filter." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (input_6_1 && !input_6_1.done && (_a = input_6.return)) _a.call(input_6);
        }
        finally { if (e_6) throw e_6.error; }
    }
    return entries;
};
var serializeAws_queryFilterValueList = function (input, context) {
    var e_7, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_7 = __values(input), input_7_1 = input_7.next(); !input_7_1.done; input_7_1 = input_7.next()) {
            var entry = input_7_1.value;
            if (entry === null) {
                continue;
            }
            entries["Value." + counter] = entry;
            counter++;
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (input_7_1 && !input_7_1.done && (_a = input_7.return)) _a.call(input_7);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return entries;
};
var serializeAws_queryImportInstallationMediaMessage = function (input, context) {
    var entries = {};
    if (input.CustomAvailabilityZoneId !== undefined && input.CustomAvailabilityZoneId !== null) {
        entries["CustomAvailabilityZoneId"] = input.CustomAvailabilityZoneId;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.EngineInstallationMediaPath !== undefined && input.EngineInstallationMediaPath !== null) {
        entries["EngineInstallationMediaPath"] = input.EngineInstallationMediaPath;
    }
    if (input.OSInstallationMediaPath !== undefined && input.OSInstallationMediaPath !== null) {
        entries["OSInstallationMediaPath"] = input.OSInstallationMediaPath;
    }
    return entries;
};
var serializeAws_queryKeyList = function (input, context) {
    var e_8, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_8 = __values(input), input_8_1 = input_8.next(); !input_8_1.done; input_8_1 = input_8.next()) {
            var entry = input_8_1.value;
            if (entry === null) {
                continue;
            }
            entries["member." + counter] = entry;
            counter++;
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (input_8_1 && !input_8_1.done && (_a = input_8.return)) _a.call(input_8);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return entries;
};
var serializeAws_queryListTagsForResourceMessage = function (input, context) {
    var entries = {};
    if (input.ResourceName !== undefined && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryLogTypeList = function (input, context) {
    var e_9, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_9 = __values(input), input_9_1 = input_9.next(); !input_9_1.done; input_9_1 = input_9.next()) {
            var entry = input_9_1.value;
            if (entry === null) {
                continue;
            }
            entries["member." + counter] = entry;
            counter++;
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (input_9_1 && !input_9_1.done && (_a = input_9.return)) _a.call(input_9);
        }
        finally { if (e_9) throw e_9.error; }
    }
    return entries;
};
var serializeAws_queryModifyCertificatesMessage = function (input, context) {
    var entries = {};
    if (input.CertificateIdentifier !== undefined && input.CertificateIdentifier !== null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.RemoveCustomerOverride !== undefined && input.RemoveCustomerOverride !== null) {
        entries["RemoveCustomerOverride"] = input.RemoveCustomerOverride;
    }
    return entries;
};
var serializeAws_queryModifyCurrentDBClusterCapacityMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Capacity !== undefined && input.Capacity !== null) {
        entries["Capacity"] = input.Capacity;
    }
    if (input.SecondsBeforeTimeout !== undefined && input.SecondsBeforeTimeout !== null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    if (input.TimeoutAction !== undefined && input.TimeoutAction !== null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    return entries;
};
var serializeAws_queryModifyCustomDBEngineVersionMessage = function (input, context) {
    var entries = {};
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Status !== undefined && input.Status !== null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
var serializeAws_queryModifyDBClusterEndpointMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterEndpointIdentifier !== undefined && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType !== undefined && input.EndpointType !== null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers !== undefined && input.StaticMembers !== null) {
        var memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "StaticMembers." + key;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers !== undefined && input.ExcludedMembers !== null) {
        var memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExcludedMembers." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.NewDBClusterIdentifier !== undefined && input.NewDBClusterIdentifier !== null) {
        entries["NewDBClusterIdentifier"] = input.NewDBClusterIdentifier;
    }
    if (input.ApplyImmediately !== undefined && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow !== undefined && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.CloudwatchLogsExportConfiguration !== undefined && input.CloudwatchLogsExportConfiguration !== null) {
        var memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CloudwatchLogsExportConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade !== undefined && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.DBInstanceParameterGroupName !== undefined && input.DBInstanceParameterGroupName !== null) {
        entries["DBInstanceParameterGroupName"] = input.DBInstanceParameterGroupName;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration !== undefined && input.ScalingConfiguration !== null) {
        var memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ScalingConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableHttpEndpoint !== undefined && input.EnableHttpEndpoint !== null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.EnableGlobalWriteForwarding !== undefined && input.EnableGlobalWriteForwarding !== null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass !== undefined && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage !== undefined && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    return entries;
};
var serializeAws_queryModifyDBClusterParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Parameters !== undefined && input.Parameters !== null) {
        var memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Parameters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBClusterSnapshotAttributeMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterSnapshotIdentifier !== undefined && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.AttributeName !== undefined && input.AttributeName !== null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd !== undefined && input.ValuesToAdd !== null) {
        var memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ValuesToAdd." + key;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove !== undefined && input.ValuesToRemove !== null) {
        var memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ValuesToRemove." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage !== undefined && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSecurityGroups !== undefined && input.DBSecurityGroups !== null) {
        var memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBSecurityGroups." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately !== undefined && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade !== undefined && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.NewDBInstanceIdentifier !== undefined && input.NewDBInstanceIdentifier !== null) {
        entries["NewDBInstanceIdentifier"] = input.NewDBInstanceIdentifier;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn !== undefined && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword !== undefined && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.CACertificateIdentifier !== undefined && input.CACertificateIdentifier !== null) {
        entries["CACertificateIdentifier"] = input.CACertificateIdentifier;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.DBPortNumber !== undefined && input.DBPortNumber !== null) {
        entries["DBPortNumber"] = input.DBPortNumber;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier !== undefined && input.PromotionTier !== null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.CloudwatchLogsExportConfiguration !== undefined && input.CloudwatchLogsExportConfiguration !== null) {
        var memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CloudwatchLogsExportConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures !== undefined && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage !== undefined && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CertificateRotationRestart !== undefined && input.CertificateRotationRestart !== null) {
        entries["CertificateRotationRestart"] = input.CertificateRotationRestart;
    }
    if (input.ReplicaMode !== undefined && input.ReplicaMode !== null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.EnableCustomerOwnedIp !== undefined && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.AwsBackupRecoveryPointArn !== undefined && input.AwsBackupRecoveryPointArn !== null) {
        entries["AwsBackupRecoveryPointArn"] = input.AwsBackupRecoveryPointArn;
    }
    if (input.AutomationMode !== undefined && input.AutomationMode !== null) {
        entries["AutomationMode"] = input.AutomationMode;
    }
    if (input.ResumeFullAutomationModeMinutes !== undefined && input.ResumeFullAutomationModeMinutes !== null) {
        entries["ResumeFullAutomationModeMinutes"] = input.ResumeFullAutomationModeMinutes;
    }
    return entries;
};
var serializeAws_queryModifyDBParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Parameters !== undefined && input.Parameters !== null) {
        var memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Parameters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBProxyEndpointRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyEndpointName !== undefined && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.NewDBProxyEndpointName !== undefined && input.NewDBProxyEndpointName !== null) {
        entries["NewDBProxyEndpointName"] = input.NewDBProxyEndpointName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBProxyRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.NewDBProxyName !== undefined && input.NewDBProxyName !== null) {
        entries["NewDBProxyName"] = input.NewDBProxyName;
    }
    if (input.Auth !== undefined && input.Auth !== null) {
        var memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Auth." + key;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS !== undefined && input.RequireTLS !== null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout !== undefined && input.IdleClientTimeout !== null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging !== undefined && input.DebugLogging !== null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        var memberEntries = serializeAws_queryStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroups." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBProxyTargetGroupRequest = function (input, context) {
    var entries = {};
    if (input.TargetGroupName !== undefined && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.ConnectionPoolConfig !== undefined && input.ConnectionPoolConfig !== null) {
        var memberEntries = serializeAws_queryConnectionPoolConfiguration(input.ConnectionPoolConfig, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionPoolConfig." + key;
            entries[loc] = value;
        });
    }
    if (input.NewName !== undefined && input.NewName !== null) {
        entries["NewName"] = input.NewName;
    }
    return entries;
};
var serializeAws_queryModifyDBSnapshotAttributeMessage = function (input, context) {
    var entries = {};
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.AttributeName !== undefined && input.AttributeName !== null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd !== undefined && input.ValuesToAdd !== null) {
        var memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ValuesToAdd." + key;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove !== undefined && input.ValuesToRemove !== null) {
        var memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ValuesToRemove." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyDBSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
var serializeAws_queryModifyDBSubnetGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription !== undefined && input.DBSubnetGroupDescription !== null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryModifyEventSubscriptionMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn !== undefined && input.SnsTopicArn !== null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType !== undefined && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories !== undefined && input.EventCategories !== null) {
        var memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EventCategories." + key;
            entries[loc] = value;
        });
    }
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_queryModifyGlobalClusterMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.NewGlobalClusterIdentifier !== undefined && input.NewGlobalClusterIdentifier !== null) {
        entries["NewGlobalClusterIdentifier"] = input.NewGlobalClusterIdentifier;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade !== undefined && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    return entries;
};
var serializeAws_queryModifyOptionGroupMessage = function (input, context) {
    var entries = {};
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.OptionsToInclude !== undefined && input.OptionsToInclude !== null) {
        var memberEntries = serializeAws_queryOptionConfigurationList(input.OptionsToInclude, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OptionsToInclude." + key;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove !== undefined && input.OptionsToRemove !== null) {
        var memberEntries = serializeAws_queryOptionNamesList(input.OptionsToRemove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OptionsToRemove." + key;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately !== undefined && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
var serializeAws_queryOptionConfiguration = function (input, context) {
    var entries = {};
    if (input.OptionName !== undefined && input.OptionName !== null) {
        entries["OptionName"] = input.OptionName;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.OptionVersion !== undefined && input.OptionVersion !== null) {
        entries["OptionVersion"] = input.OptionVersion;
    }
    if (input.DBSecurityGroupMemberships !== undefined && input.DBSecurityGroupMemberships !== null) {
        var memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroupMemberships, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBSecurityGroupMemberships." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupMemberships !== undefined && input.VpcSecurityGroupMemberships !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupMemberships, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupMemberships." + key;
            entries[loc] = value;
        });
    }
    if (input.OptionSettings !== undefined && input.OptionSettings !== null) {
        var memberEntries = serializeAws_queryOptionSettingsList(input.OptionSettings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OptionSettings." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryOptionConfigurationList = function (input, context) {
    var e_10, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_10 = __values(input), input_10_1 = input_10.next(); !input_10_1.done; input_10_1 = input_10.next()) {
            var entry = input_10_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryOptionConfiguration(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["OptionConfiguration." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (input_10_1 && !input_10_1.done && (_a = input_10.return)) _a.call(input_10);
        }
        finally { if (e_10) throw e_10.error; }
    }
    return entries;
};
var serializeAws_queryOptionNamesList = function (input, context) {
    var e_11, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_11 = __values(input), input_11_1 = input_11.next(); !input_11_1.done; input_11_1 = input_11.next()) {
            var entry = input_11_1.value;
            if (entry === null) {
                continue;
            }
            entries["member." + counter] = entry;
            counter++;
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (input_11_1 && !input_11_1.done && (_a = input_11.return)) _a.call(input_11);
        }
        finally { if (e_11) throw e_11.error; }
    }
    return entries;
};
var serializeAws_queryOptionSetting = function (input, context) {
    var entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    if (input.DefaultValue !== undefined && input.DefaultValue !== null) {
        entries["DefaultValue"] = input.DefaultValue;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ApplyType !== undefined && input.ApplyType !== null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType !== undefined && input.DataType !== null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues !== undefined && input.AllowedValues !== null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable !== undefined && input.IsModifiable !== null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.IsCollection !== undefined && input.IsCollection !== null) {
        entries["IsCollection"] = input.IsCollection;
    }
    return entries;
};
var serializeAws_queryOptionSettingsList = function (input, context) {
    var e_12, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_12 = __values(input), input_12_1 = input_12.next(); !input_12_1.done; input_12_1 = input_12.next()) {
            var entry = input_12_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryOptionSetting(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["OptionSetting." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (input_12_1 && !input_12_1.done && (_a = input_12.return)) _a.call(input_12);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return entries;
};
var serializeAws_queryParameter = function (input, context) {
    var entries = {};
    if (input.ParameterName !== undefined && input.ParameterName !== null) {
        entries["ParameterName"] = input.ParameterName;
    }
    if (input.ParameterValue !== undefined && input.ParameterValue !== null) {
        entries["ParameterValue"] = input.ParameterValue;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Source !== undefined && input.Source !== null) {
        entries["Source"] = input.Source;
    }
    if (input.ApplyType !== undefined && input.ApplyType !== null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType !== undefined && input.DataType !== null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues !== undefined && input.AllowedValues !== null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable !== undefined && input.IsModifiable !== null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.MinimumEngineVersion !== undefined && input.MinimumEngineVersion !== null) {
        entries["MinimumEngineVersion"] = input.MinimumEngineVersion;
    }
    if (input.ApplyMethod !== undefined && input.ApplyMethod !== null) {
        entries["ApplyMethod"] = input.ApplyMethod;
    }
    if (input.SupportedEngineModes !== undefined && input.SupportedEngineModes !== null) {
        var memberEntries = serializeAws_queryEngineModeList(input.SupportedEngineModes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SupportedEngineModes." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryParametersList = function (input, context) {
    var e_13, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_13 = __values(input), input_13_1 = input_13.next(); !input_13_1.done; input_13_1 = input_13.next()) {
            var entry = input_13_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryParameter(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Parameter." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_13_1) { e_13 = { error: e_13_1 }; }
    finally {
        try {
            if (input_13_1 && !input_13_1.done && (_a = input_13.return)) _a.call(input_13);
        }
        finally { if (e_13) throw e_13.error; }
    }
    return entries;
};
var serializeAws_queryProcessorFeature = function (input, context) {
    var entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_queryProcessorFeatureList = function (input, context) {
    var e_14, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_14 = __values(input), input_14_1 = input_14.next(); !input_14_1.done; input_14_1 = input_14.next()) {
            var entry = input_14_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryProcessorFeature(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["ProcessorFeature." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_14_1) { e_14 = { error: e_14_1 }; }
    finally {
        try {
            if (input_14_1 && !input_14_1.done && (_a = input_14.return)) _a.call(input_14);
        }
        finally { if (e_14) throw e_14.error; }
    }
    return entries;
};
var serializeAws_queryPromoteReadReplicaDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryPromoteReadReplicaMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    return entries;
};
var serializeAws_queryPurchaseReservedDBInstancesOfferingMessage = function (input, context) {
    var entries = {};
    if (input.ReservedDBInstancesOfferingId !== undefined && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.ReservedDBInstanceId !== undefined && input.ReservedDBInstanceId !== null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.DBInstanceCount !== undefined && input.DBInstanceCount !== null) {
        entries["DBInstanceCount"] = input.DBInstanceCount;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryRebootDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryRebootDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.ForceFailover !== undefined && input.ForceFailover !== null) {
        entries["ForceFailover"] = input.ForceFailover;
    }
    return entries;
};
var serializeAws_queryRegisterDBProxyTargetsRequest = function (input, context) {
    var entries = {};
    if (input.DBProxyName !== undefined && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName !== undefined && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers !== undefined && input.DBInstanceIdentifiers !== null) {
        var memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBInstanceIdentifiers." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers !== undefined && input.DBClusterIdentifiers !== null) {
        var memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBClusterIdentifiers." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryRemoveFromGlobalClusterMessage = function (input, context) {
    var entries = {};
    if (input.GlobalClusterIdentifier !== undefined && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.DbClusterIdentifier !== undefined && input.DbClusterIdentifier !== null) {
        entries["DbClusterIdentifier"] = input.DbClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryRemoveRoleFromDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName !== undefined && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
var serializeAws_queryRemoveRoleFromDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName !== undefined && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
var serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage = function (input, context) {
    var entries = {};
    if (input.SubscriptionName !== undefined && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier !== undefined && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
var serializeAws_queryRemoveTagsFromResourceMessage = function (input, context) {
    var entries = {};
    if (input.ResourceName !== undefined && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.TagKeys !== undefined && input.TagKeys !== null) {
        var memberEntries = serializeAws_queryKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagKeys." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryResetDBClusterParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.ResetAllParameters !== undefined && input.ResetAllParameters !== null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters !== undefined && input.Parameters !== null) {
        var memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Parameters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryResetDBParameterGroupMessage = function (input, context) {
    var entries = {};
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.ResetAllParameters !== undefined && input.ResetAllParameters !== null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters !== undefined && input.Parameters !== null) {
        var memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Parameters." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryRestoreDBClusterFromS3Message = function (input, context) {
    var entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        var memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AvailabilityZones." + key;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName !== undefined && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName !== undefined && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername !== undefined && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted !== undefined && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine !== undefined && input.SourceEngine !== null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion !== undefined && input.SourceEngineVersion !== null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName !== undefined && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn !== undefined && input.S3IngestionRoleArn !== null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.BacktrackWindow !== undefined && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    return entries;
};
var serializeAws_queryRestoreDBClusterFromSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        var memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AvailabilityZones." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SnapshotIdentifier !== undefined && input.SnapshotIdentifier !== null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DatabaseName !== undefined && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow !== undefined && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.EngineMode !== undefined && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration !== undefined && input.ScalingConfiguration !== null) {
        var memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ScalingConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.DBClusterInstanceClass !== undefined && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    return entries;
};
var serializeAws_queryRestoreDBClusterToPointInTimeMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RestoreType !== undefined && input.RestoreType !== null) {
        entries["RestoreType"] = input.RestoreType;
    }
    if (input.SourceDBClusterIdentifier !== undefined && input.SourceDBClusterIdentifier !== null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.RestoreToTime !== undefined && input.RestoreToTime !== null) {
        entries["RestoreToTime"] = input.RestoreToTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime !== undefined && input.UseLatestRestorableTime !== null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow !== undefined && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName !== undefined && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration !== undefined && input.ScalingConfiguration !== null) {
        var memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ScalingConfiguration." + key;
            entries[loc] = value;
        });
    }
    if (input.EngineMode !== undefined && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.DBClusterInstanceClass !== undefined && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    return entries;
};
var serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName !== undefined && input.DBName !== null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn !== undefined && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword !== undefined && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures !== undefined && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableCustomerOwnedIp !== undefined && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile !== undefined && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget !== undefined && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    return entries;
};
var serializeAws_queryRestoreDBInstanceFromS3Message = function (input, context) {
    var entries = {};
    if (input.DBName !== undefined && input.DBName !== null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage !== undefined && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername !== undefined && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword !== undefined && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups !== undefined && input.DBSecurityGroups !== null) {
        var memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DBSecurityGroups." + key;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow !== undefined && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow !== undefined && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion !== undefined && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.StorageEncrypted !== undefined && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval !== undefined && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn !== undefined && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine !== undefined && input.SourceEngine !== null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion !== undefined && input.SourceEngineVersion !== null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName !== undefined && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn !== undefined && input.S3IngestionRoleArn !== null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.EnablePerformanceInsights !== undefined && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId !== undefined && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod !== undefined && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures !== undefined && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage !== undefined && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    return entries;
};
var serializeAws_queryRestoreDBInstanceToPointInTimeMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBInstanceIdentifier !== undefined && input.SourceDBInstanceIdentifier !== null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.TargetDBInstanceIdentifier !== undefined && input.TargetDBInstanceIdentifier !== null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    if (input.RestoreTime !== undefined && input.RestoreTime !== null) {
        entries["RestoreTime"] = input.RestoreTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime !== undefined && input.UseLatestRestorableTime !== null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.DBInstanceClass !== undefined && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port !== undefined && input.Port !== null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName !== undefined && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ !== undefined && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible !== undefined && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade !== undefined && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel !== undefined && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName !== undefined && input.DBName !== null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine !== undefined && input.Engine !== null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName !== undefined && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CopyTagsToSnapshot !== undefined && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tags." + key;
            entries[loc] = value;
        });
    }
    if (input.StorageType !== undefined && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn !== undefined && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword !== undefined && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds !== undefined && input.VpcSecurityGroupIds !== null) {
        var memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcSecurityGroupIds." + key;
            entries[loc] = value;
        });
    }
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName !== undefined && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication !== undefined && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports !== undefined && input.EnableCloudwatchLogsExports !== null) {
        var memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableCloudwatchLogsExports." + key;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures !== undefined && input.ProcessorFeatures !== null) {
        var memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProcessorFeatures." + key;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures !== undefined && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName !== undefined && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection !== undefined && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.SourceDbiResourceId !== undefined && input.SourceDbiResourceId !== null) {
        entries["SourceDbiResourceId"] = input.SourceDbiResourceId;
    }
    if (input.MaxAllocatedStorage !== undefined && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.SourceDBInstanceAutomatedBackupsArn !== undefined && input.SourceDBInstanceAutomatedBackupsArn !== null) {
        entries["SourceDBInstanceAutomatedBackupsArn"] = input.SourceDBInstanceAutomatedBackupsArn;
    }
    if (input.EnableCustomerOwnedIp !== undefined && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile !== undefined && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget !== undefined && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    return entries;
};
var serializeAws_queryRevokeDBSecurityGroupIngressMessage = function (input, context) {
    var entries = {};
    if (input.DBSecurityGroupName !== undefined && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP !== undefined && input.CIDRIP !== null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName !== undefined && input.EC2SecurityGroupName !== null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId !== undefined && input.EC2SecurityGroupId !== null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId !== undefined && input.EC2SecurityGroupOwnerId !== null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
var serializeAws_queryScalingConfiguration = function (input, context) {
    var entries = {};
    if (input.MinCapacity !== undefined && input.MinCapacity !== null) {
        entries["MinCapacity"] = input.MinCapacity;
    }
    if (input.MaxCapacity !== undefined && input.MaxCapacity !== null) {
        entries["MaxCapacity"] = input.MaxCapacity;
    }
    if (input.AutoPause !== undefined && input.AutoPause !== null) {
        entries["AutoPause"] = input.AutoPause;
    }
    if (input.SecondsUntilAutoPause !== undefined && input.SecondsUntilAutoPause !== null) {
        entries["SecondsUntilAutoPause"] = input.SecondsUntilAutoPause;
    }
    if (input.TimeoutAction !== undefined && input.TimeoutAction !== null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    if (input.SecondsBeforeTimeout !== undefined && input.SecondsBeforeTimeout !== null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    return entries;
};
var serializeAws_querySourceIdsList = function (input, context) {
    var e_15, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_15 = __values(input), input_15_1 = input_15.next(); !input_15_1.done; input_15_1 = input_15.next()) {
            var entry = input_15_1.value;
            if (entry === null) {
                continue;
            }
            entries["SourceId." + counter] = entry;
            counter++;
        }
    }
    catch (e_15_1) { e_15 = { error: e_15_1 }; }
    finally {
        try {
            if (input_15_1 && !input_15_1.done && (_a = input_15.return)) _a.call(input_15);
        }
        finally { if (e_15) throw e_15.error; }
    }
    return entries;
};
var serializeAws_queryStartActivityStreamRequest = function (input, context) {
    var entries = {};
    if (input.ResourceArn !== undefined && input.ResourceArn !== null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.Mode !== undefined && input.Mode !== null) {
        entries["Mode"] = input.Mode;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.ApplyImmediately !== undefined && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.EngineNativeAuditFieldsIncluded !== undefined && input.EngineNativeAuditFieldsIncluded !== null) {
        entries["EngineNativeAuditFieldsIncluded"] = input.EngineNativeAuditFieldsIncluded;
    }
    return entries;
};
var serializeAws_queryStartDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBInstanceArn !== undefined && input.SourceDBInstanceArn !== null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    if (input.BackupRetentionPeriod !== undefined && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl !== undefined && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    return entries;
};
var serializeAws_queryStartDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
var serializeAws_queryStartExportTaskMessage = function (input, context) {
    var entries = {};
    if (input.ExportTaskIdentifier !== undefined && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn !== undefined && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.S3BucketName !== undefined && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.IamRoleArn !== undefined && input.IamRoleArn !== null) {
        entries["IamRoleArn"] = input.IamRoleArn;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.ExportOnly !== undefined && input.ExportOnly !== null) {
        var memberEntries = serializeAws_queryStringList(input.ExportOnly, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExportOnly." + key;
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_queryStopActivityStreamRequest = function (input, context) {
    var entries = {};
    if (input.ResourceArn !== undefined && input.ResourceArn !== null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.ApplyImmediately !== undefined && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
var serializeAws_queryStopDBClusterMessage = function (input, context) {
    var entries = {};
    if (input.DBClusterIdentifier !== undefined && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
var serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage = function (input, context) {
    var entries = {};
    if (input.SourceDBInstanceArn !== undefined && input.SourceDBInstanceArn !== null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    return entries;
};
var serializeAws_queryStopDBInstanceMessage = function (input, context) {
    var entries = {};
    if (input.DBInstanceIdentifier !== undefined && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier !== undefined && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
var serializeAws_queryStringList = function (input, context) {
    var e_16, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_16 = __values(input), input_16_1 = input_16.next(); !input_16_1.done; input_16_1 = input_16.next()) {
            var entry = input_16_1.value;
            if (entry === null) {
                continue;
            }
            entries["member." + counter] = entry;
            counter++;
        }
    }
    catch (e_16_1) { e_16 = { error: e_16_1 }; }
    finally {
        try {
            if (input_16_1 && !input_16_1.done && (_a = input_16.return)) _a.call(input_16);
        }
        finally { if (e_16) throw e_16.error; }
    }
    return entries;
};
var serializeAws_querySubnetIdentifierList = function (input, context) {
    var e_17, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_17 = __values(input), input_17_1 = input_17.next(); !input_17_1.done; input_17_1 = input_17.next()) {
            var entry = input_17_1.value;
            if (entry === null) {
                continue;
            }
            entries["SubnetIdentifier." + counter] = entry;
            counter++;
        }
    }
    catch (e_17_1) { e_17 = { error: e_17_1 }; }
    finally {
        try {
            if (input_17_1 && !input_17_1.done && (_a = input_17.return)) _a.call(input_17);
        }
        finally { if (e_17) throw e_17.error; }
    }
    return entries;
};
var serializeAws_queryTag = function (input, context) {
    var entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_queryTagList = function (input, context) {
    var e_18, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_18 = __values(input), input_18_1 = input_18.next(); !input_18_1.done; input_18_1 = input_18.next()) {
            var entry = input_18_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryTag(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Tag." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_18_1) { e_18 = { error: e_18_1 }; }
    finally {
        try {
            if (input_18_1 && !input_18_1.done && (_a = input_18.return)) _a.call(input_18);
        }
        finally { if (e_18) throw e_18.error; }
    }
    return entries;
};
var serializeAws_queryUserAuthConfig = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.UserName !== undefined && input.UserName !== null) {
        entries["UserName"] = input.UserName;
    }
    if (input.AuthScheme !== undefined && input.AuthScheme !== null) {
        entries["AuthScheme"] = input.AuthScheme;
    }
    if (input.SecretArn !== undefined && input.SecretArn !== null) {
        entries["SecretArn"] = input.SecretArn;
    }
    if (input.IAMAuth !== undefined && input.IAMAuth !== null) {
        entries["IAMAuth"] = input.IAMAuth;
    }
    return entries;
};
var serializeAws_queryUserAuthConfigList = function (input, context) {
    var e_19, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_19 = __values(input), input_19_1 = input_19.next(); !input_19_1.done; input_19_1 = input_19.next()) {
            var entry = input_19_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_queryUserAuthConfig(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["member." + counter + "." + key] = value;
            });
            counter++;
        }
    }
    catch (e_19_1) { e_19 = { error: e_19_1 }; }
    finally {
        try {
            if (input_19_1 && !input_19_1.done && (_a = input_19.return)) _a.call(input_19);
        }
        finally { if (e_19) throw e_19.error; }
    }
    return entries;
};
var serializeAws_queryVpcSecurityGroupIdList = function (input, context) {
    var e_20, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_20 = __values(input), input_20_1 = input_20.next(); !input_20_1.done; input_20_1 = input_20.next()) {
            var entry = input_20_1.value;
            if (entry === null) {
                continue;
            }
            entries["VpcSecurityGroupId." + counter] = entry;
            counter++;
        }
    }
    catch (e_20_1) { e_20 = { error: e_20_1 }; }
    finally {
        try {
            if (input_20_1 && !input_20_1.done && (_a = input_20.return)) _a.call(input_20);
        }
        finally { if (e_20) throw e_20.error; }
    }
    return entries;
};
var deserializeAws_queryAccountAttributesMessage = function (output, context) {
    var contents = {
        AccountQuotas: undefined,
    };
    if (output.AccountQuotas === "") {
        contents.AccountQuotas = [];
    }
    if (output["AccountQuotas"] !== undefined && output["AccountQuotas"]["AccountQuota"] !== undefined) {
        contents.AccountQuotas = deserializeAws_queryAccountQuotaList(__getArrayIfSingleItem(output["AccountQuotas"]["AccountQuota"]), context);
    }
    return contents;
};
var deserializeAws_queryAccountQuota = function (output, context) {
    var contents = {
        AccountQuotaName: undefined,
        Used: undefined,
        Max: undefined,
    };
    if (output["AccountQuotaName"] !== undefined) {
        contents.AccountQuotaName = __expectString(output["AccountQuotaName"]);
    }
    if (output["Used"] !== undefined) {
        contents.Used = __strictParseLong(output["Used"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = __strictParseLong(output["Max"]);
    }
    return contents;
};
var deserializeAws_queryAccountQuotaList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryAccountQuota(entry, context);
    });
};
var deserializeAws_queryActivityStreamModeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryAddSourceIdentifierToSubscriptionResult = function (output, context) {
    var contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
var deserializeAws_queryApplyPendingMaintenanceActionResult = function (output, context) {
    var contents = {
        ResourcePendingMaintenanceActions: undefined,
    };
    if (output["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.ResourcePendingMaintenanceActions = deserializeAws_queryResourcePendingMaintenanceActions(output["ResourcePendingMaintenanceActions"], context);
    }
    return contents;
};
var deserializeAws_queryAttributeValueList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryAuthorizationAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryAuthorizationNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryAuthorizationQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryAuthorizeDBSecurityGroupIngressResult = function (output, context) {
    var contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
var deserializeAws_queryAvailabilityZone = function (output, context) {
    var contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
var deserializeAws_queryAvailabilityZoneList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryAvailabilityZone(entry, context);
    });
};
var deserializeAws_queryAvailabilityZones = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryAvailableProcessorFeature = function (output, context) {
    var contents = {
        Name: undefined,
        DefaultValue: undefined,
        AllowedValues: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    return contents;
};
var deserializeAws_queryAvailableProcessorFeatureList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryAvailableProcessorFeature(entry, context);
    });
};
var deserializeAws_queryBackupPolicyNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCertificate = function (output, context) {
    var contents = {
        CertificateIdentifier: undefined,
        CertificateType: undefined,
        Thumbprint: undefined,
        ValidFrom: undefined,
        ValidTill: undefined,
        CertificateArn: undefined,
        CustomerOverride: undefined,
        CustomerOverrideValidTill: undefined,
    };
    if (output["CertificateIdentifier"] !== undefined) {
        contents.CertificateIdentifier = __expectString(output["CertificateIdentifier"]);
    }
    if (output["CertificateType"] !== undefined) {
        contents.CertificateType = __expectString(output["CertificateType"]);
    }
    if (output["Thumbprint"] !== undefined) {
        contents.Thumbprint = __expectString(output["Thumbprint"]);
    }
    if (output["ValidFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTime(output["ValidFrom"]));
    }
    if (output["ValidTill"] !== undefined) {
        contents.ValidTill = __expectNonNull(__parseRfc3339DateTime(output["ValidTill"]));
    }
    if (output["CertificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["CertificateArn"]);
    }
    if (output["CustomerOverride"] !== undefined) {
        contents.CustomerOverride = __parseBoolean(output["CustomerOverride"]);
    }
    if (output["CustomerOverrideValidTill"] !== undefined) {
        contents.CustomerOverrideValidTill = __expectNonNull(__parseRfc3339DateTime(output["CustomerOverrideValidTill"]));
    }
    return contents;
};
var deserializeAws_queryCertificateList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryCertificate(entry, context);
    });
};
var deserializeAws_queryCertificateMessage = function (output, context) {
    var contents = {
        Certificates: undefined,
        Marker: undefined,
    };
    if (output.Certificates === "") {
        contents.Certificates = [];
    }
    if (output["Certificates"] !== undefined && output["Certificates"]["Certificate"] !== undefined) {
        contents.Certificates = deserializeAws_queryCertificateList(__getArrayIfSingleItem(output["Certificates"]["Certificate"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryCertificateNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCharacterSet = function (output, context) {
    var contents = {
        CharacterSetName: undefined,
        CharacterSetDescription: undefined,
    };
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["CharacterSetDescription"] !== undefined) {
        contents.CharacterSetDescription = __expectString(output["CharacterSetDescription"]);
    }
    return contents;
};
var deserializeAws_queryClusterPendingModifiedValues = function (output, context) {
    var contents = {
        PendingCloudwatchLogsExports: undefined,
        DBClusterIdentifier: undefined,
        MasterUserPassword: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        EngineVersion: undefined,
    };
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = __expectString(output["MasterUserPassword"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    return contents;
};
var deserializeAws_queryConnectionPoolConfigurationInfo = function (output, context) {
    var contents = {
        MaxConnectionsPercent: undefined,
        MaxIdleConnectionsPercent: undefined,
        ConnectionBorrowTimeout: undefined,
        SessionPinningFilters: undefined,
        InitQuery: undefined,
    };
    if (output["MaxConnectionsPercent"] !== undefined) {
        contents.MaxConnectionsPercent = __strictParseInt32(output["MaxConnectionsPercent"]);
    }
    if (output["MaxIdleConnectionsPercent"] !== undefined) {
        contents.MaxIdleConnectionsPercent = __strictParseInt32(output["MaxIdleConnectionsPercent"]);
    }
    if (output["ConnectionBorrowTimeout"] !== undefined) {
        contents.ConnectionBorrowTimeout = __strictParseInt32(output["ConnectionBorrowTimeout"]);
    }
    if (output.SessionPinningFilters === "") {
        contents.SessionPinningFilters = [];
    }
    if (output["SessionPinningFilters"] !== undefined && output["SessionPinningFilters"]["member"] !== undefined) {
        contents.SessionPinningFilters = deserializeAws_queryStringList(__getArrayIfSingleItem(output["SessionPinningFilters"]["member"]), context);
    }
    if (output["InitQuery"] !== undefined) {
        contents.InitQuery = __expectString(output["InitQuery"]);
    }
    return contents;
};
var deserializeAws_queryCopyDBClusterParameterGroupResult = function (output, context) {
    var contents = {
        DBClusterParameterGroup: undefined,
    };
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCopyDBClusterSnapshotResult = function (output, context) {
    var contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryCopyDBParameterGroupResult = function (output, context) {
    var contents = {
        DBParameterGroup: undefined,
    };
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCopyDBSnapshotResult = function (output, context) {
    var contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryCopyOptionGroupResult = function (output, context) {
    var contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCreateCustomAvailabilityZoneResult = function (output, context) {
    var contents = {
        CustomAvailabilityZone: undefined,
    };
    if (output["CustomAvailabilityZone"] !== undefined) {
        contents.CustomAvailabilityZone = deserializeAws_queryCustomAvailabilityZone(output["CustomAvailabilityZone"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBClusterParameterGroupResult = function (output, context) {
    var contents = {
        DBClusterParameterGroup: undefined,
    };
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBClusterSnapshotResult = function (output, context) {
    var contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBInstanceReadReplicaResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBParameterGroupResult = function (output, context) {
    var contents = {
        DBParameterGroup: undefined,
    };
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBProxyEndpointResponse = function (output, context) {
    var contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBProxyResponse = function (output, context) {
    var contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBSecurityGroupResult = function (output, context) {
    var contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBSnapshotResult = function (output, context) {
    var contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryCreateDBSubnetGroupResult = function (output, context) {
    var contents = {
        DBSubnetGroup: undefined,
    };
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCreateEventSubscriptionResult = function (output, context) {
    var contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
var deserializeAws_queryCreateGlobalClusterResult = function (output, context) {
    var contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
var deserializeAws_queryCreateOptionGroupResult = function (output, context) {
    var contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
var deserializeAws_queryCustomAvailabilityZone = function (output, context) {
    var contents = {
        CustomAvailabilityZoneId: undefined,
        CustomAvailabilityZoneName: undefined,
        CustomAvailabilityZoneStatus: undefined,
        VpnDetails: undefined,
    };
    if (output["CustomAvailabilityZoneId"] !== undefined) {
        contents.CustomAvailabilityZoneId = __expectString(output["CustomAvailabilityZoneId"]);
    }
    if (output["CustomAvailabilityZoneName"] !== undefined) {
        contents.CustomAvailabilityZoneName = __expectString(output["CustomAvailabilityZoneName"]);
    }
    if (output["CustomAvailabilityZoneStatus"] !== undefined) {
        contents.CustomAvailabilityZoneStatus = __expectString(output["CustomAvailabilityZoneStatus"]);
    }
    if (output["VpnDetails"] !== undefined) {
        contents.VpnDetails = deserializeAws_queryVpnDetails(output["VpnDetails"], context);
    }
    return contents;
};
var deserializeAws_queryCustomAvailabilityZoneAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCustomAvailabilityZoneList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryCustomAvailabilityZone(entry, context);
    });
};
var deserializeAws_queryCustomAvailabilityZoneMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        CustomAvailabilityZones: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.CustomAvailabilityZones === "") {
        contents.CustomAvailabilityZones = [];
    }
    if (output["CustomAvailabilityZones"] !== undefined &&
        output["CustomAvailabilityZones"]["CustomAvailabilityZone"] !== undefined) {
        contents.CustomAvailabilityZones = deserializeAws_queryCustomAvailabilityZoneList(__getArrayIfSingleItem(output["CustomAvailabilityZones"]["CustomAvailabilityZone"]), context);
    }
    return contents;
};
var deserializeAws_queryCustomAvailabilityZoneNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCustomAvailabilityZoneQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCustomDBEngineVersionNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryCustomDBEngineVersionQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBCluster = function (output, context) {
    var contents = {
        AllocatedStorage: undefined,
        AvailabilityZones: undefined,
        BackupRetentionPeriod: undefined,
        CharacterSetName: undefined,
        DatabaseName: undefined,
        DBClusterIdentifier: undefined,
        DBClusterParameterGroup: undefined,
        DBSubnetGroup: undefined,
        Status: undefined,
        AutomaticRestartTime: undefined,
        PercentProgress: undefined,
        EarliestRestorableTime: undefined,
        Endpoint: undefined,
        ReaderEndpoint: undefined,
        CustomEndpoints: undefined,
        MultiAZ: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        LatestRestorableTime: undefined,
        Port: undefined,
        MasterUsername: undefined,
        DBClusterOptionGroupMemberships: undefined,
        PreferredBackupWindow: undefined,
        PreferredMaintenanceWindow: undefined,
        ReplicationSourceIdentifier: undefined,
        ReadReplicaIdentifiers: undefined,
        DBClusterMembers: undefined,
        VpcSecurityGroups: undefined,
        HostedZoneId: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DbClusterResourceId: undefined,
        DBClusterArn: undefined,
        AssociatedRoles: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        CloneGroupId: undefined,
        ClusterCreateTime: undefined,
        EarliestBacktrackTime: undefined,
        BacktrackWindow: undefined,
        BacktrackConsumedChangeRecords: undefined,
        EnabledCloudwatchLogsExports: undefined,
        Capacity: undefined,
        EngineMode: undefined,
        ScalingConfigurationInfo: undefined,
        DeletionProtection: undefined,
        HttpEndpointEnabled: undefined,
        ActivityStreamMode: undefined,
        ActivityStreamStatus: undefined,
        ActivityStreamKmsKeyId: undefined,
        ActivityStreamKinesisStreamName: undefined,
        CopyTagsToSnapshot: undefined,
        CrossAccountClone: undefined,
        DomainMemberships: undefined,
        TagList: undefined,
        GlobalWriteForwardingStatus: undefined,
        GlobalWriteForwardingRequested: undefined,
        PendingModifiedValues: undefined,
        DBClusterInstanceClass: undefined,
        StorageType: undefined,
        Iops: undefined,
        PubliclyAccessible: undefined,
        AutoMinorVersionUpgrade: undefined,
        MonitoringInterval: undefined,
        MonitoringRoleArn: undefined,
        PerformanceInsightsEnabled: undefined,
        PerformanceInsightsKMSKeyId: undefined,
        PerformanceInsightsRetentionPeriod: undefined,
    };
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    if (output["AvailabilityZones"] !== undefined && output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = __expectString(output["DatabaseName"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = __expectString(output["DBClusterParameterGroup"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = __expectString(output["DBSubnetGroup"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = __expectNonNull(__parseRfc3339DateTime(output["AutomaticRestartTime"]));
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __expectString(output["PercentProgress"]);
    }
    if (output["EarliestRestorableTime"] !== undefined) {
        contents.EarliestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestRestorableTime"]));
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["ReaderEndpoint"] !== undefined) {
        contents.ReaderEndpoint = __expectString(output["ReaderEndpoint"]);
    }
    if (output.CustomEndpoints === "") {
        contents.CustomEndpoints = [];
    }
    if (output["CustomEndpoints"] !== undefined && output["CustomEndpoints"]["member"] !== undefined) {
        contents.CustomEndpoints = deserializeAws_queryStringList(__getArrayIfSingleItem(output["CustomEndpoints"]["member"]), context);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["LatestRestorableTime"]));
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output.DBClusterOptionGroupMemberships === "") {
        contents.DBClusterOptionGroupMemberships = [];
    }
    if (output["DBClusterOptionGroupMemberships"] !== undefined &&
        output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"] !== undefined) {
        contents.DBClusterOptionGroupMemberships = deserializeAws_queryDBClusterOptionGroupMemberships(__getArrayIfSingleItem(output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"]), context);
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = __expectString(output["PreferredBackupWindow"]);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = __expectString(output["PreferredMaintenanceWindow"]);
    }
    if (output["ReplicationSourceIdentifier"] !== undefined) {
        contents.ReplicationSourceIdentifier = __expectString(output["ReplicationSourceIdentifier"]);
    }
    if (output.ReadReplicaIdentifiers === "") {
        contents.ReadReplicaIdentifiers = [];
    }
    if (output["ReadReplicaIdentifiers"] !== undefined &&
        output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"] !== undefined) {
        contents.ReadReplicaIdentifiers = deserializeAws_queryReadReplicaIdentifierList(__getArrayIfSingleItem(output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"]), context);
    }
    if (output.DBClusterMembers === "") {
        contents.DBClusterMembers = [];
    }
    if (output["DBClusterMembers"] !== undefined && output["DBClusterMembers"]["DBClusterMember"] !== undefined) {
        contents.DBClusterMembers = deserializeAws_queryDBClusterMemberList(__getArrayIfSingleItem(output["DBClusterMembers"]["DBClusterMember"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DbClusterResourceId"] !== undefined) {
        contents.DbClusterResourceId = __expectString(output["DbClusterResourceId"]);
    }
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = __expectString(output["DBClusterArn"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBClusterRole"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_queryDBClusterRoles(__getArrayIfSingleItem(output["AssociatedRoles"]["DBClusterRole"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["CloneGroupId"] !== undefined) {
        contents.CloneGroupId = __expectString(output["CloneGroupId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = __expectNonNull(__parseRfc3339DateTime(output["ClusterCreateTime"]));
    }
    if (output["EarliestBacktrackTime"] !== undefined) {
        contents.EarliestBacktrackTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestBacktrackTime"]));
    }
    if (output["BacktrackWindow"] !== undefined) {
        contents.BacktrackWindow = __strictParseLong(output["BacktrackWindow"]);
    }
    if (output["BacktrackConsumedChangeRecords"] !== undefined) {
        contents.BacktrackConsumedChangeRecords = __strictParseLong(output["BacktrackConsumedChangeRecords"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output["Capacity"] !== undefined) {
        contents.Capacity = __strictParseInt32(output["Capacity"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = __expectString(output["EngineMode"]);
    }
    if (output["ScalingConfigurationInfo"] !== undefined) {
        contents.ScalingConfigurationInfo = deserializeAws_queryScalingConfigurationInfo(output["ScalingConfigurationInfo"], context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output["HttpEndpointEnabled"] !== undefined) {
        contents.HttpEndpointEnabled = __parseBoolean(output["HttpEndpointEnabled"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = __expectString(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = __expectString(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = __expectString(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = __expectString(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = __parseBoolean(output["CopyTagsToSnapshot"]);
    }
    if (output["CrossAccountClone"] !== undefined) {
        contents.CrossAccountClone = __parseBoolean(output["CrossAccountClone"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    if (output["DomainMemberships"] !== undefined && output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList(__getArrayIfSingleItem(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = __expectString(output["GlobalWriteForwardingStatus"]);
    }
    if (output["GlobalWriteForwardingRequested"] !== undefined) {
        contents.GlobalWriteForwardingRequested = __parseBoolean(output["GlobalWriteForwardingRequested"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = deserializeAws_queryClusterPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["DBClusterInstanceClass"] !== undefined) {
        contents.DBClusterInstanceClass = __expectString(output["DBClusterInstanceClass"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = __parseBoolean(output["PubliclyAccessible"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = __parseBoolean(output["AutoMinorVersionUpgrade"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = __strictParseInt32(output["MonitoringInterval"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = __expectString(output["MonitoringRoleArn"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = __parseBoolean(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = __expectString(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = __strictParseInt32(output["PerformanceInsightsRetentionPeriod"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterBacktrack = function (output, context) {
    var contents = {
        DBClusterIdentifier: undefined,
        BacktrackIdentifier: undefined,
        BacktrackTo: undefined,
        BacktrackedFrom: undefined,
        BacktrackRequestCreationTime: undefined,
        Status: undefined,
    };
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["BacktrackIdentifier"] !== undefined) {
        contents.BacktrackIdentifier = __expectString(output["BacktrackIdentifier"]);
    }
    if (output["BacktrackTo"] !== undefined) {
        contents.BacktrackTo = __expectNonNull(__parseRfc3339DateTime(output["BacktrackTo"]));
    }
    if (output["BacktrackedFrom"] !== undefined) {
        contents.BacktrackedFrom = __expectNonNull(__parseRfc3339DateTime(output["BacktrackedFrom"]));
    }
    if (output["BacktrackRequestCreationTime"] !== undefined) {
        contents.BacktrackRequestCreationTime = __expectNonNull(__parseRfc3339DateTime(output["BacktrackRequestCreationTime"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterBacktrackList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterBacktrack(entry, context);
    });
};
var deserializeAws_queryDBClusterBacktrackMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBClusterBacktracks: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterBacktracks === "") {
        contents.DBClusterBacktracks = [];
    }
    if (output["DBClusterBacktracks"] !== undefined &&
        output["DBClusterBacktracks"]["DBClusterBacktrack"] !== undefined) {
        contents.DBClusterBacktracks = deserializeAws_queryDBClusterBacktrackList(__getArrayIfSingleItem(output["DBClusterBacktracks"]["DBClusterBacktrack"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterBacktrackNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterCapacityInfo = function (output, context) {
    var contents = {
        DBClusterIdentifier: undefined,
        PendingCapacity: undefined,
        CurrentCapacity: undefined,
        SecondsBeforeTimeout: undefined,
        TimeoutAction: undefined,
    };
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["PendingCapacity"] !== undefined) {
        contents.PendingCapacity = __strictParseInt32(output["PendingCapacity"]);
    }
    if (output["CurrentCapacity"] !== undefined) {
        contents.CurrentCapacity = __strictParseInt32(output["CurrentCapacity"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = __strictParseInt32(output["SecondsBeforeTimeout"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = __expectString(output["TimeoutAction"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterEndpoint = function (output, context) {
    var contents = {
        DBClusterEndpointIdentifier: undefined,
        DBClusterIdentifier: undefined,
        DBClusterEndpointResourceIdentifier: undefined,
        Endpoint: undefined,
        Status: undefined,
        EndpointType: undefined,
        CustomEndpointType: undefined,
        StaticMembers: undefined,
        ExcludedMembers: undefined,
        DBClusterEndpointArn: undefined,
    };
    if (output["DBClusterEndpointIdentifier"] !== undefined) {
        contents.DBClusterEndpointIdentifier = __expectString(output["DBClusterEndpointIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterEndpointResourceIdentifier"] !== undefined) {
        contents.DBClusterEndpointResourceIdentifier = __expectString(output["DBClusterEndpointResourceIdentifier"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EndpointType"] !== undefined) {
        contents.EndpointType = __expectString(output["EndpointType"]);
    }
    if (output["CustomEndpointType"] !== undefined) {
        contents.CustomEndpointType = __expectString(output["CustomEndpointType"]);
    }
    if (output.StaticMembers === "") {
        contents.StaticMembers = [];
    }
    if (output["StaticMembers"] !== undefined && output["StaticMembers"]["member"] !== undefined) {
        contents.StaticMembers = deserializeAws_queryStringList(__getArrayIfSingleItem(output["StaticMembers"]["member"]), context);
    }
    if (output.ExcludedMembers === "") {
        contents.ExcludedMembers = [];
    }
    if (output["ExcludedMembers"] !== undefined && output["ExcludedMembers"]["member"] !== undefined) {
        contents.ExcludedMembers = deserializeAws_queryStringList(__getArrayIfSingleItem(output["ExcludedMembers"]["member"]), context);
    }
    if (output["DBClusterEndpointArn"] !== undefined) {
        contents.DBClusterEndpointArn = __expectString(output["DBClusterEndpointArn"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterEndpointAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterEndpointList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterEndpoint(entry, context);
    });
};
var deserializeAws_queryDBClusterEndpointMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBClusterEndpoints: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterEndpoints === "") {
        contents.DBClusterEndpoints = [];
    }
    if (output["DBClusterEndpoints"] !== undefined &&
        output["DBClusterEndpoints"]["DBClusterEndpointList"] !== undefined) {
        contents.DBClusterEndpoints = deserializeAws_queryDBClusterEndpointList(__getArrayIfSingleItem(output["DBClusterEndpoints"]["DBClusterEndpointList"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterEndpointNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterEndpointQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBCluster(entry, context);
    });
};
var deserializeAws_queryDBClusterMember = function (output, context) {
    var contents = {
        DBInstanceIdentifier: undefined,
        IsClusterWriter: undefined,
        DBClusterParameterGroupStatus: undefined,
        PromotionTier: undefined,
    };
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["IsClusterWriter"] !== undefined) {
        contents.IsClusterWriter = __parseBoolean(output["IsClusterWriter"]);
    }
    if (output["DBClusterParameterGroupStatus"] !== undefined) {
        contents.DBClusterParameterGroupStatus = __expectString(output["DBClusterParameterGroupStatus"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = __strictParseInt32(output["PromotionTier"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterMemberList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterMember(entry, context);
    });
};
var deserializeAws_queryDBClusterMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBClusters: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusters === "") {
        contents.DBClusters = [];
    }
    if (output["DBClusters"] !== undefined && output["DBClusters"]["DBCluster"] !== undefined) {
        contents.DBClusters = deserializeAws_queryDBClusterList(__getArrayIfSingleItem(output["DBClusters"]["DBCluster"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterOptionGroupMemberships = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterOptionGroupStatus(entry, context);
    });
};
var deserializeAws_queryDBClusterOptionGroupStatus = function (output, context) {
    var contents = {
        DBClusterOptionGroupName: undefined,
        Status: undefined,
    };
    if (output["DBClusterOptionGroupName"] !== undefined) {
        contents.DBClusterOptionGroupName = __expectString(output["DBClusterOptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterParameterGroup = function (output, context) {
    var contents = {
        DBClusterParameterGroupName: undefined,
        DBParameterGroupFamily: undefined,
        Description: undefined,
        DBClusterParameterGroupArn: undefined,
    };
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = __expectString(output["DBClusterParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DBClusterParameterGroupArn"] !== undefined) {
        contents.DBClusterParameterGroupArn = __expectString(output["DBClusterParameterGroupArn"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterParameterGroupDetails = function (output, context) {
    var contents = {
        Parameters: undefined,
        Marker: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterParameterGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterParameterGroup(entry, context);
    });
};
var deserializeAws_queryDBClusterParameterGroupNameMessage = function (output, context) {
    var contents = {
        DBClusterParameterGroupName: undefined,
    };
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = __expectString(output["DBClusterParameterGroupName"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterParameterGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterParameterGroupsMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBClusterParameterGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterParameterGroups === "") {
        contents.DBClusterParameterGroups = [];
    }
    if (output["DBClusterParameterGroups"] !== undefined &&
        output["DBClusterParameterGroups"]["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroups = deserializeAws_queryDBClusterParameterGroupList(__getArrayIfSingleItem(output["DBClusterParameterGroups"]["DBClusterParameterGroup"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterRole = function (output, context) {
    var contents = {
        RoleArn: undefined,
        Status: undefined,
        FeatureName: undefined,
    };
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = __expectString(output["FeatureName"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterRoleAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterRoleNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterRoleQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterRoles = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterRole(entry, context);
    });
};
var deserializeAws_queryDBClusterSnapshot = function (output, context) {
    var contents = {
        AvailabilityZones: undefined,
        DBClusterSnapshotIdentifier: undefined,
        DBClusterIdentifier: undefined,
        SnapshotCreateTime: undefined,
        Engine: undefined,
        EngineMode: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        VpcId: undefined,
        ClusterCreateTime: undefined,
        MasterUsername: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        SnapshotType: undefined,
        PercentProgress: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DBClusterSnapshotArn: undefined,
        SourceDBClusterSnapshotArn: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        TagList: undefined,
    };
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    if (output["AvailabilityZones"] !== undefined && output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = __expectString(output["DBClusterSnapshotIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = __expectString(output["EngineMode"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = __expectNonNull(__parseRfc3339DateTime(output["ClusterCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = __expectString(output["SnapshotType"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DBClusterSnapshotArn"] !== undefined) {
        contents.DBClusterSnapshotArn = __expectString(output["DBClusterSnapshotArn"]);
    }
    if (output["SourceDBClusterSnapshotArn"] !== undefined) {
        contents.SourceDBClusterSnapshotArn = __expectString(output["SourceDBClusterSnapshotArn"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterSnapshotAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBClusterSnapshotAttribute = function (output, context) {
    var contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList(__getArrayIfSingleItem(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterSnapshotAttributeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterSnapshotAttribute(entry, context);
    });
};
var deserializeAws_queryDBClusterSnapshotAttributesResult = function (output, context) {
    var contents = {
        DBClusterSnapshotIdentifier: undefined,
        DBClusterSnapshotAttributes: undefined,
    };
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = __expectString(output["DBClusterSnapshotIdentifier"]);
    }
    if (output.DBClusterSnapshotAttributes === "") {
        contents.DBClusterSnapshotAttributes = [];
    }
    if (output["DBClusterSnapshotAttributes"] !== undefined &&
        output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"] !== undefined) {
        contents.DBClusterSnapshotAttributes = deserializeAws_queryDBClusterSnapshotAttributeList(__getArrayIfSingleItem(output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterSnapshotList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBClusterSnapshot(entry, context);
    });
};
var deserializeAws_queryDBClusterSnapshotMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBClusterSnapshots: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterSnapshots === "") {
        contents.DBClusterSnapshots = [];
    }
    if (output["DBClusterSnapshots"] !== undefined && output["DBClusterSnapshots"]["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshots = deserializeAws_queryDBClusterSnapshotList(__getArrayIfSingleItem(output["DBClusterSnapshots"]["DBClusterSnapshot"]), context);
    }
    return contents;
};
var deserializeAws_queryDBClusterSnapshotNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBEngineVersion = function (output, context) {
    var contents = {
        Engine: undefined,
        EngineVersion: undefined,
        DBParameterGroupFamily: undefined,
        DBEngineDescription: undefined,
        DBEngineVersionDescription: undefined,
        DefaultCharacterSet: undefined,
        SupportedCharacterSets: undefined,
        SupportedNcharCharacterSets: undefined,
        ValidUpgradeTarget: undefined,
        SupportedTimezones: undefined,
        ExportableLogTypes: undefined,
        SupportsLogExportsToCloudwatchLogs: undefined,
        SupportsReadReplica: undefined,
        SupportedEngineModes: undefined,
        SupportedFeatureNames: undefined,
        Status: undefined,
        SupportsParallelQuery: undefined,
        SupportsGlobalDatabases: undefined,
        MajorEngineVersion: undefined,
        DatabaseInstallationFilesS3BucketName: undefined,
        DatabaseInstallationFilesS3Prefix: undefined,
        DBEngineVersionArn: undefined,
        KMSKeyId: undefined,
        CreateTime: undefined,
        TagList: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["DBEngineDescription"] !== undefined) {
        contents.DBEngineDescription = __expectString(output["DBEngineDescription"]);
    }
    if (output["DBEngineVersionDescription"] !== undefined) {
        contents.DBEngineVersionDescription = __expectString(output["DBEngineVersionDescription"]);
    }
    if (output["DefaultCharacterSet"] !== undefined) {
        contents.DefaultCharacterSet = deserializeAws_queryCharacterSet(output["DefaultCharacterSet"], context);
    }
    if (output.SupportedCharacterSets === "") {
        contents.SupportedCharacterSets = [];
    }
    if (output["SupportedCharacterSets"] !== undefined &&
        output["SupportedCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedCharacterSets = deserializeAws_querySupportedCharacterSetsList(__getArrayIfSingleItem(output["SupportedCharacterSets"]["CharacterSet"]), context);
    }
    if (output.SupportedNcharCharacterSets === "") {
        contents.SupportedNcharCharacterSets = [];
    }
    if (output["SupportedNcharCharacterSets"] !== undefined &&
        output["SupportedNcharCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedNcharCharacterSets = deserializeAws_querySupportedCharacterSetsList(__getArrayIfSingleItem(output["SupportedNcharCharacterSets"]["CharacterSet"]), context);
    }
    if (output.ValidUpgradeTarget === "") {
        contents.ValidUpgradeTarget = [];
    }
    if (output["ValidUpgradeTarget"] !== undefined && output["ValidUpgradeTarget"]["UpgradeTarget"] !== undefined) {
        contents.ValidUpgradeTarget = deserializeAws_queryValidUpgradeTargetList(__getArrayIfSingleItem(output["ValidUpgradeTarget"]["UpgradeTarget"]), context);
    }
    if (output.SupportedTimezones === "") {
        contents.SupportedTimezones = [];
    }
    if (output["SupportedTimezones"] !== undefined && output["SupportedTimezones"]["Timezone"] !== undefined) {
        contents.SupportedTimezones = deserializeAws_querySupportedTimezonesList(__getArrayIfSingleItem(output["SupportedTimezones"]["Timezone"]), context);
    }
    if (output.ExportableLogTypes === "") {
        contents.ExportableLogTypes = [];
    }
    if (output["ExportableLogTypes"] !== undefined && output["ExportableLogTypes"]["member"] !== undefined) {
        contents.ExportableLogTypes = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["ExportableLogTypes"]["member"]), context);
    }
    if (output["SupportsLogExportsToCloudwatchLogs"] !== undefined) {
        contents.SupportsLogExportsToCloudwatchLogs = __parseBoolean(output["SupportsLogExportsToCloudwatchLogs"]);
    }
    if (output["SupportsReadReplica"] !== undefined) {
        contents.SupportsReadReplica = __parseBoolean(output["SupportsReadReplica"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output.SupportedFeatureNames === "") {
        contents.SupportedFeatureNames = [];
    }
    if (output["SupportedFeatureNames"] !== undefined && output["SupportedFeatureNames"]["member"] !== undefined) {
        contents.SupportedFeatureNames = deserializeAws_queryFeatureNameList(__getArrayIfSingleItem(output["SupportedFeatureNames"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = __parseBoolean(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output["DatabaseInstallationFilesS3BucketName"] !== undefined) {
        contents.DatabaseInstallationFilesS3BucketName = __expectString(output["DatabaseInstallationFilesS3BucketName"]);
    }
    if (output["DatabaseInstallationFilesS3Prefix"] !== undefined) {
        contents.DatabaseInstallationFilesS3Prefix = __expectString(output["DatabaseInstallationFilesS3Prefix"]);
    }
    if (output["DBEngineVersionArn"] !== undefined) {
        contents.DBEngineVersionArn = __expectString(output["DBEngineVersionArn"]);
    }
    if (output["KMSKeyId"] !== undefined) {
        contents.KMSKeyId = __expectString(output["KMSKeyId"]);
    }
    if (output["CreateTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["CreateTime"]));
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    return contents;
};
var deserializeAws_queryDBEngineVersionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBEngineVersion(entry, context);
    });
};
var deserializeAws_queryDBEngineVersionMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBEngineVersions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBEngineVersions === "") {
        contents.DBEngineVersions = [];
    }
    if (output["DBEngineVersions"] !== undefined && output["DBEngineVersions"]["DBEngineVersion"] !== undefined) {
        contents.DBEngineVersions = deserializeAws_queryDBEngineVersionList(__getArrayIfSingleItem(output["DBEngineVersions"]["DBEngineVersion"]), context);
    }
    return contents;
};
var deserializeAws_queryDBInstance = function (output, context) {
    var contents = {
        DBInstanceIdentifier: undefined,
        DBInstanceClass: undefined,
        Engine: undefined,
        DBInstanceStatus: undefined,
        AutomaticRestartTime: undefined,
        MasterUsername: undefined,
        DBName: undefined,
        Endpoint: undefined,
        AllocatedStorage: undefined,
        InstanceCreateTime: undefined,
        PreferredBackupWindow: undefined,
        BackupRetentionPeriod: undefined,
        DBSecurityGroups: undefined,
        VpcSecurityGroups: undefined,
        DBParameterGroups: undefined,
        AvailabilityZone: undefined,
        DBSubnetGroup: undefined,
        PreferredMaintenanceWindow: undefined,
        PendingModifiedValues: undefined,
        LatestRestorableTime: undefined,
        MultiAZ: undefined,
        EngineVersion: undefined,
        AutoMinorVersionUpgrade: undefined,
        ReadReplicaSourceDBInstanceIdentifier: undefined,
        ReadReplicaDBInstanceIdentifiers: undefined,
        ReadReplicaDBClusterIdentifiers: undefined,
        ReplicaMode: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        OptionGroupMemberships: undefined,
        CharacterSetName: undefined,
        NcharCharacterSetName: undefined,
        SecondaryAvailabilityZone: undefined,
        PubliclyAccessible: undefined,
        StatusInfos: undefined,
        StorageType: undefined,
        TdeCredentialArn: undefined,
        DbInstancePort: undefined,
        DBClusterIdentifier: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DbiResourceId: undefined,
        CACertificateIdentifier: undefined,
        DomainMemberships: undefined,
        CopyTagsToSnapshot: undefined,
        MonitoringInterval: undefined,
        EnhancedMonitoringResourceArn: undefined,
        MonitoringRoleArn: undefined,
        PromotionTier: undefined,
        DBInstanceArn: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        PerformanceInsightsEnabled: undefined,
        PerformanceInsightsKMSKeyId: undefined,
        PerformanceInsightsRetentionPeriod: undefined,
        EnabledCloudwatchLogsExports: undefined,
        ProcessorFeatures: undefined,
        DeletionProtection: undefined,
        AssociatedRoles: undefined,
        ListenerEndpoint: undefined,
        MaxAllocatedStorage: undefined,
        TagList: undefined,
        DBInstanceAutomatedBackupsReplications: undefined,
        CustomerOwnedIpEnabled: undefined,
        AwsBackupRecoveryPointArn: undefined,
        ActivityStreamStatus: undefined,
        ActivityStreamKmsKeyId: undefined,
        ActivityStreamKinesisStreamName: undefined,
        ActivityStreamMode: undefined,
        ActivityStreamEngineNativeAuditFieldsIncluded: undefined,
        AutomationMode: undefined,
        ResumeFullAutomationModeTime: undefined,
        CustomIamInstanceProfile: undefined,
        BackupTarget: undefined,
    };
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["DBInstanceStatus"] !== undefined) {
        contents.DBInstanceStatus = __expectString(output["DBInstanceStatus"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = __expectNonNull(__parseRfc3339DateTime(output["AutomaticRestartTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["DBName"] !== undefined) {
        contents.DBName = __expectString(output["DBName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = deserializeAws_queryEndpoint(output["Endpoint"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = __expectString(output["PreferredBackupWindow"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroupMembershipList(__getArrayIfSingleItem(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    if (output["DBParameterGroups"] !== undefined && output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupStatusList(__getArrayIfSingleItem(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = __expectString(output["PreferredMaintenanceWindow"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = deserializeAws_queryPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["LatestRestorableTime"]));
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = __parseBoolean(output["AutoMinorVersionUpgrade"]);
    }
    if (output["ReadReplicaSourceDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaSourceDBInstanceIdentifier = __expectString(output["ReadReplicaSourceDBInstanceIdentifier"]);
    }
    if (output.ReadReplicaDBInstanceIdentifiers === "") {
        contents.ReadReplicaDBInstanceIdentifiers = [];
    }
    if (output["ReadReplicaDBInstanceIdentifiers"] !== undefined &&
        output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaDBInstanceIdentifiers = deserializeAws_queryReadReplicaDBInstanceIdentifierList(__getArrayIfSingleItem(output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"]), context);
    }
    if (output.ReadReplicaDBClusterIdentifiers === "") {
        contents.ReadReplicaDBClusterIdentifiers = [];
    }
    if (output["ReadReplicaDBClusterIdentifiers"] !== undefined &&
        output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"] !== undefined) {
        contents.ReadReplicaDBClusterIdentifiers = deserializeAws_queryReadReplicaDBClusterIdentifierList(__getArrayIfSingleItem(output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"]), context);
    }
    if (output["ReplicaMode"] !== undefined) {
        contents.ReplicaMode = __expectString(output["ReplicaMode"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output.OptionGroupMemberships === "") {
        contents.OptionGroupMemberships = [];
    }
    if (output["OptionGroupMemberships"] !== undefined &&
        output["OptionGroupMemberships"]["OptionGroupMembership"] !== undefined) {
        contents.OptionGroupMemberships = deserializeAws_queryOptionGroupMembershipList(__getArrayIfSingleItem(output["OptionGroupMemberships"]["OptionGroupMembership"]), context);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["NcharCharacterSetName"] !== undefined) {
        contents.NcharCharacterSetName = __expectString(output["NcharCharacterSetName"]);
    }
    if (output["SecondaryAvailabilityZone"] !== undefined) {
        contents.SecondaryAvailabilityZone = __expectString(output["SecondaryAvailabilityZone"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = __parseBoolean(output["PubliclyAccessible"]);
    }
    if (output.StatusInfos === "") {
        contents.StatusInfos = [];
    }
    if (output["StatusInfos"] !== undefined && output["StatusInfos"]["DBInstanceStatusInfo"] !== undefined) {
        contents.StatusInfos = deserializeAws_queryDBInstanceStatusInfoList(__getArrayIfSingleItem(output["StatusInfos"]["DBInstanceStatusInfo"]), context);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["DbInstancePort"] !== undefined) {
        contents.DbInstancePort = __strictParseInt32(output["DbInstancePort"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = __expectString(output["CACertificateIdentifier"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    if (output["DomainMemberships"] !== undefined && output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList(__getArrayIfSingleItem(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = __parseBoolean(output["CopyTagsToSnapshot"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = __strictParseInt32(output["MonitoringInterval"]);
    }
    if (output["EnhancedMonitoringResourceArn"] !== undefined) {
        contents.EnhancedMonitoringResourceArn = __expectString(output["EnhancedMonitoringResourceArn"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = __expectString(output["MonitoringRoleArn"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = __strictParseInt32(output["PromotionTier"]);
    }
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = __expectString(output["DBInstanceArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = __parseBoolean(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = __expectString(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = __strictParseInt32(output["PerformanceInsightsRetentionPeriod"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    if (output["ProcessorFeatures"] !== undefined && output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBInstanceRole"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_queryDBInstanceRoles(__getArrayIfSingleItem(output["AssociatedRoles"]["DBInstanceRole"]), context);
    }
    if (output["ListenerEndpoint"] !== undefined) {
        contents.ListenerEndpoint = deserializeAws_queryEndpoint(output["ListenerEndpoint"], context);
    }
    if (output["MaxAllocatedStorage"] !== undefined) {
        contents.MaxAllocatedStorage = __strictParseInt32(output["MaxAllocatedStorage"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["CustomerOwnedIpEnabled"] !== undefined) {
        contents.CustomerOwnedIpEnabled = __parseBoolean(output["CustomerOwnedIpEnabled"]);
    }
    if (output["AwsBackupRecoveryPointArn"] !== undefined) {
        contents.AwsBackupRecoveryPointArn = __expectString(output["AwsBackupRecoveryPointArn"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = __expectString(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = __expectString(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = __expectString(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = __expectString(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamEngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.ActivityStreamEngineNativeAuditFieldsIncluded = __parseBoolean(output["ActivityStreamEngineNativeAuditFieldsIncluded"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = __expectString(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = __expectNonNull(__parseRfc3339DateTime(output["ResumeFullAutomationModeTime"]));
    }
    if (output["CustomIamInstanceProfile"] !== undefined) {
        contents.CustomIamInstanceProfile = __expectString(output["CustomIamInstanceProfile"]);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = __expectString(output["BackupTarget"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackup = function (output, context) {
    var contents = {
        DBInstanceArn: undefined,
        DbiResourceId: undefined,
        Region: undefined,
        DBInstanceIdentifier: undefined,
        RestoreWindow: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        AvailabilityZone: undefined,
        VpcId: undefined,
        InstanceCreateTime: undefined,
        MasterUsername: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        OptionGroupName: undefined,
        TdeCredentialArn: undefined,
        Encrypted: undefined,
        StorageType: undefined,
        KmsKeyId: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        BackupRetentionPeriod: undefined,
        DBInstanceAutomatedBackupsArn: undefined,
        DBInstanceAutomatedBackupsReplications: undefined,
        BackupTarget: undefined,
    };
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = __expectString(output["DBInstanceArn"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["RestoreWindow"] !== undefined) {
        contents.RestoreWindow = deserializeAws_queryRestoreWindow(output["RestoreWindow"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["Encrypted"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = __expectString(output["DBInstanceAutomatedBackupsArn"]);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = __expectString(output["BackupTarget"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBInstanceAutomatedBackup(entry, context);
    });
};
var deserializeAws_queryDBInstanceAutomatedBackupMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBInstanceAutomatedBackups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBInstanceAutomatedBackups === "") {
        contents.DBInstanceAutomatedBackups = [];
    }
    if (output["DBInstanceAutomatedBackups"] !== undefined &&
        output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackups = deserializeAws_queryDBInstanceAutomatedBackupList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"]), context);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackupsReplication = function (output, context) {
    var contents = {
        DBInstanceAutomatedBackupsArn: undefined,
    };
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = __expectString(output["DBInstanceAutomatedBackupsArn"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceAutomatedBackupsReplicationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBInstanceAutomatedBackupsReplication(entry, context);
    });
};
var deserializeAws_queryDBInstanceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBInstance(entry, context);
    });
};
var deserializeAws_queryDBInstanceMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBInstances: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBInstances === "") {
        contents.DBInstances = [];
    }
    if (output["DBInstances"] !== undefined && output["DBInstances"]["DBInstance"] !== undefined) {
        contents.DBInstances = deserializeAws_queryDBInstanceList(__getArrayIfSingleItem(output["DBInstances"]["DBInstance"]), context);
    }
    return contents;
};
var deserializeAws_queryDBInstanceNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceRole = function (output, context) {
    var contents = {
        RoleArn: undefined,
        FeatureName: undefined,
        Status: undefined,
    };
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = __expectString(output["FeatureName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceRoleAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceRoleNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceRoleQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceRoles = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBInstanceRole(entry, context);
    });
};
var deserializeAws_queryDBInstanceStatusInfo = function (output, context) {
    var contents = {
        StatusType: undefined,
        Normal: undefined,
        Status: undefined,
        Message: undefined,
    };
    if (output["StatusType"] !== undefined) {
        contents.StatusType = __expectString(output["StatusType"]);
    }
    if (output["Normal"] !== undefined) {
        contents.Normal = __parseBoolean(output["Normal"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
var deserializeAws_queryDBInstanceStatusInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBInstanceStatusInfo(entry, context);
    });
};
var deserializeAws_queryDBLogFileNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroup = function (output, context) {
    var contents = {
        DBParameterGroupName: undefined,
        DBParameterGroupFamily: undefined,
        Description: undefined,
        DBParameterGroupArn: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DBParameterGroupArn"] !== undefined) {
        contents.DBParameterGroupArn = __expectString(output["DBParameterGroupArn"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupDetails = function (output, context) {
    var contents = {
        Parameters: undefined,
        Marker: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBParameterGroup(entry, context);
    });
};
var deserializeAws_queryDBParameterGroupNameMessage = function (output, context) {
    var contents = {
        DBParameterGroupName: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupsMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBParameterGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    if (output["DBParameterGroups"] !== undefined && output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupList(__getArrayIfSingleItem(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupStatus = function (output, context) {
    var contents = {
        DBParameterGroupName: undefined,
        ParameterApplyStatus: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    if (output["ParameterApplyStatus"] !== undefined) {
        contents.ParameterApplyStatus = __expectString(output["ParameterApplyStatus"]);
    }
    return contents;
};
var deserializeAws_queryDBParameterGroupStatusList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBParameterGroupStatus(entry, context);
    });
};
var deserializeAws_queryDBProxy = function (output, context) {
    var contents = {
        DBProxyName: undefined,
        DBProxyArn: undefined,
        Status: undefined,
        EngineFamily: undefined,
        VpcId: undefined,
        VpcSecurityGroupIds: undefined,
        VpcSubnetIds: undefined,
        Auth: undefined,
        RoleArn: undefined,
        Endpoint: undefined,
        RequireTLS: undefined,
        IdleClientTimeout: undefined,
        DebugLogging: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
    };
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["DBProxyArn"] !== undefined) {
        contents.DBProxyArn = __expectString(output["DBProxyArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EngineFamily"] !== undefined) {
        contents.EngineFamily = __expectString(output["EngineFamily"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSubnetIds"]["member"]), context);
    }
    if (output.Auth === "") {
        contents.Auth = [];
    }
    if (output["Auth"] !== undefined && output["Auth"]["member"] !== undefined) {
        contents.Auth = deserializeAws_queryUserAuthConfigInfoList(__getArrayIfSingleItem(output["Auth"]["member"]), context);
    }
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["RequireTLS"] !== undefined) {
        contents.RequireTLS = __parseBoolean(output["RequireTLS"]);
    }
    if (output["IdleClientTimeout"] !== undefined) {
        contents.IdleClientTimeout = __strictParseInt32(output["IdleClientTimeout"]);
    }
    if (output["DebugLogging"] !== undefined) {
        contents.DebugLogging = __parseBoolean(output["DebugLogging"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTime(output["UpdatedDate"]));
    }
    return contents;
};
var deserializeAws_queryDBProxyAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyEndpoint = function (output, context) {
    var contents = {
        DBProxyEndpointName: undefined,
        DBProxyEndpointArn: undefined,
        DBProxyName: undefined,
        Status: undefined,
        VpcId: undefined,
        VpcSecurityGroupIds: undefined,
        VpcSubnetIds: undefined,
        Endpoint: undefined,
        CreatedDate: undefined,
        TargetRole: undefined,
        IsDefault: undefined,
    };
    if (output["DBProxyEndpointName"] !== undefined) {
        contents.DBProxyEndpointName = __expectString(output["DBProxyEndpointName"]);
    }
    if (output["DBProxyEndpointArn"] !== undefined) {
        contents.DBProxyEndpointArn = __expectString(output["DBProxyEndpointArn"]);
    }
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSubnetIds"]["member"]), context);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["TargetRole"] !== undefined) {
        contents.TargetRole = __expectString(output["TargetRole"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyEndpointAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyEndpointList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBProxyEndpoint(entry, context);
    });
};
var deserializeAws_queryDBProxyEndpointNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyEndpointQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBProxy(entry, context);
    });
};
var deserializeAws_queryDBProxyNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyTarget = function (output, context) {
    var contents = {
        TargetArn: undefined,
        Endpoint: undefined,
        TrackedClusterId: undefined,
        RdsResourceId: undefined,
        Port: undefined,
        Type: undefined,
        Role: undefined,
        TargetHealth: undefined,
    };
    if (output["TargetArn"] !== undefined) {
        contents.TargetArn = __expectString(output["TargetArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["TrackedClusterId"] !== undefined) {
        contents.TrackedClusterId = __expectString(output["TrackedClusterId"]);
    }
    if (output["RdsResourceId"] !== undefined) {
        contents.RdsResourceId = __expectString(output["RdsResourceId"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Role"] !== undefined) {
        contents.Role = __expectString(output["Role"]);
    }
    if (output["TargetHealth"] !== undefined) {
        contents.TargetHealth = deserializeAws_queryTargetHealth(output["TargetHealth"], context);
    }
    return contents;
};
var deserializeAws_queryDBProxyTargetAlreadyRegisteredFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyTargetGroup = function (output, context) {
    var contents = {
        DBProxyName: undefined,
        TargetGroupName: undefined,
        TargetGroupArn: undefined,
        IsDefault: undefined,
        Status: undefined,
        ConnectionPoolConfig: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
    };
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["TargetGroupName"] !== undefined) {
        contents.TargetGroupName = __expectString(output["TargetGroupName"]);
    }
    if (output["TargetGroupArn"] !== undefined) {
        contents.TargetGroupArn = __expectString(output["TargetGroupArn"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["ConnectionPoolConfig"] !== undefined) {
        contents.ConnectionPoolConfig = deserializeAws_queryConnectionPoolConfigurationInfo(output["ConnectionPoolConfig"], context);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTime(output["UpdatedDate"]));
    }
    return contents;
};
var deserializeAws_queryDBProxyTargetGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBProxyTargetNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroup = function (output, context) {
    var contents = {
        OwnerId: undefined,
        DBSecurityGroupName: undefined,
        DBSecurityGroupDescription: undefined,
        VpcId: undefined,
        EC2SecurityGroups: undefined,
        IPRanges: undefined,
        DBSecurityGroupArn: undefined,
    };
    if (output["OwnerId"] !== undefined) {
        contents.OwnerId = __expectString(output["OwnerId"]);
    }
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = __expectString(output["DBSecurityGroupName"]);
    }
    if (output["DBSecurityGroupDescription"] !== undefined) {
        contents.DBSecurityGroupDescription = __expectString(output["DBSecurityGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
    }
    if (output["EC2SecurityGroups"] !== undefined && output["EC2SecurityGroups"]["EC2SecurityGroup"] !== undefined) {
        contents.EC2SecurityGroups = deserializeAws_queryEC2SecurityGroupList(__getArrayIfSingleItem(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
    }
    if (output.IPRanges === "") {
        contents.IPRanges = [];
    }
    if (output["IPRanges"] !== undefined && output["IPRanges"]["IPRange"] !== undefined) {
        contents.IPRanges = deserializeAws_queryIPRangeList(__getArrayIfSingleItem(output["IPRanges"]["IPRange"]), context);
    }
    if (output["DBSecurityGroupArn"] !== undefined) {
        contents.DBSecurityGroupArn = __expectString(output["DBSecurityGroupArn"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupMembership = function (output, context) {
    var contents = {
        DBSecurityGroupName: undefined,
        Status: undefined,
    };
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = __expectString(output["DBSecurityGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupMembershipList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBSecurityGroupMembership(entry, context);
    });
};
var deserializeAws_queryDBSecurityGroupMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBSecurityGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroups(__getArrayIfSingleItem(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupNotSupportedFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroupQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSecurityGroups = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBSecurityGroup(entry, context);
    });
};
var deserializeAws_queryDBSnapshot = function (output, context) {
    var contents = {
        DBSnapshotIdentifier: undefined,
        DBInstanceIdentifier: undefined,
        SnapshotCreateTime: undefined,
        Engine: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        AvailabilityZone: undefined,
        VpcId: undefined,
        InstanceCreateTime: undefined,
        MasterUsername: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        SnapshotType: undefined,
        Iops: undefined,
        OptionGroupName: undefined,
        PercentProgress: undefined,
        SourceRegion: undefined,
        SourceDBSnapshotIdentifier: undefined,
        StorageType: undefined,
        TdeCredentialArn: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        DBSnapshotArn: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        ProcessorFeatures: undefined,
        DbiResourceId: undefined,
        TagList: undefined,
        OriginalSnapshotCreateTime: undefined,
        SnapshotTarget: undefined,
    };
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = __expectString(output["DBSnapshotIdentifier"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = __expectString(output["SnapshotType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["SourceRegion"] !== undefined) {
        contents.SourceRegion = __expectString(output["SourceRegion"]);
    }
    if (output["SourceDBSnapshotIdentifier"] !== undefined) {
        contents.SourceDBSnapshotIdentifier = __expectString(output["SourceDBSnapshotIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["Encrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DBSnapshotArn"] !== undefined) {
        contents.DBSnapshotArn = __expectString(output["DBSnapshotArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    if (output["ProcessorFeatures"] !== undefined && output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["OriginalSnapshotCreateTime"] !== undefined) {
        contents.OriginalSnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["OriginalSnapshotCreateTime"]));
    }
    if (output["SnapshotTarget"] !== undefined) {
        contents.SnapshotTarget = __expectString(output["SnapshotTarget"]);
    }
    return contents;
};
var deserializeAws_queryDBSnapshotAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSnapshotAttribute = function (output, context) {
    var contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList(__getArrayIfSingleItem(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
var deserializeAws_queryDBSnapshotAttributeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBSnapshotAttribute(entry, context);
    });
};
var deserializeAws_queryDBSnapshotAttributesResult = function (output, context) {
    var contents = {
        DBSnapshotIdentifier: undefined,
        DBSnapshotAttributes: undefined,
    };
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = __expectString(output["DBSnapshotIdentifier"]);
    }
    if (output.DBSnapshotAttributes === "") {
        contents.DBSnapshotAttributes = [];
    }
    if (output["DBSnapshotAttributes"] !== undefined &&
        output["DBSnapshotAttributes"]["DBSnapshotAttribute"] !== undefined) {
        contents.DBSnapshotAttributes = deserializeAws_queryDBSnapshotAttributeList(__getArrayIfSingleItem(output["DBSnapshotAttributes"]["DBSnapshotAttribute"]), context);
    }
    return contents;
};
var deserializeAws_queryDBSnapshotList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBSnapshot(entry, context);
    });
};
var deserializeAws_queryDBSnapshotMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBSnapshots: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSnapshots === "") {
        contents.DBSnapshots = [];
    }
    if (output["DBSnapshots"] !== undefined && output["DBSnapshots"]["DBSnapshot"] !== undefined) {
        contents.DBSnapshots = deserializeAws_queryDBSnapshotList(__getArrayIfSingleItem(output["DBSnapshots"]["DBSnapshot"]), context);
    }
    return contents;
};
var deserializeAws_queryDBSnapshotNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroup = function (output, context) {
    var contents = {
        DBSubnetGroupName: undefined,
        DBSubnetGroupDescription: undefined,
        VpcId: undefined,
        SubnetGroupStatus: undefined,
        Subnets: undefined,
        DBSubnetGroupArn: undefined,
    };
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = __expectString(output["DBSubnetGroupName"]);
    }
    if (output["DBSubnetGroupDescription"] !== undefined) {
        contents.DBSubnetGroupDescription = __expectString(output["DBSubnetGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["SubnetGroupStatus"] !== undefined) {
        contents.SubnetGroupStatus = __expectString(output["SubnetGroupStatus"]);
    }
    if (output.Subnets === "") {
        contents.Subnets = [];
    }
    if (output["Subnets"] !== undefined && output["Subnets"]["Subnet"] !== undefined) {
        contents.Subnets = deserializeAws_querySubnetList(__getArrayIfSingleItem(output["Subnets"]["Subnet"]), context);
    }
    if (output["DBSubnetGroupArn"] !== undefined) {
        contents.DBSubnetGroupArn = __expectString(output["DBSubnetGroupArn"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        DBSubnetGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSubnetGroups === "") {
        contents.DBSubnetGroups = [];
    }
    if (output["DBSubnetGroups"] !== undefined && output["DBSubnetGroups"]["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroups = deserializeAws_queryDBSubnetGroups(__getArrayIfSingleItem(output["DBSubnetGroups"]["DBSubnetGroup"]), context);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupNotAllowedFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroupQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBSubnetGroups = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBSubnetGroup(entry, context);
    });
};
var deserializeAws_queryDBSubnetQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDBUpgradeDependencyFailureFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDeleteCustomAvailabilityZoneResult = function (output, context) {
    var contents = {
        CustomAvailabilityZone: undefined,
    };
    if (output["CustomAvailabilityZone"] !== undefined) {
        contents.CustomAvailabilityZone = deserializeAws_queryCustomAvailabilityZone(output["CustomAvailabilityZone"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBClusterSnapshotResult = function (output, context) {
    var contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBInstanceAutomatedBackupResult = function (output, context) {
    var contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBProxyEndpointResponse = function (output, context) {
    var contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBProxyResponse = function (output, context) {
    var contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteDBSnapshotResult = function (output, context) {
    var contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteEventSubscriptionResult = function (output, context) {
    var contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
var deserializeAws_queryDeleteGlobalClusterResult = function (output, context) {
    var contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
var deserializeAws_queryDeregisterDBProxyTargetsResponse = function (output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_queryDescribeDBClusterSnapshotAttributesResult = function (output, context) {
    var contents = {
        DBClusterSnapshotAttributesResult: undefined,
    };
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
var deserializeAws_queryDescribeDBLogFilesDetails = function (output, context) {
    var contents = {
        LogFileName: undefined,
        LastWritten: undefined,
        Size: undefined,
    };
    if (output["LogFileName"] !== undefined) {
        contents.LogFileName = __expectString(output["LogFileName"]);
    }
    if (output["LastWritten"] !== undefined) {
        contents.LastWritten = __strictParseLong(output["LastWritten"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = __strictParseLong(output["Size"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBLogFilesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDescribeDBLogFilesDetails(entry, context);
    });
};
var deserializeAws_queryDescribeDBLogFilesResponse = function (output, context) {
    var contents = {
        DescribeDBLogFiles: undefined,
        Marker: undefined,
    };
    if (output.DescribeDBLogFiles === "") {
        contents.DescribeDBLogFiles = [];
    }
    if (output["DescribeDBLogFiles"] !== undefined &&
        output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"] !== undefined) {
        contents.DescribeDBLogFiles = deserializeAws_queryDescribeDBLogFilesList(__getArrayIfSingleItem(output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBProxiesResponse = function (output, context) {
    var contents = {
        DBProxies: undefined,
        Marker: undefined,
    };
    if (output.DBProxies === "") {
        contents.DBProxies = [];
    }
    if (output["DBProxies"] !== undefined && output["DBProxies"]["member"] !== undefined) {
        contents.DBProxies = deserializeAws_queryDBProxyList(__getArrayIfSingleItem(output["DBProxies"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBProxyEndpointsResponse = function (output, context) {
    var contents = {
        DBProxyEndpoints: undefined,
        Marker: undefined,
    };
    if (output.DBProxyEndpoints === "") {
        contents.DBProxyEndpoints = [];
    }
    if (output["DBProxyEndpoints"] !== undefined && output["DBProxyEndpoints"]["member"] !== undefined) {
        contents.DBProxyEndpoints = deserializeAws_queryDBProxyEndpointList(__getArrayIfSingleItem(output["DBProxyEndpoints"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBProxyTargetGroupsResponse = function (output, context) {
    var contents = {
        TargetGroups: undefined,
        Marker: undefined,
    };
    if (output.TargetGroups === "") {
        contents.TargetGroups = [];
    }
    if (output["TargetGroups"] !== undefined && output["TargetGroups"]["member"] !== undefined) {
        contents.TargetGroups = deserializeAws_queryTargetGroupList(__getArrayIfSingleItem(output["TargetGroups"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBProxyTargetsResponse = function (output, context) {
    var contents = {
        Targets: undefined,
        Marker: undefined,
    };
    if (output.Targets === "") {
        contents.Targets = [];
    }
    if (output["Targets"] !== undefined && output["Targets"]["member"] !== undefined) {
        contents.Targets = deserializeAws_queryTargetList(__getArrayIfSingleItem(output["Targets"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryDescribeDBSnapshotAttributesResult = function (output, context) {
    var contents = {
        DBSnapshotAttributesResult: undefined,
    };
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
var deserializeAws_queryDescribeEngineDefaultClusterParametersResult = function (output, context) {
    var contents = {
        EngineDefaults: undefined,
    };
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
var deserializeAws_queryDescribeEngineDefaultParametersResult = function (output, context) {
    var contents = {
        EngineDefaults: undefined,
    };
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
var deserializeAws_queryDescribeValidDBInstanceModificationsResult = function (output, context) {
    var contents = {
        ValidDBInstanceModificationsMessage: undefined,
    };
    if (output["ValidDBInstanceModificationsMessage"] !== undefined) {
        contents.ValidDBInstanceModificationsMessage = deserializeAws_queryValidDBInstanceModificationsMessage(output["ValidDBInstanceModificationsMessage"], context);
    }
    return contents;
};
var deserializeAws_queryDomainMembership = function (output, context) {
    var contents = {
        Domain: undefined,
        Status: undefined,
        FQDN: undefined,
        IAMRoleName: undefined,
    };
    if (output["Domain"] !== undefined) {
        contents.Domain = __expectString(output["Domain"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FQDN"] !== undefined) {
        contents.FQDN = __expectString(output["FQDN"]);
    }
    if (output["IAMRoleName"] !== undefined) {
        contents.IAMRoleName = __expectString(output["IAMRoleName"]);
    }
    return contents;
};
var deserializeAws_queryDomainMembershipList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDomainMembership(entry, context);
    });
};
var deserializeAws_queryDomainNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryDoubleRange = function (output, context) {
    var contents = {
        From: undefined,
        To: undefined,
    };
    if (output["From"] !== undefined) {
        contents.From = __strictParseFloat(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = __strictParseFloat(output["To"]);
    }
    return contents;
};
var deserializeAws_queryDoubleRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDoubleRange(entry, context);
    });
};
var deserializeAws_queryDownloadDBLogFilePortionDetails = function (output, context) {
    var contents = {
        LogFileData: undefined,
        Marker: undefined,
        AdditionalDataPending: undefined,
    };
    if (output["LogFileData"] !== undefined) {
        contents.LogFileData = __expectString(output["LogFileData"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output["AdditionalDataPending"] !== undefined) {
        contents.AdditionalDataPending = __parseBoolean(output["AdditionalDataPending"]);
    }
    return contents;
};
var deserializeAws_queryEC2SecurityGroup = function (output, context) {
    var contents = {
        Status: undefined,
        EC2SecurityGroupName: undefined,
        EC2SecurityGroupId: undefined,
        EC2SecurityGroupOwnerId: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EC2SecurityGroupName"] !== undefined) {
        contents.EC2SecurityGroupName = __expectString(output["EC2SecurityGroupName"]);
    }
    if (output["EC2SecurityGroupId"] !== undefined) {
        contents.EC2SecurityGroupId = __expectString(output["EC2SecurityGroupId"]);
    }
    if (output["EC2SecurityGroupOwnerId"] !== undefined) {
        contents.EC2SecurityGroupOwnerId = __expectString(output["EC2SecurityGroupOwnerId"]);
    }
    return contents;
};
var deserializeAws_queryEC2SecurityGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryEC2SecurityGroup(entry, context);
    });
};
var deserializeAws_queryEndpoint = function (output, context) {
    var contents = {
        Address: undefined,
        Port: undefined,
        HostedZoneId: undefined,
    };
    if (output["Address"] !== undefined) {
        contents.Address = __expectString(output["Address"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    return contents;
};
var deserializeAws_queryEngineDefaults = function (output, context) {
    var contents = {
        DBParameterGroupFamily: undefined,
        Marker: undefined,
        Parameters: undefined,
    };
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    return contents;
};
var deserializeAws_queryEngineModeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryEvent = function (output, context) {
    var contents = {
        SourceIdentifier: undefined,
        SourceType: undefined,
        Message: undefined,
        EventCategories: undefined,
        Date: undefined,
        SourceArn: undefined,
    };
    if (output["SourceIdentifier"] !== undefined) {
        contents.SourceIdentifier = __expectString(output["SourceIdentifier"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategories"]["EventCategory"]), context);
    }
    if (output["Date"] !== undefined) {
        contents.Date = __expectNonNull(__parseRfc3339DateTime(output["Date"]));
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = __expectString(output["SourceArn"]);
    }
    return contents;
};
var deserializeAws_queryEventCategoriesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryEventCategoriesMap = function (output, context) {
    var contents = {
        SourceType: undefined,
        EventCategories: undefined,
    };
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategories"]["EventCategory"]), context);
    }
    return contents;
};
var deserializeAws_queryEventCategoriesMapList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryEventCategoriesMap(entry, context);
    });
};
var deserializeAws_queryEventCategoriesMessage = function (output, context) {
    var contents = {
        EventCategoriesMapList: undefined,
    };
    if (output.EventCategoriesMapList === "") {
        contents.EventCategoriesMapList = [];
    }
    if (output["EventCategoriesMapList"] !== undefined &&
        output["EventCategoriesMapList"]["EventCategoriesMap"] !== undefined) {
        contents.EventCategoriesMapList = deserializeAws_queryEventCategoriesMapList(__getArrayIfSingleItem(output["EventCategoriesMapList"]["EventCategoriesMap"]), context);
    }
    return contents;
};
var deserializeAws_queryEventList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryEvent(entry, context);
    });
};
var deserializeAws_queryEventsMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        Events: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.Events === "") {
        contents.Events = [];
    }
    if (output["Events"] !== undefined && output["Events"]["Event"] !== undefined) {
        contents.Events = deserializeAws_queryEventList(__getArrayIfSingleItem(output["Events"]["Event"]), context);
    }
    return contents;
};
var deserializeAws_queryEventSubscription = function (output, context) {
    var contents = {
        CustomerAwsId: undefined,
        CustSubscriptionId: undefined,
        SnsTopicArn: undefined,
        Status: undefined,
        SubscriptionCreationTime: undefined,
        SourceType: undefined,
        SourceIdsList: undefined,
        EventCategoriesList: undefined,
        Enabled: undefined,
        EventSubscriptionArn: undefined,
    };
    if (output["CustomerAwsId"] !== undefined) {
        contents.CustomerAwsId = __expectString(output["CustomerAwsId"]);
    }
    if (output["CustSubscriptionId"] !== undefined) {
        contents.CustSubscriptionId = __expectString(output["CustSubscriptionId"]);
    }
    if (output["SnsTopicArn"] !== undefined) {
        contents.SnsTopicArn = __expectString(output["SnsTopicArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SubscriptionCreationTime"] !== undefined) {
        contents.SubscriptionCreationTime = __expectString(output["SubscriptionCreationTime"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output.SourceIdsList === "") {
        contents.SourceIdsList = [];
    }
    if (output["SourceIdsList"] !== undefined && output["SourceIdsList"]["SourceId"] !== undefined) {
        contents.SourceIdsList = deserializeAws_querySourceIdsList(__getArrayIfSingleItem(output["SourceIdsList"]["SourceId"]), context);
    }
    if (output.EventCategoriesList === "") {
        contents.EventCategoriesList = [];
    }
    if (output["EventCategoriesList"] !== undefined && output["EventCategoriesList"]["EventCategory"] !== undefined) {
        contents.EventCategoriesList = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategoriesList"]["EventCategory"]), context);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["EventSubscriptionArn"] !== undefined) {
        contents.EventSubscriptionArn = __expectString(output["EventSubscriptionArn"]);
    }
    return contents;
};
var deserializeAws_queryEventSubscriptionQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryEventSubscriptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryEventSubscription(entry, context);
    });
};
var deserializeAws_queryEventSubscriptionsMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        EventSubscriptionsList: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.EventSubscriptionsList === "") {
        contents.EventSubscriptionsList = [];
    }
    if (output["EventSubscriptionsList"] !== undefined &&
        output["EventSubscriptionsList"]["EventSubscription"] !== undefined) {
        contents.EventSubscriptionsList = deserializeAws_queryEventSubscriptionsList(__getArrayIfSingleItem(output["EventSubscriptionsList"]["EventSubscription"]), context);
    }
    return contents;
};
var deserializeAws_queryExportTask = function (output, context) {
    var contents = {
        ExportTaskIdentifier: undefined,
        SourceArn: undefined,
        ExportOnly: undefined,
        SnapshotTime: undefined,
        TaskStartTime: undefined,
        TaskEndTime: undefined,
        S3Bucket: undefined,
        S3Prefix: undefined,
        IamRoleArn: undefined,
        KmsKeyId: undefined,
        Status: undefined,
        PercentProgress: undefined,
        TotalExtractedDataInGB: undefined,
        FailureCause: undefined,
        WarningMessage: undefined,
    };
    if (output["ExportTaskIdentifier"] !== undefined) {
        contents.ExportTaskIdentifier = __expectString(output["ExportTaskIdentifier"]);
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = __expectString(output["SourceArn"]);
    }
    if (output.ExportOnly === "") {
        contents.ExportOnly = [];
    }
    if (output["ExportOnly"] !== undefined && output["ExportOnly"]["member"] !== undefined) {
        contents.ExportOnly = deserializeAws_queryStringList(__getArrayIfSingleItem(output["ExportOnly"]["member"]), context);
    }
    if (output["SnapshotTime"] !== undefined) {
        contents.SnapshotTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotTime"]));
    }
    if (output["TaskStartTime"] !== undefined) {
        contents.TaskStartTime = __expectNonNull(__parseRfc3339DateTime(output["TaskStartTime"]));
    }
    if (output["TaskEndTime"] !== undefined) {
        contents.TaskEndTime = __expectNonNull(__parseRfc3339DateTime(output["TaskEndTime"]));
    }
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["S3Bucket"]);
    }
    if (output["S3Prefix"] !== undefined) {
        contents.S3Prefix = __expectString(output["S3Prefix"]);
    }
    if (output["IamRoleArn"] !== undefined) {
        contents.IamRoleArn = __expectString(output["IamRoleArn"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["TotalExtractedDataInGB"] !== undefined) {
        contents.TotalExtractedDataInGB = __strictParseInt32(output["TotalExtractedDataInGB"]);
    }
    if (output["FailureCause"] !== undefined) {
        contents.FailureCause = __expectString(output["FailureCause"]);
    }
    if (output["WarningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["WarningMessage"]);
    }
    return contents;
};
var deserializeAws_queryExportTaskAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryExportTaskNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryExportTasksList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryExportTask(entry, context);
    });
};
var deserializeAws_queryExportTasksMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        ExportTasks: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ExportTasks === "") {
        contents.ExportTasks = [];
    }
    if (output["ExportTasks"] !== undefined && output["ExportTasks"]["ExportTask"] !== undefined) {
        contents.ExportTasks = deserializeAws_queryExportTasksList(__getArrayIfSingleItem(output["ExportTasks"]["ExportTask"]), context);
    }
    return contents;
};
var deserializeAws_queryFailoverDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryFailoverGlobalClusterResult = function (output, context) {
    var contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
var deserializeAws_queryFailoverState = function (output, context) {
    var contents = {
        Status: undefined,
        FromDbClusterArn: undefined,
        ToDbClusterArn: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FromDbClusterArn"] !== undefined) {
        contents.FromDbClusterArn = __expectString(output["FromDbClusterArn"]);
    }
    if (output["ToDbClusterArn"] !== undefined) {
        contents.ToDbClusterArn = __expectString(output["ToDbClusterArn"]);
    }
    return contents;
};
var deserializeAws_queryFeatureNameList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryGlobalCluster = function (output, context) {
    var contents = {
        GlobalClusterIdentifier: undefined,
        GlobalClusterResourceId: undefined,
        GlobalClusterArn: undefined,
        Status: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        DatabaseName: undefined,
        StorageEncrypted: undefined,
        DeletionProtection: undefined,
        GlobalClusterMembers: undefined,
        FailoverState: undefined,
    };
    if (output["GlobalClusterIdentifier"] !== undefined) {
        contents.GlobalClusterIdentifier = __expectString(output["GlobalClusterIdentifier"]);
    }
    if (output["GlobalClusterResourceId"] !== undefined) {
        contents.GlobalClusterResourceId = __expectString(output["GlobalClusterResourceId"]);
    }
    if (output["GlobalClusterArn"] !== undefined) {
        contents.GlobalClusterArn = __expectString(output["GlobalClusterArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = __expectString(output["DatabaseName"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output.GlobalClusterMembers === "") {
        contents.GlobalClusterMembers = [];
    }
    if (output["GlobalClusterMembers"] !== undefined &&
        output["GlobalClusterMembers"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusterMembers = deserializeAws_queryGlobalClusterMemberList(__getArrayIfSingleItem(output["GlobalClusterMembers"]["GlobalClusterMember"]), context);
    }
    if (output["FailoverState"] !== undefined) {
        contents.FailoverState = deserializeAws_queryFailoverState(output["FailoverState"], context);
    }
    return contents;
};
var deserializeAws_queryGlobalClusterAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryGlobalClusterList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryGlobalCluster(entry, context);
    });
};
var deserializeAws_queryGlobalClusterMember = function (output, context) {
    var contents = {
        DBClusterArn: undefined,
        Readers: undefined,
        IsWriter: undefined,
        GlobalWriteForwardingStatus: undefined,
    };
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = __expectString(output["DBClusterArn"]);
    }
    if (output.Readers === "") {
        contents.Readers = [];
    }
    if (output["Readers"] !== undefined && output["Readers"]["member"] !== undefined) {
        contents.Readers = deserializeAws_queryReadersArnList(__getArrayIfSingleItem(output["Readers"]["member"]), context);
    }
    if (output["IsWriter"] !== undefined) {
        contents.IsWriter = __parseBoolean(output["IsWriter"]);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = __expectString(output["GlobalWriteForwardingStatus"]);
    }
    return contents;
};
var deserializeAws_queryGlobalClusterMemberList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryGlobalClusterMember(entry, context);
    });
};
var deserializeAws_queryGlobalClusterNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryGlobalClusterQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryGlobalClustersMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        GlobalClusters: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.GlobalClusters === "") {
        contents.GlobalClusters = [];
    }
    if (output["GlobalClusters"] !== undefined && output["GlobalClusters"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusters = deserializeAws_queryGlobalClusterList(__getArrayIfSingleItem(output["GlobalClusters"]["GlobalClusterMember"]), context);
    }
    return contents;
};
var deserializeAws_queryIamRoleMissingPermissionsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryIamRoleNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInstallationMedia = function (output, context) {
    var contents = {
        InstallationMediaId: undefined,
        CustomAvailabilityZoneId: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        EngineInstallationMediaPath: undefined,
        OSInstallationMediaPath: undefined,
        Status: undefined,
        FailureCause: undefined,
    };
    if (output["InstallationMediaId"] !== undefined) {
        contents.InstallationMediaId = __expectString(output["InstallationMediaId"]);
    }
    if (output["CustomAvailabilityZoneId"] !== undefined) {
        contents.CustomAvailabilityZoneId = __expectString(output["CustomAvailabilityZoneId"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["EngineInstallationMediaPath"] !== undefined) {
        contents.EngineInstallationMediaPath = __expectString(output["EngineInstallationMediaPath"]);
    }
    if (output["OSInstallationMediaPath"] !== undefined) {
        contents.OSInstallationMediaPath = __expectString(output["OSInstallationMediaPath"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FailureCause"] !== undefined) {
        contents.FailureCause = deserializeAws_queryInstallationMediaFailureCause(output["FailureCause"], context);
    }
    return contents;
};
var deserializeAws_queryInstallationMediaAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInstallationMediaFailureCause = function (output, context) {
    var contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
var deserializeAws_queryInstallationMediaList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryInstallationMedia(entry, context);
    });
};
var deserializeAws_queryInstallationMediaMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        InstallationMedia: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.InstallationMedia === "") {
        contents.InstallationMedia = [];
    }
    if (output["InstallationMedia"] !== undefined && output["InstallationMedia"]["InstallationMedia"] !== undefined) {
        contents.InstallationMedia = deserializeAws_queryInstallationMediaList(__getArrayIfSingleItem(output["InstallationMedia"]["InstallationMedia"]), context);
    }
    return contents;
};
var deserializeAws_queryInstallationMediaNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInstanceQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInsufficientAvailableIPsInSubnetFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInsufficientDBClusterCapacityFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInsufficientDBInstanceCapacityFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInsufficientStorageClusterCapacityFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidCustomDBEngineVersionStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBClusterCapacityFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBClusterEndpointStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBClusterSnapshotStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBClusterStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBInstanceStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBParameterGroupStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBProxyEndpointStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBProxyStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBSecurityGroupStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBSnapshotStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBSubnetGroupFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBSubnetGroupStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidDBSubnetStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidEventSubscriptionStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidExportOnlyFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidExportSourceStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidExportTaskStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidGlobalClusterStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidOptionGroupStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidRestoreFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidS3BucketFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidSubnet = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryInvalidVPCNetworkStateFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryIPRange = function (output, context) {
    var contents = {
        Status: undefined,
        CIDRIP: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["CIDRIP"] !== undefined) {
        contents.CIDRIP = __expectString(output["CIDRIP"]);
    }
    return contents;
};
var deserializeAws_queryIPRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryIPRange(entry, context);
    });
};
var deserializeAws_queryKMSKeyNotAccessibleFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryLogTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryMinimumEngineVersionPerAllowedValue = function (output, context) {
    var contents = {
        AllowedValue: undefined,
        MinimumEngineVersion: undefined,
    };
    if (output["AllowedValue"] !== undefined) {
        contents.AllowedValue = __expectString(output["AllowedValue"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = __expectString(output["MinimumEngineVersion"]);
    }
    return contents;
};
var deserializeAws_queryMinimumEngineVersionPerAllowedValueList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryMinimumEngineVersionPerAllowedValue(entry, context);
    });
};
var deserializeAws_queryModifyCertificatesResult = function (output, context) {
    var contents = {
        Certificate: undefined,
    };
    if (output["Certificate"] !== undefined) {
        contents.Certificate = deserializeAws_queryCertificate(output["Certificate"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBClusterSnapshotAttributeResult = function (output, context) {
    var contents = {
        DBClusterSnapshotAttributesResult: undefined,
    };
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBProxyEndpointResponse = function (output, context) {
    var contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBProxyResponse = function (output, context) {
    var contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBProxyTargetGroupResponse = function (output, context) {
    var contents = {
        DBProxyTargetGroup: undefined,
    };
    if (output["DBProxyTargetGroup"] !== undefined) {
        contents.DBProxyTargetGroup = deserializeAws_queryDBProxyTargetGroup(output["DBProxyTargetGroup"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBSnapshotAttributeResult = function (output, context) {
    var contents = {
        DBSnapshotAttributesResult: undefined,
    };
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBSnapshotResult = function (output, context) {
    var contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
var deserializeAws_queryModifyDBSubnetGroupResult = function (output, context) {
    var contents = {
        DBSubnetGroup: undefined,
    };
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
var deserializeAws_queryModifyEventSubscriptionResult = function (output, context) {
    var contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
var deserializeAws_queryModifyGlobalClusterResult = function (output, context) {
    var contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
var deserializeAws_queryModifyOptionGroupResult = function (output, context) {
    var contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
var deserializeAws_queryOption = function (output, context) {
    var contents = {
        OptionName: undefined,
        OptionDescription: undefined,
        Persistent: undefined,
        Permanent: undefined,
        Port: undefined,
        OptionVersion: undefined,
        OptionSettings: undefined,
        DBSecurityGroupMemberships: undefined,
        VpcSecurityGroupMemberships: undefined,
    };
    if (output["OptionName"] !== undefined) {
        contents.OptionName = __expectString(output["OptionName"]);
    }
    if (output["OptionDescription"] !== undefined) {
        contents.OptionDescription = __expectString(output["OptionDescription"]);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = __parseBoolean(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = __parseBoolean(output["Permanent"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["OptionVersion"] !== undefined) {
        contents.OptionVersion = __expectString(output["OptionVersion"]);
    }
    if (output.OptionSettings === "") {
        contents.OptionSettings = [];
    }
    if (output["OptionSettings"] !== undefined && output["OptionSettings"]["OptionSetting"] !== undefined) {
        contents.OptionSettings = deserializeAws_queryOptionSettingConfigurationList(__getArrayIfSingleItem(output["OptionSettings"]["OptionSetting"]), context);
    }
    if (output.DBSecurityGroupMemberships === "") {
        contents.DBSecurityGroupMemberships = [];
    }
    if (output["DBSecurityGroupMemberships"] !== undefined &&
        output["DBSecurityGroupMemberships"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroupMemberships = deserializeAws_queryDBSecurityGroupMembershipList(__getArrayIfSingleItem(output["DBSecurityGroupMemberships"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroupMemberships === "") {
        contents.VpcSecurityGroupMemberships = [];
    }
    if (output["VpcSecurityGroupMemberships"] !== undefined &&
        output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroupMemberships = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"]), context);
    }
    return contents;
};
var deserializeAws_queryOptionGroup = function (output, context) {
    var contents = {
        OptionGroupName: undefined,
        OptionGroupDescription: undefined,
        EngineName: undefined,
        MajorEngineVersion: undefined,
        Options: undefined,
        AllowsVpcAndNonVpcInstanceMemberships: undefined,
        VpcId: undefined,
        OptionGroupArn: undefined,
    };
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["OptionGroupDescription"] !== undefined) {
        contents.OptionGroupDescription = __expectString(output["OptionGroupDescription"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = __expectString(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output.Options === "") {
        contents.Options = [];
    }
    if (output["Options"] !== undefined && output["Options"]["Option"] !== undefined) {
        contents.Options = deserializeAws_queryOptionsList(__getArrayIfSingleItem(output["Options"]["Option"]), context);
    }
    if (output["AllowsVpcAndNonVpcInstanceMemberships"] !== undefined) {
        contents.AllowsVpcAndNonVpcInstanceMemberships = __parseBoolean(output["AllowsVpcAndNonVpcInstanceMemberships"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["OptionGroupArn"] !== undefined) {
        contents.OptionGroupArn = __expectString(output["OptionGroupArn"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupMembership = function (output, context) {
    var contents = {
        OptionGroupName: undefined,
        Status: undefined,
    };
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupMembershipList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionGroupMembership(entry, context);
    });
};
var deserializeAws_queryOptionGroupNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupOption = function (output, context) {
    var contents = {
        Name: undefined,
        Description: undefined,
        EngineName: undefined,
        MajorEngineVersion: undefined,
        MinimumRequiredMinorEngineVersion: undefined,
        PortRequired: undefined,
        DefaultPort: undefined,
        OptionsDependedOn: undefined,
        OptionsConflictsWith: undefined,
        Persistent: undefined,
        Permanent: undefined,
        RequiresAutoMinorEngineVersionUpgrade: undefined,
        VpcOnly: undefined,
        SupportsOptionVersionDowngrade: undefined,
        OptionGroupOptionSettings: undefined,
        OptionGroupOptionVersions: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = __expectString(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output["MinimumRequiredMinorEngineVersion"] !== undefined) {
        contents.MinimumRequiredMinorEngineVersion = __expectString(output["MinimumRequiredMinorEngineVersion"]);
    }
    if (output["PortRequired"] !== undefined) {
        contents.PortRequired = __parseBoolean(output["PortRequired"]);
    }
    if (output["DefaultPort"] !== undefined) {
        contents.DefaultPort = __strictParseInt32(output["DefaultPort"]);
    }
    if (output.OptionsDependedOn === "") {
        contents.OptionsDependedOn = [];
    }
    if (output["OptionsDependedOn"] !== undefined && output["OptionsDependedOn"]["OptionName"] !== undefined) {
        contents.OptionsDependedOn = deserializeAws_queryOptionsDependedOn(__getArrayIfSingleItem(output["OptionsDependedOn"]["OptionName"]), context);
    }
    if (output.OptionsConflictsWith === "") {
        contents.OptionsConflictsWith = [];
    }
    if (output["OptionsConflictsWith"] !== undefined &&
        output["OptionsConflictsWith"]["OptionConflictName"] !== undefined) {
        contents.OptionsConflictsWith = deserializeAws_queryOptionsConflictsWith(__getArrayIfSingleItem(output["OptionsConflictsWith"]["OptionConflictName"]), context);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = __parseBoolean(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = __parseBoolean(output["Permanent"]);
    }
    if (output["RequiresAutoMinorEngineVersionUpgrade"] !== undefined) {
        contents.RequiresAutoMinorEngineVersionUpgrade = __parseBoolean(output["RequiresAutoMinorEngineVersionUpgrade"]);
    }
    if (output["VpcOnly"] !== undefined) {
        contents.VpcOnly = __parseBoolean(output["VpcOnly"]);
    }
    if (output["SupportsOptionVersionDowngrade"] !== undefined) {
        contents.SupportsOptionVersionDowngrade = __parseBoolean(output["SupportsOptionVersionDowngrade"]);
    }
    if (output.OptionGroupOptionSettings === "") {
        contents.OptionGroupOptionSettings = [];
    }
    if (output["OptionGroupOptionSettings"] !== undefined &&
        output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"] !== undefined) {
        contents.OptionGroupOptionSettings = deserializeAws_queryOptionGroupOptionSettingsList(__getArrayIfSingleItem(output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"]), context);
    }
    if (output.OptionGroupOptionVersions === "") {
        contents.OptionGroupOptionVersions = [];
    }
    if (output["OptionGroupOptionVersions"] !== undefined &&
        output["OptionGroupOptionVersions"]["OptionVersion"] !== undefined) {
        contents.OptionGroupOptionVersions = deserializeAws_queryOptionGroupOptionVersionsList(__getArrayIfSingleItem(output["OptionGroupOptionVersions"]["OptionVersion"]), context);
    }
    return contents;
};
var deserializeAws_queryOptionGroupOptionSetting = function (output, context) {
    var contents = {
        SettingName: undefined,
        SettingDescription: undefined,
        DefaultValue: undefined,
        ApplyType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        IsRequired: undefined,
        MinimumEngineVersionPerAllowedValue: undefined,
    };
    if (output["SettingName"] !== undefined) {
        contents.SettingName = __expectString(output["SettingName"]);
    }
    if (output["SettingDescription"] !== undefined) {
        contents.SettingDescription = __expectString(output["SettingDescription"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["IsRequired"] !== undefined) {
        contents.IsRequired = __parseBoolean(output["IsRequired"]);
    }
    if (output.MinimumEngineVersionPerAllowedValue === "") {
        contents.MinimumEngineVersionPerAllowedValue = [];
    }
    if (output["MinimumEngineVersionPerAllowedValue"] !== undefined &&
        output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"] !== undefined) {
        contents.MinimumEngineVersionPerAllowedValue = deserializeAws_queryMinimumEngineVersionPerAllowedValueList(__getArrayIfSingleItem(output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"]), context);
    }
    return contents;
};
var deserializeAws_queryOptionGroupOptionSettingsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionGroupOptionSetting(entry, context);
    });
};
var deserializeAws_queryOptionGroupOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionGroupOption(entry, context);
    });
};
var deserializeAws_queryOptionGroupOptionsMessage = function (output, context) {
    var contents = {
        OptionGroupOptions: undefined,
        Marker: undefined,
    };
    if (output.OptionGroupOptions === "") {
        contents.OptionGroupOptions = [];
    }
    if (output["OptionGroupOptions"] !== undefined && output["OptionGroupOptions"]["OptionGroupOption"] !== undefined) {
        contents.OptionGroupOptions = deserializeAws_queryOptionGroupOptionsList(__getArrayIfSingleItem(output["OptionGroupOptions"]["OptionGroupOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupOptionVersionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionVersion(entry, context);
    });
};
var deserializeAws_queryOptionGroupQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroups = function (output, context) {
    var contents = {
        OptionGroupsList: undefined,
        Marker: undefined,
    };
    if (output.OptionGroupsList === "") {
        contents.OptionGroupsList = [];
    }
    if (output["OptionGroupsList"] !== undefined && output["OptionGroupsList"]["OptionGroup"] !== undefined) {
        contents.OptionGroupsList = deserializeAws_queryOptionGroupsList(__getArrayIfSingleItem(output["OptionGroupsList"]["OptionGroup"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryOptionGroupsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionGroup(entry, context);
    });
};
var deserializeAws_queryOptionsConflictsWith = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryOptionsDependedOn = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryOptionSetting = function (output, context) {
    var contents = {
        Name: undefined,
        Value: undefined,
        DefaultValue: undefined,
        Description: undefined,
        ApplyType: undefined,
        DataType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        IsCollection: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = __expectString(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["IsCollection"] !== undefined) {
        contents.IsCollection = __parseBoolean(output["IsCollection"]);
    }
    return contents;
};
var deserializeAws_queryOptionSettingConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOptionSetting(entry, context);
    });
};
var deserializeAws_queryOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOption(entry, context);
    });
};
var deserializeAws_queryOptionVersion = function (output, context) {
    var contents = {
        Version: undefined,
        IsDefault: undefined,
    };
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    return contents;
};
var deserializeAws_queryOrderableDBInstanceOption = function (output, context) {
    var contents = {
        Engine: undefined,
        EngineVersion: undefined,
        DBInstanceClass: undefined,
        LicenseModel: undefined,
        AvailabilityZoneGroup: undefined,
        AvailabilityZones: undefined,
        MultiAZCapable: undefined,
        ReadReplicaCapable: undefined,
        Vpc: undefined,
        SupportsStorageEncryption: undefined,
        StorageType: undefined,
        SupportsIops: undefined,
        SupportsEnhancedMonitoring: undefined,
        SupportsIAMDatabaseAuthentication: undefined,
        SupportsPerformanceInsights: undefined,
        MinStorageSize: undefined,
        MaxStorageSize: undefined,
        MinIopsPerDbInstance: undefined,
        MaxIopsPerDbInstance: undefined,
        MinIopsPerGib: undefined,
        MaxIopsPerGib: undefined,
        AvailableProcessorFeatures: undefined,
        SupportedEngineModes: undefined,
        SupportsStorageAutoscaling: undefined,
        SupportsKerberosAuthentication: undefined,
        OutpostCapable: undefined,
        SupportedActivityStreamModes: undefined,
        SupportsGlobalDatabases: undefined,
        SupportsClusters: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["AvailabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = __expectString(output["AvailabilityZoneGroup"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    if (output["AvailabilityZones"] !== undefined && output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZoneList(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["MultiAZCapable"] !== undefined) {
        contents.MultiAZCapable = __parseBoolean(output["MultiAZCapable"]);
    }
    if (output["ReadReplicaCapable"] !== undefined) {
        contents.ReadReplicaCapable = __parseBoolean(output["ReadReplicaCapable"]);
    }
    if (output["Vpc"] !== undefined) {
        contents.Vpc = __parseBoolean(output["Vpc"]);
    }
    if (output["SupportsStorageEncryption"] !== undefined) {
        contents.SupportsStorageEncryption = __parseBoolean(output["SupportsStorageEncryption"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["SupportsIops"] !== undefined) {
        contents.SupportsIops = __parseBoolean(output["SupportsIops"]);
    }
    if (output["SupportsEnhancedMonitoring"] !== undefined) {
        contents.SupportsEnhancedMonitoring = __parseBoolean(output["SupportsEnhancedMonitoring"]);
    }
    if (output["SupportsIAMDatabaseAuthentication"] !== undefined) {
        contents.SupportsIAMDatabaseAuthentication = __parseBoolean(output["SupportsIAMDatabaseAuthentication"]);
    }
    if (output["SupportsPerformanceInsights"] !== undefined) {
        contents.SupportsPerformanceInsights = __parseBoolean(output["SupportsPerformanceInsights"]);
    }
    if (output["MinStorageSize"] !== undefined) {
        contents.MinStorageSize = __strictParseInt32(output["MinStorageSize"]);
    }
    if (output["MaxStorageSize"] !== undefined) {
        contents.MaxStorageSize = __strictParseInt32(output["MaxStorageSize"]);
    }
    if (output["MinIopsPerDbInstance"] !== undefined) {
        contents.MinIopsPerDbInstance = __strictParseInt32(output["MinIopsPerDbInstance"]);
    }
    if (output["MaxIopsPerDbInstance"] !== undefined) {
        contents.MaxIopsPerDbInstance = __strictParseInt32(output["MaxIopsPerDbInstance"]);
    }
    if (output["MinIopsPerGib"] !== undefined) {
        contents.MinIopsPerGib = __strictParseFloat(output["MinIopsPerGib"]);
    }
    if (output["MaxIopsPerGib"] !== undefined) {
        contents.MaxIopsPerGib = __strictParseFloat(output["MaxIopsPerGib"]);
    }
    if (output.AvailableProcessorFeatures === "") {
        contents.AvailableProcessorFeatures = [];
    }
    if (output["AvailableProcessorFeatures"] !== undefined &&
        output["AvailableProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.AvailableProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList(__getArrayIfSingleItem(output["AvailableProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = __parseBoolean(output["SupportsStorageAutoscaling"]);
    }
    if (output["SupportsKerberosAuthentication"] !== undefined) {
        contents.SupportsKerberosAuthentication = __parseBoolean(output["SupportsKerberosAuthentication"]);
    }
    if (output["OutpostCapable"] !== undefined) {
        contents.OutpostCapable = __parseBoolean(output["OutpostCapable"]);
    }
    if (output.SupportedActivityStreamModes === "") {
        contents.SupportedActivityStreamModes = [];
    }
    if (output["SupportedActivityStreamModes"] !== undefined &&
        output["SupportedActivityStreamModes"]["member"] !== undefined) {
        contents.SupportedActivityStreamModes = deserializeAws_queryActivityStreamModeList(__getArrayIfSingleItem(output["SupportedActivityStreamModes"]["member"]), context);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    if (output["SupportsClusters"] !== undefined) {
        contents.SupportsClusters = __parseBoolean(output["SupportsClusters"]);
    }
    return contents;
};
var deserializeAws_queryOrderableDBInstanceOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryOrderableDBInstanceOption(entry, context);
    });
};
var deserializeAws_queryOrderableDBInstanceOptionsMessage = function (output, context) {
    var contents = {
        OrderableDBInstanceOptions: undefined,
        Marker: undefined,
    };
    if (output.OrderableDBInstanceOptions === "") {
        contents.OrderableDBInstanceOptions = [];
    }
    if (output["OrderableDBInstanceOptions"] !== undefined &&
        output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"] !== undefined) {
        contents.OrderableDBInstanceOptions = deserializeAws_queryOrderableDBInstanceOptionsList(__getArrayIfSingleItem(output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryOutpost = function (output, context) {
    var contents = {
        Arn: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    return contents;
};
var deserializeAws_queryParameter = function (output, context) {
    var contents = {
        ParameterName: undefined,
        ParameterValue: undefined,
        Description: undefined,
        Source: undefined,
        ApplyType: undefined,
        DataType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        MinimumEngineVersion: undefined,
        ApplyMethod: undefined,
        SupportedEngineModes: undefined,
    };
    if (output["ParameterName"] !== undefined) {
        contents.ParameterName = __expectString(output["ParameterName"]);
    }
    if (output["ParameterValue"] !== undefined) {
        contents.ParameterValue = __expectString(output["ParameterValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = __expectString(output["Source"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = __expectString(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = __expectString(output["MinimumEngineVersion"]);
    }
    if (output["ApplyMethod"] !== undefined) {
        contents.ApplyMethod = __expectString(output["ApplyMethod"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    return contents;
};
var deserializeAws_queryParametersList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryParameter(entry, context);
    });
};
var deserializeAws_queryPendingCloudwatchLogsExports = function (output, context) {
    var contents = {
        LogTypesToEnable: undefined,
        LogTypesToDisable: undefined,
    };
    if (output.LogTypesToEnable === "") {
        contents.LogTypesToEnable = [];
    }
    if (output["LogTypesToEnable"] !== undefined && output["LogTypesToEnable"]["member"] !== undefined) {
        contents.LogTypesToEnable = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["LogTypesToEnable"]["member"]), context);
    }
    if (output.LogTypesToDisable === "") {
        contents.LogTypesToDisable = [];
    }
    if (output["LogTypesToDisable"] !== undefined && output["LogTypesToDisable"]["member"] !== undefined) {
        contents.LogTypesToDisable = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["LogTypesToDisable"]["member"]), context);
    }
    return contents;
};
var deserializeAws_queryPendingMaintenanceAction = function (output, context) {
    var contents = {
        Action: undefined,
        AutoAppliedAfterDate: undefined,
        ForcedApplyDate: undefined,
        OptInStatus: undefined,
        CurrentApplyDate: undefined,
        Description: undefined,
    };
    if (output["Action"] !== undefined) {
        contents.Action = __expectString(output["Action"]);
    }
    if (output["AutoAppliedAfterDate"] !== undefined) {
        contents.AutoAppliedAfterDate = __expectNonNull(__parseRfc3339DateTime(output["AutoAppliedAfterDate"]));
    }
    if (output["ForcedApplyDate"] !== undefined) {
        contents.ForcedApplyDate = __expectNonNull(__parseRfc3339DateTime(output["ForcedApplyDate"]));
    }
    if (output["OptInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["OptInStatus"]);
    }
    if (output["CurrentApplyDate"] !== undefined) {
        contents.CurrentApplyDate = __expectNonNull(__parseRfc3339DateTime(output["CurrentApplyDate"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
var deserializeAws_queryPendingMaintenanceActionDetails = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryPendingMaintenanceAction(entry, context);
    });
};
var deserializeAws_queryPendingMaintenanceActions = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryResourcePendingMaintenanceActions(entry, context);
    });
};
var deserializeAws_queryPendingMaintenanceActionsMessage = function (output, context) {
    var contents = {
        PendingMaintenanceActions: undefined,
        Marker: undefined,
    };
    if (output.PendingMaintenanceActions === "") {
        contents.PendingMaintenanceActions = [];
    }
    if (output["PendingMaintenanceActions"] !== undefined &&
        output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.PendingMaintenanceActions = deserializeAws_queryPendingMaintenanceActions(__getArrayIfSingleItem(output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
var deserializeAws_queryPendingModifiedValues = function (output, context) {
    var contents = {
        DBInstanceClass: undefined,
        AllocatedStorage: undefined,
        MasterUserPassword: undefined,
        Port: undefined,
        BackupRetentionPeriod: undefined,
        MultiAZ: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        DBInstanceIdentifier: undefined,
        StorageType: undefined,
        CACertificateIdentifier: undefined,
        DBSubnetGroupName: undefined,
        PendingCloudwatchLogsExports: undefined,
        ProcessorFeatures: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        AutomationMode: undefined,
        ResumeFullAutomationModeTime: undefined,
    };
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = __expectString(output["MasterUserPassword"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = __expectString(output["CACertificateIdentifier"]);
    }
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = __expectString(output["DBSubnetGroupName"]);
    }
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    if (output["ProcessorFeatures"] !== undefined && output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = __expectString(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = __expectNonNull(__parseRfc3339DateTime(output["ResumeFullAutomationModeTime"]));
    }
    return contents;
};
var deserializeAws_queryPointInTimeRestoreNotEnabledFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryProcessorFeature = function (output, context) {
    var contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_queryProcessorFeatureList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryProcessorFeature(entry, context);
    });
};
var deserializeAws_queryPromoteReadReplicaDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryPromoteReadReplicaResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryProvisionedIopsNotAvailableInAZFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryPurchaseReservedDBInstancesOfferingResult = function (output, context) {
    var contents = {
        ReservedDBInstance: undefined,
    };
    if (output["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstance = deserializeAws_queryReservedDBInstance(output["ReservedDBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryRange = function (output, context) {
    var contents = {
        From: undefined,
        To: undefined,
        Step: undefined,
    };
    if (output["From"] !== undefined) {
        contents.From = __strictParseInt32(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = __strictParseInt32(output["To"]);
    }
    if (output["Step"] !== undefined) {
        contents.Step = __strictParseInt32(output["Step"]);
    }
    return contents;
};
var deserializeAws_queryRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryRange(entry, context);
    });
};
var deserializeAws_queryReadersArnList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryReadReplicaDBClusterIdentifierList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryReadReplicaDBInstanceIdentifierList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryReadReplicaIdentifierList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_queryRebootDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryRebootDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryRecurringCharge = function (output, context) {
    var contents = {
        RecurringChargeAmount: undefined,
        RecurringChargeFrequency: undefined,
    };
    if (output["RecurringChargeAmount"] !== undefined) {
        contents.RecurringChargeAmount = __strictParseFloat(output["RecurringChargeAmount"]);
    }
    if (output["RecurringChargeFrequency"] !== undefined) {
        contents.RecurringChargeFrequency = __expectString(output["RecurringChargeFrequency"]);
    }
    return contents;
};
var deserializeAws_queryRecurringChargeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryRecurringCharge(entry, context);
    });
};
var deserializeAws_queryRegisterDBProxyTargetsResponse = function (output, context) {
    var contents = {
        DBProxyTargets: undefined,
    };
    if (output.DBProxyTargets === "") {
        contents.DBProxyTargets = [];
    }
    if (output["DBProxyTargets"] !== undefined && output["DBProxyTargets"]["member"] !== undefined) {
        contents.DBProxyTargets = deserializeAws_queryTargetList(__getArrayIfSingleItem(output["DBProxyTargets"]["member"]), context);
    }
    return contents;
};
var deserializeAws_queryRemoveFromGlobalClusterResult = function (output, context) {
    var contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult = function (output, context) {
    var contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstance = function (output, context) {
    var contents = {
        ReservedDBInstanceId: undefined,
        ReservedDBInstancesOfferingId: undefined,
        DBInstanceClass: undefined,
        StartTime: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        DBInstanceCount: undefined,
        ProductDescription: undefined,
        OfferingType: undefined,
        MultiAZ: undefined,
        State: undefined,
        RecurringCharges: undefined,
        ReservedDBInstanceArn: undefined,
        LeaseId: undefined,
    };
    if (output["ReservedDBInstanceId"] !== undefined) {
        contents.ReservedDBInstanceId = __expectString(output["ReservedDBInstanceId"]);
    }
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = __expectString(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["StartTime"]));
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["CurrencyCode"]);
    }
    if (output["DBInstanceCount"] !== undefined) {
        contents.DBInstanceCount = __strictParseInt32(output["DBInstanceCount"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = __expectString(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["State"] !== undefined) {
        contents.State = __expectString(output["State"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList(__getArrayIfSingleItem(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    if (output["ReservedDBInstanceArn"] !== undefined) {
        contents.ReservedDBInstanceArn = __expectString(output["ReservedDBInstanceArn"]);
    }
    if (output["LeaseId"] !== undefined) {
        contents.LeaseId = __expectString(output["LeaseId"]);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstanceAlreadyExistsFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstanceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryReservedDBInstance(entry, context);
    });
};
var deserializeAws_queryReservedDBInstanceMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        ReservedDBInstances: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ReservedDBInstances === "") {
        contents.ReservedDBInstances = [];
    }
    if (output["ReservedDBInstances"] !== undefined &&
        output["ReservedDBInstances"]["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstances = deserializeAws_queryReservedDBInstanceList(__getArrayIfSingleItem(output["ReservedDBInstances"]["ReservedDBInstance"]), context);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstanceNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstanceQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstancesOffering = function (output, context) {
    var contents = {
        ReservedDBInstancesOfferingId: undefined,
        DBInstanceClass: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        ProductDescription: undefined,
        OfferingType: undefined,
        MultiAZ: undefined,
        RecurringCharges: undefined,
    };
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = __expectString(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["CurrencyCode"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = __expectString(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList(__getArrayIfSingleItem(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstancesOfferingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryReservedDBInstancesOffering(entry, context);
    });
};
var deserializeAws_queryReservedDBInstancesOfferingMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        ReservedDBInstancesOfferings: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ReservedDBInstancesOfferings === "") {
        contents.ReservedDBInstancesOfferings = [];
    }
    if (output["ReservedDBInstancesOfferings"] !== undefined &&
        output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"] !== undefined) {
        contents.ReservedDBInstancesOfferings = deserializeAws_queryReservedDBInstancesOfferingList(__getArrayIfSingleItem(output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"]), context);
    }
    return contents;
};
var deserializeAws_queryReservedDBInstancesOfferingNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryResourceNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryResourcePendingMaintenanceActions = function (output, context) {
    var contents = {
        ResourceIdentifier: undefined,
        PendingMaintenanceActionDetails: undefined,
    };
    if (output["ResourceIdentifier"] !== undefined) {
        contents.ResourceIdentifier = __expectString(output["ResourceIdentifier"]);
    }
    if (output.PendingMaintenanceActionDetails === "") {
        contents.PendingMaintenanceActionDetails = [];
    }
    if (output["PendingMaintenanceActionDetails"] !== undefined &&
        output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"] !== undefined) {
        contents.PendingMaintenanceActionDetails = deserializeAws_queryPendingMaintenanceActionDetails(__getArrayIfSingleItem(output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"]), context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBClusterFromS3Result = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBClusterFromSnapshotResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBClusterToPointInTimeResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBInstanceFromS3Result = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreDBInstanceToPointInTimeResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryRestoreWindow = function (output, context) {
    var contents = {
        EarliestTime: undefined,
        LatestTime: undefined,
    };
    if (output["EarliestTime"] !== undefined) {
        contents.EarliestTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestTime"]));
    }
    if (output["LatestTime"] !== undefined) {
        contents.LatestTime = __expectNonNull(__parseRfc3339DateTime(output["LatestTime"]));
    }
    return contents;
};
var deserializeAws_queryRevokeDBSecurityGroupIngressResult = function (output, context) {
    var contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
var deserializeAws_queryScalingConfigurationInfo = function (output, context) {
    var contents = {
        MinCapacity: undefined,
        MaxCapacity: undefined,
        AutoPause: undefined,
        SecondsUntilAutoPause: undefined,
        TimeoutAction: undefined,
        SecondsBeforeTimeout: undefined,
    };
    if (output["MinCapacity"] !== undefined) {
        contents.MinCapacity = __strictParseInt32(output["MinCapacity"]);
    }
    if (output["MaxCapacity"] !== undefined) {
        contents.MaxCapacity = __strictParseInt32(output["MaxCapacity"]);
    }
    if (output["AutoPause"] !== undefined) {
        contents.AutoPause = __parseBoolean(output["AutoPause"]);
    }
    if (output["SecondsUntilAutoPause"] !== undefined) {
        contents.SecondsUntilAutoPause = __strictParseInt32(output["SecondsUntilAutoPause"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = __expectString(output["TimeoutAction"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = __strictParseInt32(output["SecondsBeforeTimeout"]);
    }
    return contents;
};
var deserializeAws_querySharedSnapshotQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySnapshotQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySNSInvalidTopicFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySNSNoAuthorizationFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySNSTopicArnNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySourceIdsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_querySourceNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySourceRegion = function (output, context) {
    var contents = {
        RegionName: undefined,
        Endpoint: undefined,
        Status: undefined,
        SupportsDBInstanceAutomatedBackupsReplication: undefined,
    };
    if (output["RegionName"] !== undefined) {
        contents.RegionName = __expectString(output["RegionName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SupportsDBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.SupportsDBInstanceAutomatedBackupsReplication = __parseBoolean(output["SupportsDBInstanceAutomatedBackupsReplication"]);
    }
    return contents;
};
var deserializeAws_querySourceRegionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_querySourceRegion(entry, context);
    });
};
var deserializeAws_querySourceRegionMessage = function (output, context) {
    var contents = {
        Marker: undefined,
        SourceRegions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.SourceRegions === "") {
        contents.SourceRegions = [];
    }
    if (output["SourceRegions"] !== undefined && output["SourceRegions"]["SourceRegion"] !== undefined) {
        contents.SourceRegions = deserializeAws_querySourceRegionList(__getArrayIfSingleItem(output["SourceRegions"]["SourceRegion"]), context);
    }
    return contents;
};
var deserializeAws_queryStartActivityStreamResponse = function (output, context) {
    var contents = {
        KmsKeyId: undefined,
        KinesisStreamName: undefined,
        Status: undefined,
        Mode: undefined,
        ApplyImmediately: undefined,
        EngineNativeAuditFieldsIncluded: undefined,
    };
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = __expectString(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = __expectString(output["Mode"]);
    }
    if (output["ApplyImmediately"] !== undefined) {
        contents.ApplyImmediately = __parseBoolean(output["ApplyImmediately"]);
    }
    if (output["EngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.EngineNativeAuditFieldsIncluded = __parseBoolean(output["EngineNativeAuditFieldsIncluded"]);
    }
    return contents;
};
var deserializeAws_queryStartDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult = function (output, context) {
    var contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
var deserializeAws_queryStartDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryStopActivityStreamResponse = function (output, context) {
    var contents = {
        KmsKeyId: undefined,
        KinesisStreamName: undefined,
        Status: undefined,
    };
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = __expectString(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryStopDBClusterResult = function (output, context) {
    var contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult = function (output, context) {
    var contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
var deserializeAws_queryStopDBInstanceResult = function (output, context) {
    var contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
var deserializeAws_queryStorageQuotaExceededFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryStorageTypeNotSupportedFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_queryStringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_querySubnet = function (output, context) {
    var contents = {
        SubnetIdentifier: undefined,
        SubnetAvailabilityZone: undefined,
        SubnetOutpost: undefined,
        SubnetStatus: undefined,
    };
    if (output["SubnetIdentifier"] !== undefined) {
        contents.SubnetIdentifier = __expectString(output["SubnetIdentifier"]);
    }
    if (output["SubnetAvailabilityZone"] !== undefined) {
        contents.SubnetAvailabilityZone = deserializeAws_queryAvailabilityZone(output["SubnetAvailabilityZone"], context);
    }
    if (output["SubnetOutpost"] !== undefined) {
        contents.SubnetOutpost = deserializeAws_queryOutpost(output["SubnetOutpost"], context);
    }
    if (output["SubnetStatus"] !== undefined) {
        contents.SubnetStatus = __expectString(output["SubnetStatus"]);
    }
    return contents;
};
var deserializeAws_querySubnetAlreadyInUse = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySubnetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_querySubnet(entry, context);
    });
};
var deserializeAws_querySubscriptionAlreadyExistFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySubscriptionCategoryNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySubscriptionNotFoundFault = function (output, context) {
    var contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_querySupportedCharacterSetsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryCharacterSet(entry, context);
    });
};
var deserializeAws_querySupportedTimezonesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryTimezone(entry, context);
    });
};
var deserializeAws_queryTag = function (output, context) {
    var contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_queryTagList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryTag(entry, context);
    });
};
var deserializeAws_queryTagListMessage = function (output, context) {
    var contents = {
        TagList: undefined,
    };
    if (output.TagList === "") {
        contents.TagList = [];
    }
    if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    return contents;
};
var deserializeAws_queryTargetGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBProxyTargetGroup(entry, context);
    });
};
var deserializeAws_queryTargetHealth = function (output, context) {
    var contents = {
        State: undefined,
        Reason: undefined,
        Description: undefined,
    };
    if (output["State"] !== undefined) {
        contents.State = __expectString(output["State"]);
    }
    if (output["Reason"] !== undefined) {
        contents.Reason = __expectString(output["Reason"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
var deserializeAws_queryTargetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryDBProxyTarget(entry, context);
    });
};
var deserializeAws_queryTimezone = function (output, context) {
    var contents = {
        TimezoneName: undefined,
    };
    if (output["TimezoneName"] !== undefined) {
        contents.TimezoneName = __expectString(output["TimezoneName"]);
    }
    return contents;
};
var deserializeAws_queryUpgradeTarget = function (output, context) {
    var contents = {
        Engine: undefined,
        EngineVersion: undefined,
        Description: undefined,
        AutoUpgrade: undefined,
        IsMajorVersionUpgrade: undefined,
        SupportedEngineModes: undefined,
        SupportsParallelQuery: undefined,
        SupportsGlobalDatabases: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["AutoUpgrade"] !== undefined) {
        contents.AutoUpgrade = __parseBoolean(output["AutoUpgrade"]);
    }
    if (output["IsMajorVersionUpgrade"] !== undefined) {
        contents.IsMajorVersionUpgrade = __parseBoolean(output["IsMajorVersionUpgrade"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = __parseBoolean(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    return contents;
};
var deserializeAws_queryUserAuthConfigInfo = function (output, context) {
    var contents = {
        Description: undefined,
        UserName: undefined,
        AuthScheme: undefined,
        SecretArn: undefined,
        IAMAuth: undefined,
    };
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["UserName"] !== undefined) {
        contents.UserName = __expectString(output["UserName"]);
    }
    if (output["AuthScheme"] !== undefined) {
        contents.AuthScheme = __expectString(output["AuthScheme"]);
    }
    if (output["SecretArn"] !== undefined) {
        contents.SecretArn = __expectString(output["SecretArn"]);
    }
    if (output["IAMAuth"] !== undefined) {
        contents.IAMAuth = __expectString(output["IAMAuth"]);
    }
    return contents;
};
var deserializeAws_queryUserAuthConfigInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryUserAuthConfigInfo(entry, context);
    });
};
var deserializeAws_queryValidDBInstanceModificationsMessage = function (output, context) {
    var contents = {
        Storage: undefined,
        ValidProcessorFeatures: undefined,
    };
    if (output.Storage === "") {
        contents.Storage = [];
    }
    if (output["Storage"] !== undefined && output["Storage"]["ValidStorageOptions"] !== undefined) {
        contents.Storage = deserializeAws_queryValidStorageOptionsList(__getArrayIfSingleItem(output["Storage"]["ValidStorageOptions"]), context);
    }
    if (output.ValidProcessorFeatures === "") {
        contents.ValidProcessorFeatures = [];
    }
    if (output["ValidProcessorFeatures"] !== undefined &&
        output["ValidProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.ValidProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList(__getArrayIfSingleItem(output["ValidProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    return contents;
};
var deserializeAws_queryValidStorageOptions = function (output, context) {
    var contents = {
        StorageType: undefined,
        StorageSize: undefined,
        ProvisionedIops: undefined,
        IopsToStorageRatio: undefined,
        SupportsStorageAutoscaling: undefined,
    };
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output.StorageSize === "") {
        contents.StorageSize = [];
    }
    if (output["StorageSize"] !== undefined && output["StorageSize"]["Range"] !== undefined) {
        contents.StorageSize = deserializeAws_queryRangeList(__getArrayIfSingleItem(output["StorageSize"]["Range"]), context);
    }
    if (output.ProvisionedIops === "") {
        contents.ProvisionedIops = [];
    }
    if (output["ProvisionedIops"] !== undefined && output["ProvisionedIops"]["Range"] !== undefined) {
        contents.ProvisionedIops = deserializeAws_queryRangeList(__getArrayIfSingleItem(output["ProvisionedIops"]["Range"]), context);
    }
    if (output.IopsToStorageRatio === "") {
        contents.IopsToStorageRatio = [];
    }
    if (output["IopsToStorageRatio"] !== undefined && output["IopsToStorageRatio"]["DoubleRange"] !== undefined) {
        contents.IopsToStorageRatio = deserializeAws_queryDoubleRangeList(__getArrayIfSingleItem(output["IopsToStorageRatio"]["DoubleRange"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = __parseBoolean(output["SupportsStorageAutoscaling"]);
    }
    return contents;
};
var deserializeAws_queryValidStorageOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryValidStorageOptions(entry, context);
    });
};
var deserializeAws_queryValidUpgradeTargetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryUpgradeTarget(entry, context);
    });
};
var deserializeAws_queryVpcSecurityGroupMembership = function (output, context) {
    var contents = {
        VpcSecurityGroupId: undefined,
        Status: undefined,
    };
    if (output["VpcSecurityGroupId"] !== undefined) {
        contents.VpcSecurityGroupId = __expectString(output["VpcSecurityGroupId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
var deserializeAws_queryVpcSecurityGroupMembershipList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_queryVpcSecurityGroupMembership(entry, context);
    });
};
var deserializeAws_queryVpnDetails = function (output, context) {
    var contents = {
        VpnId: undefined,
        VpnTunnelOriginatorIP: undefined,
        VpnGatewayIp: undefined,
        VpnPSK: undefined,
        VpnName: undefined,
        VpnState: undefined,
    };
    if (output["VpnId"] !== undefined) {
        contents.VpnId = __expectString(output["VpnId"]);
    }
    if (output["VpnTunnelOriginatorIP"] !== undefined) {
        contents.VpnTunnelOriginatorIP = __expectString(output["VpnTunnelOriginatorIP"]);
    }
    if (output["VpnGatewayIp"] !== undefined) {
        contents.VpnGatewayIp = __expectString(output["VpnGatewayIp"]);
    }
    if (output["VpnPSK"] !== undefined) {
        contents.VpnPSK = __expectString(output["VpnPSK"]);
    }
    if (output["VpnName"] !== undefined) {
        contents.VpnName = __expectString(output["VpnName"]);
    }
    if (output["VpnState"] !== undefined) {
        contents.VpnState = __expectString(output["VpnState"]);
    }
    return contents;
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            var parsedObj = xmlParse(encoded, {
                attributeNamePrefix: "",
                ignoreAttributes: false,
                parseNodeValue: false,
                trimValues: false,
                tagValueProcessor: function (val) { return (val.trim() === "" && val.includes("\n") ? "" : decodeHTML(val)); },
            });
            var textNodeName = "#text";
            var key = Object.keys(parsedObj)[0];
            var parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return __getValueFromTextNode(parsedObjToReturn);
        }
        return {};
    });
};
var buildFormUrlencodedString = function (formEntries) {
    return Object.entries(formEntries)
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value);
    })
        .join("&");
};
var loadQueryErrorCode = function (output, data) {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
    return "";
};
