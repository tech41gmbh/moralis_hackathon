import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { formatUrl } from "@aws-sdk/util-format-url";
var regARN = /arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?/;
var sourceIdToCommandKeyMap = {
    SourceDBSnapshotIdentifier: "CopyDBSnapshot",
    SourceDBInstanceIdentifier: "CreateDBInstanceReadReplica",
    ReplicationSourceIdentifier: "CreateDBCluster",
    SourceDBClusterSnapshotIdentifier: "CopyDBClusterSnapshot",
    SourceDBInstanceArn: "StartDBInstanceAutomatedBackupsReplication",
};
var version = "2014-10-31";
export function crossRegionPresignedUrlMiddleware(options) {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var input, region, sourceIdKey, command, sourceRegion, resolvedEndpoint, request, signer, presignedRequest;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        input = args.input;
                        return [4, options.region()];
                    case 1:
                        region = _b.sent();
                        sourceIdKey = Object.keys(sourceIdToCommandKeyMap).filter(function (sourceKeyId) {
                            return input.hasOwnProperty(sourceKeyId);
                        })[0];
                        if (!sourceIdKey)
                            return [2, next(args)];
                        command = sourceIdToCommandKeyMap[sourceIdKey];
                        if (!(!input.PreSignedUrl && isARN(input[sourceIdKey]) && region !== getEndpointFromARN(input[sourceIdKey]))) return [3, 4];
                        sourceRegion = getEndpointFromARN(input[sourceIdKey]);
                        return [4, options.endpoint()];
                    case 2:
                        resolvedEndpoint = _b.sent();
                        resolvedEndpoint.hostname = "rds." + sourceRegion + ".amazonaws.com";
                        request = new HttpRequest(__assign(__assign({}, resolvedEndpoint), { protocol: "https", headers: {
                                host: resolvedEndpoint.hostname,
                            }, query: (_a = {
                                    Action: command,
                                    Version: version,
                                    KmsKeyId: input.KmsKeyId,
                                    DestinationRegion: region
                                },
                                _a[sourceIdKey] = input[sourceIdKey],
                                _a) }));
                        signer = new SignatureV4({
                            credentials: options.credentials,
                            region: sourceRegion,
                            service: "rds",
                            sha256: options.sha256,
                            uriEscapePath: options.signingEscapePath,
                        });
                        return [4, signer.presign(request, {
                                expiresIn: 3600,
                            })];
                    case 3:
                        presignedRequest = _b.sent();
                        args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { PreSignedUrl: formatUrl(presignedRequest) }) });
                        _b.label = 4;
                    case 4: return [2, next(args)];
                }
            });
        }); };
    };
}
export var crossRegionPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
    override: true,
};
export var getCrossRegionPresignedUrlPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(crossRegionPresignedUrlMiddleware(config), crossRegionPresignedUrlMiddlewareOptions);
    },
}); };
function isARN(id) {
    if (!id)
        return false;
    return regARN.test(id);
}
function getEndpointFromARN(arn) {
    var arnArr = arn.split(":");
    if (arnArr.length < 4) {
        throw new Error("Cannot infer endpoint from '" + arn + "'");
    }
    return arnArr[3];
}
